/*
#############################################################################################
# Mass Effect 2 (Legendary Edition) (2.0.0.48602) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.53-MELE
# ========================================================================================= #
# File: SFXGame_classes.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/


#pragma once
#include <Windows.h>
#include <cstdio>
#include "../SdkInitializer.h"



#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_BIO2DA_INDEX_ERROR                                 -1
#define CONST_AI_NearMissDistance                                200
#define CONST_AI_NearbyHurtDistance                              500
#define CONST_TIMER_ADJUSTTOSLOT_LIMIT                           5.f
#define CONST_MAXSEARCHPATHLENGTH                                2000.0f
#define CONST_BIO_ACTION_ANIM_NODE_COUNT                         11
#define CONST_SHOTS_PER_LOOP_CYCLE                               5.0f
#define CONST_Bio_SkillState                                     'SkillState'
#define CONST_Bio_Physics                                        'Physics'
#define CONST_Bio_Opened                                         'Opened'
#define CONST_Bio_Closed                                         'Closed'
#define CONST_BIO_CAMERA_UTILITY_COLLISION_POINT_COUNT           8
#define CONST_CAMERA_PITCH_MAX_DEG                               65.0f
#define CONST_DEFAULT_CAMERA_FOV                                 52.9f
#define CONST_DEFAULT_NEAR_CLIP_PLANE                            10.0f
#define CONST_BITS_PER_INT                                       32
#define CONST_EncodedSaveDescriptorMultiplier                    1000000
#define CONST_MaxSaveSize                                        1048576
#define CONST_MaleMorphHead                                      "BIOG_MORPH_FACE.Player_Base_Male"
#define CONST_FemaleMorphHead                                    "BIOG_MORPH_FACE.Player_Base_Female"
#define CONST_IsFemale                                           66
#define CONST_MaxEnemyLevel                                      100
#define CONST_ME2_Plots_Utility_Player_Info_Female_Player        66
#define CONST_ME2_Plots_Utility_Player_Info_Childhood            7
#define CONST_ME2_Plots_Utility_Player_Info_Reputation           8
#define CONST_ME2_Plots_Utility_Player_Info_Character_Class      230
#define CONST_ME2_Plots_Utility_Player_Info_Paragon              2
#define CONST_ME2_Plots_Utility_Player_Info_Renegade             3
#define CONST_ME2_Plots_Utility_Player_Info_Playthrough_Complete 76
#define CONST_ME2_Plots_Utility_Player_Info_Plot_Added_Max_Medigel 11
#define CONST_ME2_Plots_Utility_Player_Info_Current_Music        9
#define CONST_ME2_Plots_Utility_Player_Info_Gave_ME1Credits      7558
#define CONST_ME2_Plots_Utility_Player_Info_ME1_ImportCredits    844
#define CONST_ME1_Plots_for_ME2_Utility_Henchman_InParty_Turian  2659
#define CONST_ME1_Plots_for_ME2_Utility_Henchman_InParty_Wrex    3753
#define CONST_ME1_Plots_for_ME2_Background_and_Relationships_Ashley_Romance_True 1528
#define CONST_ME1_Plots_for_ME2_Background_and_Relationships_Background 1532
#define CONST_ME1_Plots_for_ME2_Background_and_Relationships_Background_Colonist 1535
#define CONST_ME1_Plots_for_ME2_Background_and_Relationships_Background_Earthborn 1534
#define CONST_ME1_Plots_for_ME2_Background_and_Relationships_Background_Spacer 1533
#define CONST_ME1_Plots_for_ME2_Background_and_Relationships_Garrus_Influence 3921
#define CONST_ME1_Plots_for_ME2_Background_and_Relationships_Garrus_Influence_Pushed_back_to_CSec 3922
#define CONST_ME1_Plots_for_ME2_Background_and_Relationships_Garrus_Influence_Pushed_to_Spectres 3923
#define CONST_ME1_Plots_for_ME2_Background_and_Relationships_Garrus_Joined_Squad 2400
#define CONST_ME1_Plots_for_ME2_Background_and_Relationships_Kaidan_romance_true 1529
#define CONST_ME1_Plots_for_ME2_Background_and_Relationships_Liara_romance_true 1530
#define CONST_ME1_Plots_for_ME2_Background_and_Relationships_NoRomance_True 1926
#define CONST_ME1_Plots_for_ME2_Background_and_Relationships_Reputation 1536
#define CONST_ME1_Plots_for_ME2_Background_and_Relationships_Reputation_Ruthless 1539
#define CONST_ME1_Plots_for_ME2_Background_and_Relationships_Reputation_sole_survivor 1537
#define CONST_ME1_Plots_for_ME2_Background_and_Relationships_Reputation_War_hero 1538
#define CONST_ME1_Plots_for_ME2_Background_and_Relationships_Tali_pilgrimmage_completed 1531
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Asari_Companion_Plot_Complete 5376
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Asari_Companion_Received_Boon 5596
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Biased_Reporter_Punched_Her 3716
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Biased_Reporter_Shepard_Looked_Bad 3718
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Biased_Reporter_Shepard_Looked_Good 3717
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Biased_Reporter_Walked_Away 3750
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Consort_Plot_Got_and_Used_Token 2152
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Doctor_Michel_Black_Mailer_Dealt_With 5381
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Doctor_Michel_Black_Mailer_Dealt_With_Killed 5383
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Doctor_Michel_Black_Mailer_Dealt_With_Persuaded 5382
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_FIRST_TIME_TALKED_TO_Harkin 5210
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Fist_Fist_Left_Alive 3733
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Keeper_Secret_Chorban_dealt_with 5387
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Keeper_Secret_Chorban_dealt_with_Killed 5388
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Keeper_Secret_Chorban_dealt_with_Scared_Off 5389
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Keeper_Secret_Scan_the_Keepers_Accepted_Quest 5385
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Keeper_Secret_Scan_the_Keepers_Accepted_Quest_Chorbin_Gave_Quest 5386
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Keeper_Secret_Scan_the_Keepers_NumKeepersScanned 547
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Roleplaying_Plots_RP104_Worst_Enemy_Endorsement 5597
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Roleplaying_Plots_RP104_Worst_Enemy_No_Support 5598
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Roleplaying_Plots_RP105a_Expose_Quest_Completed 5371
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Roleplaying_Plots_RP105a_Expose_Quest_Completed_Gave_Info 5372
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Roleplaying_Plots_RP110_In_Flanders_Fields_Quest_Complete 5368
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Roleplaying_Plots_RP110_In_Flanders_Fields_Quest_Complete_Got_Body 5369
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Roleplaying_Plots_RP111_Drink_Before_the_War_Spoke_to_Mom 5352
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Roleplaying_Plots_RP112_I_Remember_Me_Resolved 5347
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Roleplaying_Plots_RP112_I_Remember_Me_Resolved_Bait_and_Switch 5349
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Roleplaying_Plots_RP112_I_Remember_Me_Resolved_Talked_Her_Down 5348
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Roleplaying_Plots_RP113_Memories_of_Green_Met_Finch 5353
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Roleplaying_Plots_RP113_Memories_of_Green_Plot_Complete 5354
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_Roleplaying_Plots_RP113_Memories_of_Green_Plot_Complete_Killed_Finch 5355
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_The_Fan_Knew_Conrad 3141
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_The_Fan_Knew_Conrad_Charmed 3142
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_The_Fan_Knew_Conrad_Got_him_killed 3144
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_The_Fan_Knew_Conrad_Intimidated 3143
#define CONST_ME1_Plots_for_ME2_CH1_Star_Citadel_The_Fan_Knew_Conrad_Unfinished 3145
#define CONST_ME1_Plots_for_ME2_CH2_Feros_Colony_Survived        3046
#define CONST_ME1_Plots_for_ME2_CH2_Feros_Shiala_Lived           3197
#define CONST_ME1_Plots_for_ME2_CH2_Feros_Frontier_Lost_Colony_Outcome 5362
#define CONST_ME1_Plots_for_ME2_CH2_Feros_Frontier_Lost_Colony_Outcome_Give_Failed 5366
#define CONST_ME1_Plots_for_ME2_CH2_Feros_Frontier_Lost_Colony_Outcome_Give_Good 5364
#define CONST_ME1_Plots_for_ME2_CH2_Feros_Frontier_Lost_Colony_Outcome_Give_Good_Plus 5363
#define CONST_ME1_Plots_for_ME2_CH2_Feros_Frontier_Lost_Colony_Outcome_Renegade 5367
#define CONST_ME1_Plots_for_ME2_CH2_Noveria_ICE_60_Conversation_Flags_Han_Olar_Talked_Once 5384
#define CONST_ME1_Plots_for_ME2_CH2_Noveria_Leaving_Hanshan_Port_Kickbacks_Kickbacks_Complete 5373
#define CONST_ME1_Plots_for_ME2_CH2_Noveria_Leaving_Hanshan_Port_Kickbacks_Kickbacks_Complete_Evidence_to_Gianna 5375
#define CONST_ME1_Plots_for_ME2_CH2_Noveria_Leaving_Hanshan_Port_Kickbacks_Kickbacks_Complete_Evidence_to_Lorik 5374
#define CONST_ME1_Plots_for_ME2_CH2_Noveria_Port_Hanshen_Gianna_Alive 3150
#define CONST_ME1_Plots_for_ME2_CH2_Noveria_Port_Hanshen_Got_Lorik_to_Testify 3149
#define CONST_ME1_Plots_for_ME2_CH2_Noveria_Rachni_Rachni_Alive  3151
#define CONST_ME1_Plots_for_ME2_CH2_Virmire_Ash_died             1540
#define CONST_ME1_Plots_for_ME2_CH2_Virmire_Ash_Killed_Wrex      1862
#define CONST_ME1_Plots_for_ME2_CH2_Virmire_Kaidan_died          1541
#define CONST_ME1_Plots_for_ME2_CH2_Virmire_Kirrahe_Survived     3390
#define CONST_ME1_Plots_for_ME2_CH2_Virmire_PC_Killed_Thanoptis  2278
#define CONST_ME1_Plots_for_ME2_CH2_Virmire_Wrex_Died            3752
#define CONST_ME1_Plots_for_ME2_CH2_Virmire_Incursion_40_GethFlyers_Disabled 5370
#define CONST_ME1_Plots_for_ME2_CH4_Star_Citadel_Anderson_chosen 1556
#define CONST_ME1_Plots_for_ME2_CH4_Star_Citadel_Council_Alive   1554
#define CONST_ME1_Plots_for_ME2_CH4_Star_Citadel_Council_Dead    1553
#define CONST_ME1_Plots_for_ME2_CH4_Star_Citadel_Udina_Chosen    1555
#define CONST_ME1_Plots_for_ME2_DLC_UNC_UNC52_Plot_Finished      5360
#define CONST_ME1_Plots_for_ME2_DLC_UNC_UNC52_Plot_Finished_Humans_Rescued 5361
#define CONST_ME1_Plots_for_ME2_Global_Player_Played_ME          2279
#define CONST_ME1_Plots_for_ME2_Light_Content_Subplots_Cerberus_Plots_Fought_Cerberus 2366
#define CONST_ME1_Plots_for_ME2_Light_Content_Subplots_Cerberus_Plots_Heard_of_Cerberus 2365
#define CONST_ME1_Plots_for_ME2_Light_Content_Subplots_Contracts_and_Licenses_Got_Elkoss_Combine 3773
#define CONST_ME1_Plots_for_ME2_Light_Content_Subplots_SP103_GhostInTheMachine_Plot_Complete 5599
#define CONST_ME1_Plots_for_ME2_Light_Content_Subplots_SP108_SlaveQueen_Player_Killed_Sister 1259
#define CONST_ME1_Plots_for_ME2_Light_Content_Subplots_SP108_SlaveQueen_Player_Met_Nassana 1260
#define CONST_ME1_Plots_for_ME2_Light_Content_Subplots_SP111_Hostage_Situation_chairman_died 5377
#define CONST_ME1_Plots_for_ME2_Light_Content_Subplots_SP111_Hostage_Situation_Situation_Resolved 5378
#define CONST_ME1_Plots_for_ME2_Light_Content_Subplots_SP111_Hostage_Situation_Situation_Resolved_Biotics_surrendered 5380
#define CONST_ME1_Plots_for_ME2_Light_Content_Subplots_SP111_Hostage_Situation_Situation_Resolved_Killed_Biotics 5379
#define CONST_ME1_Plots_for_ME2_Light_Content_Subplots_SP120_Survivors_Revenge_Quest_Complete 5357
#define CONST_ME1_Plots_for_ME2_Light_Content_Subplots_SP120_Survivors_Revenge_Quest_Complete_Convinced_Soldier 5358
#define CONST_ME1_Plots_for_ME2_Light_Content_Subplots_SP120_Survivors_Revenge_Quest_Complete_Killed_Scientist 5359
#define CONST_ME1_Plots_for_ME2_Light_Content_Subplots_SP125_Insanity_Outcome 5605
#define CONST_ME1_Plots_for_ME2_Light_Content_Subplots_SP126_Shepard_Unchained_Quest_Completed_Killed_Darius 5601
#define CONST_ME1_Plots_for_ME2_Light_Content_Subplots_SP126_Shepard_Unchained_Quest_Completed_Negotiated_Treaty 5602
#define CONST_ME1_Plots_for_ME2_UNC_Hostile_Takeover_Blake_Agreed 3731
#define CONST_ME1_Plots_for_ME2_UNC_Hostile_Takeover_Blake_Persuaded 3732
#define CONST_VERY_SMALL_TIME                                    0.00001f
#define CONST_DEBUG_CAMERAS                                      FALSE
#define CONST_MAX_DEFAULT_INTIMACY                               750
#define CONST_MIN_DEFAULT_INTIMACY                               250
#define CONST_BIOCONV_REPLY_NONE                                 -1
#define CONST_BIO_PAWN_ANIM_RUN_RIGHT_FOOT_START                 0.25f
#define CONST_BIO_PAWN_ANIM_RUN_RIGHT_FOOT_END                   0.75f
#define CONST_BIO_PAWN_ANIM_WALK_START_SPEED                     0.05f
#define CONST_MAX_SIZE_PERCENT                                   0.75
#define CONST_HistoryLength                                      10
#define CONST_UUToM                                              0.01
#define CONST_HUD_SEGMENTS                                       64.0f
#define CONST_DefaultInVehicleReason                             343734
#define CONST_ENABLE_AI_REQUESTED_BY_UNKNOWN                     1
#define CONST_ENABLE_AI_REQUESTED_BY_CONVERSATION                2
#define CONST_ENABLE_AI_REQUESTED_BY_KISMET                      4
#define CONST_ENABLE_AI_REQUESTED_BY_GAME_EFFECT                 8
#define CONST_ENABLE_AI_REQUESTED_BY_DEATH                       16
#define CONST_CANCEL_REASON_SHOT                                 1
#define CONST_CANCEL_REASON_NEW_ORDER                            2
#define CONST_CANCEL_REASON_ORDER_CANCELLED                      4
#define CONST_CANCEL_REASON_TARGET_CHANGED                       8
#define CONST_CANCEL_REASON_IN_PLAYER_LINE_OF_FIRE               16
#define CONST_SFX_HOTKEY_SLOT_COUNT                              8
#define CONST_DefaultNoValidStorageReason                        343733
#define CONST_DefaultNotLoggedInReason                           297457
#define CONST_DefaultInCombatReason                              168057
#define CONST_DefaultNoSaveReason                                168056
#define CONST_GFX_GROUP_Crush_DoT                                41
#define CONST_GFX_GROUP_NeuralShockDoT                           40
#define CONST_GFX_GROUP_SpeedDebuff                              39
#define CONST_GFX_GROUP_RateOfFireDebuff                         38
#define CONST_GFX_GROUP_HealthRegenDebuff                        37
#define CONST_GFX_GROUP_HealthRegen                              36
#define CONST_GFX_GROUP_Overload_Dmg                             35
#define CONST_GFX_Group_TechImmunity                             34
#define CONST_GFX_Group_BioticImmunity                           33
#define CONST_GFX_Group_DisruptBeam                              32
#define CONST_GFX_GROUP_TraumaDoT                                31
#define CONST_GFX_GROUP_TraumaRegen                              30
#define CONST_GFX_GROUP_Concussive_AccDebuff                     29
#define CONST_GFX_GROUP_Concussive_Stun                          28
#define CONST_GFX_GROUP_Sabotage_BurnDamage                      27
#define CONST_GFX_GROUP_Carnage                                  26
#define CONST_GFX_GROUP_Entrench                                 25
#define CONST_GFX_GROUP_Sabotage_Sniper                          24
#define CONST_GFX_GROUP_Sabotage_Assault                         23
#define CONST_GFX_GROUP_Sabotage_Shotgun                         22
#define CONST_GFX_GROUP_Sabotage_Pistol                          21
#define CONST_GFX_GROUP_Singularity                              20
#define CONST_GFX_GROUP_Acid_DR_Lowered                          19
#define CONST_GFX_GROUP_Resin_Slow                               18
#define CONST_GFX_GROUP_Immunity                                 16
#define CONST_GFX_GROUP_Neural_Shock                             15
#define CONST_GFX_GROUP_Damping_Field                            14
#define CONST_GFX_GROUP_AI_Hacking                               13
#define CONST_GFX_GROUP_Sabotage_WeaponPowers                    12
#define CONST_GFX_GROUP_Stasis                                   11
#define CONST_GFX_GROUP_Warp_WeakenArmor                         10
#define CONST_GFX_GROUP_Warp_DoT                                 9
#define CONST_GFX_GROUP_Lift                                     8
#define CONST_GFX_GROUP_Take_Down                                7
#define CONST_GFX_GROUP_Adrenaline                               6
#define CONST_GFX_GROUP_Shield_Boost                             5
#define CONST_GFX_GROUP_Suppression_Target                       4
#define CONST_GFX_GROUP_Suppression_Caster                       3
#define CONST_GFX_GROUP_Critical_Stun                            2
#define CONST_GFX_GROUP_Critical_Dmg                             1
#define CONST_GFX_GROUP_Marksman                                 0
#define CONST_GFX_GROUP_ALWAYS_STACKS                            -1
#define CONST_UIWORLD_FLAG_HideHeadGear                          1
#define CONST_UIWORLD_FLAG_HideScar                              2
#define CONST_UIWORLD_FLAG_DisableCollision                      4
#define CONST_UIWORLD_FLAG_SpawnHidden                           8
#define CONST_NUM_HENCH                                          12
#define CONST_INDEX_PARTY_SIZE                                   22
#define CONST_INDEX_BASE_HENCH                                   33
#define CONST_NUM_LINKS                                          10
#define CONST_MaxIcons                                           8
#define CONST_CloseAchievement                                   1
#define CONST_Initialize                                         2
#define CONST_NextItem                                           3
#define CONST_PrevItem                                           4
#define CONST_UpdateItemList                                     5
#define CONST_DumpDebug                                          6
#define CONST_PickSegment                                        1
#define CONST_CloseMenu                                          2
#define CONST_BWInitialized                                      3
#define CONST_GotoMainMenu                                       4
#define CONST_ConfirmMainMenu                                    5
#define CONST_PExitGame                                          6
#define CONST_ConfirmExit                                        7
#define CONST_PhotoMode                                          8
#define CONST_srExitConfirm                                      176289
#define CONST_srMainMenuConfirm                                  176290
#define CONST_srConfirm                                          153362
#define CONST_srCancel                                           153363
#define CONST_CHARACTER_HANDLER_EVENT_INITIALIZE                 1
#define CONST_CHARACTER_HANDLER_EVENT_NEXT_CHARACTER             2
#define CONST_CHARACTER_HANDLER_EVENT_AUTO_LEVEL_UP              3
#define CONST_CHARACTER_HANDLER_EVENT_PURCHASE_TALENT_RANK       4
#define CONST_CHARACTER_HANDLER_EVENT_CANCEL                     6
#define CONST_CHARACTER_HANDLER_EVENT_COMMIT                     7
#define CONST_CHARACTER_HANDLER_EVENT_PREV_CHARACTER             8
#define CONST_CHARACTER_HANDLER_EVENT_END_SUSPEND                10
#define CONST_DEFAULT_INITIAL_HIDDEN_TIMER                       0.1
#define CONST_MODE_Illegal                                       4
#define CONST_SkipNode                                           1
#define CONST_SelectEntry                                        2
#define CONST_ShowReplyWheel                                     3
#define CONST_QueueEntry                                         4
#define CONST_SelectRenegadeInterrupt                            5
#define CONST_SelectParagonInterrupt                             6
#define CONST_InitializationComplete                             7
#define CONST_UNUSED_SLOT                                        -1
#define CONST_RETURN_OPTION                                      -2
#define CONST_INVESTIGATE_OPTION                                 -3
#define CONST_MODE_Intimidate                                    3
#define CONST_MODE_Charm                                         2
#define CONST_MODE_Investigate                                   1
#define CONST_MODE_None                                          0
#define CONST_InitializeCredits                                  1
#define CONST_GetNextCredit                                      2
#define CONST_CreditScrollComplete                               3
#define CONST_CreditsCancel                                      4
#define CONST_Close                                              1
#define CONST_Select                                             3
#define CONST_back                                               4
#define CONST_Scan                                               5
#define CONST_ClosePlanet                                        6
#define CONST_CloseScan                                          7
#define CONST_EnableMouseMovement                                8
#define CONST_DisableMouseMovement                               9
#define CONST_InitializeGameOver                                 1
#define CONST_LoadLastSave                                       3
#define CONST_QuitToMainMenu                                     4
#define CONST_ShowLoadScreen                                     5
#define CONST_IT_Populate                                        1
#define CONST_IT_Finished                                        2
#define CONST_SaveOption_Initialize                              1
#define CONST_SaveOption_SaveGame                                2
#define CONST_SaveOption_DeleteGame                              4
#define CONST_SaveOption_ChangeStorageDevice                     10
#define CONST_SaveOption_NewSaveGame                             11
#define CONST_LoadOption_Initialize                              1
#define CONST_LoadOption_LoadGame                                3
#define CONST_LoadOption_DeleteGame                              4
#define CONST_LoadOption_QuitToMainMenu                          5
#define CONST_LoadOption_ChangeStorageDevice                     11
#define CONST_LoadOption_InitializeCareers                       6
#define CONST_LoadOption_SelectCareer                            7
#define CONST_LoadOption_DeleteCareer                            8
#define CONST_StartNewGame                                       1
#define CONST_ShowHonors                                         2
#define CONST_ShowCredits                                        3
#define CONST_InitializeMainMenu                                 4
#define CONST_ResumeGame                                         5
#define CONST_ShowLoadGui                                        6
#define CONST_ShowLiveContent                                    8
#define CONST_ShowOptions                                        9
#define CONST_ExitGame                                           10
#define CONST_CerberusStateExecuteAction                         14
#define CONST_StartNewGameFemale                                 15
#define CONST_CerberusDLCAvailable                               16
#define CONST_OpenMarketPlace                                    17
#define CONST_ShowLoadGuiForME2Import                            18
#define CONST_ShowLoadGuiForImport                               13
#define CONST_NextGeneratedHead                                  1
#define CONST_SliderValueChanged                                 2
#define CONST_StartGameWithIconic                                3
#define CONST_InitializeNC                                       4
#define CONST_StartGameWithCustom                                5
#define CONST_ExitNewCharacter                                   6
#define CONST_ShowNameKeyboard                                   7
#define CONST_ConfirmCharCreate                                  8
#define CONST_ClassChange                                        9
#define CONST_SelectPreviousChar                                 10
#define CONST_Hide3DModel                                        11
#define CONST_StartCustom                                        12
#define CONST_Show3DModel                                        13
#define CONST_ZoomInOnFace                                       14
#define CONST_ZoomOutFromFace                                    15
#define CONST_ResetCategory                                      16
#define CONST_Set3DModelState                                    17
#define CONST_UpdateBonusTalents                                 18
#define CONST_ShowCodeKeyboard                                   20
#define CONST_SetCode                                            21
#define CONST_SelectStorageDevice                                24
#define CONST_MAX_CLASS_CHOICES                                  6
#define CONST_Option_Close                                       1
#define CONST_Option_ResetDefaults                               2
#define CONST_Option_Initialize                                  3
#define CONST_Option_SetOption                                   4
#define CONST_Option_SaveAndExit                                 5
#define CONST_Option_ConfirmCancelExit                           6
#define CONST_Option_HDR_Refresh                                 10
#define CONST_InitializeParty                                    1
#define CONST_SelectParty                                        2
#define CONST_SetAppearance                                      3
#define CONST_Conflict                                           4
#define CONST_GetInfo                                            5
#define CONST_THIEF_DOWNLOADED                                   2288
#define CONST_VETERAN_DOWNLOADED                                 2289
#define CONST_CONST_SetCustomName                                19
#define CONST_CONST_CopyCode                                     22
#define CONST_CONST_PasteCode                                    23
#define CONST_Option_ResetPCBindings                             7
#define CONST_Option_ApplyPCBindings                             8
#define CONST_Option_ApplySettings                               9
#define CONST_PCOptions_MaxNumKeysPerAlias                       2
#define CONST_SPECIALIZATION_HANDLER_EVENT_CHOOSE_SPECIALIZATION 1
#define CONST_SPECIALIZATION_HANDLER_EVENT_INITIALIZE            2
#define CONST_SPECIALIZATION_HANDLER_EVENT_CANCEL_SPECIALIZATION 3
#define CONST_FadeoutComplete                                    1
#define CONST_FadeinComplete                                     2
#define CONST_AnyKeyPressed                                      3
#define CONST_Init                                               4
#define CONST_InitializeSelectCharacter                          1
#define CONST_DeleteCharacter                                    2
#define CONST_ResumeGame01                                       3
#define CONST_NextCharacter                                      4
#define CONST_PrevCharacter                                      5
#define CONST_back01                                             6
#define CONST_NewCharacter                                       7
#define CONST_DeleteCharacterConfirm                             8
#define CONST_CloseConfirm                                       9
#define CONST_ReturnToBrowserMenu                                1
#define CONST_CloseGUIs                                          2
#define CONST_TutorialComplete                                   1
#define CONST_MAXARMORLEVEL                                      100.f
#define CONST_breakChars                                         " .()='\\/\""
#define CONST_SFX_AUDHELPER_NO_SPEAKER_FOUND                     -10
#define CONST_LUNGE_HEIGHT_THRESHOLD                             200.f
#define CONST_LUNGE_VISIBLE_THRESHOLD                            0.5f
#define CONST_MAXGUNS                                            4
#define CONST_ME1_Global_Plots_Paragon_Points                    47
#define CONST_ME1_Global_Plots_Renegade_Points                   46
#define CONST_ME1_FullParagonBarValue                            247
#define CONST_ME1_FullRenegadeBarValue                           247
#define CONST_MAX_TRACERS                                        15
#define CONST_MAX_PSCS                                           15
#define CONST_MAX_WwiseAC                                        20
#define CONST_SFX_NUM_CONSTRAINT_CLASSES                         11
#define CONST_SFX_MAX_INSTANCES_PER_CLASS                        3
#define CONST_SFX_MAX_GOALEVALUATORS                             3
#define CONST_CharmIntimidateBonus                               0.2f
#define CONST_ME1_Global_Plots_Henchman_Ash_Romance_Buddy_dialog_count 17
#define CONST_ME1_Global_Plots_Henchman_Garrus_Making_Garrus_Paragon 37
#define CONST_ME1_Global_Plots_Henchman_Garrus_Making_Garrus_Renegade 38
#define CONST_ME1_Global_Plots_Henchman_Kaidan_Romance_Buddy_dialog_count 15
#define CONST_ME1_Global_Plots_Henchman_Liara_Romance_Buddy_dialog_count 16
#define CONST_ME1_Global_Plots_Henchman_Tali_Tali_plot_complete  4596
#define CONST_ME1_Global_Plots_Achievements_Rich                 7156
#define CONST_ME1_Global_Plots_Romance_State_Romance_State       6528
#define CONST_ME1_Global_Plots_QMLicenses_mfcl_all_elkoss        7164
#define CONST_ME1_Utility_Henchman_InParty_Turian                3941
#define CONST_ME1_Utility_Henchman_InParty_Krogan                3942
#define CONST_ME1_Utility_PlayerInfo_Childhood                   1
#define CONST_ME1_Utility_PlayerInfo_Reputation                  2
#define CONST_ME1_CH1_Star_Citadel_Asari_Companion_Received_Boon 4032
#define CONST_ME1_CH1_Star_Citadel_Asari_Companion_Plot_Complete 5853
#define CONST_ME1_CH1_Star_Citadel_Doctor_Michel_Black_Mailer_Dealt_With_Persuaded 3872
#define CONST_ME1_CH1_Star_Citadel_Doctor_Michel_Black_Mailer_Dealt_With_Killed 3873
#define CONST_ME1_CH1_Star_Citadel_Find_the_Quarian_Fist_LetGo   7270
#define CONST_ME1_CH1_Star_Citadel_FIRST_TIME_TALKED_TO_Harkin   3979
#define CONST_ME1_CH1_Star_Citadel_Keeper_Secret_Scan_the_Keepers_Accepted_Quest_Chorbin_Gave_Quest 6922
#define CONST_ME1_CH1_Star_Citadel_Keeper_Secret_Scan_the_Keepers_NumKeepersScanned 39
#define CONST_ME1_CH1_Star_Citadel_Keeper_Secret_Chorban_dealt_with_Killed 3880
#define CONST_ME1_CH1_Star_Citadel_Keeper_Secret_Chorban_dealt_with_Scared_Off 3881
#define CONST_ME1_CH1_Star_Citadel_Roleplaying_Plots_RP102_Fan_Had_First_Conversation 4731
#define CONST_ME1_CH1_Star_Citadel_Roleplaying_Plots_RP102_Fan_Had_Last_Conversation_Convinced_Verner 4914
#define CONST_ME1_CH1_Star_Citadel_Roleplaying_Plots_RP102_Fan_Had_Last_Conversation_Final_Go_Away 4915
#define CONST_ME1_CH1_Star_Citadel_Roleplaying_Plots_RP102_Fan_Had_Last_Conversation 4913
#define CONST_ME1_CH1_Star_Citadel_Roleplaying_Plots_RP103_Fourth_Estate_Interview_Closed_Shepards_Punch_Out 4768
#define CONST_ME1_CH1_Star_Citadel_Roleplaying_Plots_RP103_Fourth_Estate_Interview_Closed_Excused_Himself 4767
#define CONST_ME1_CH1_Star_Citadel_Roleplaying_Plots_RP103_Fourth_Estate_Interview_Closed_Refused_Interview 4766
#define CONST_ME1_CH1_Star_Citadel_Roleplaying_Plots_RP104_Worst_Enemy_Endorsement 4838
#define CONST_ME1_CH1_Star_Citadel_Roleplaying_Plots_RP104_Worst_Enemy_No_Support 5905
#define CONST_ME1_CH1_Star_Citadel_Roleplaying_Plots_RP105a_Expose_Quest_Completed_Gave_Info 4948
#define CONST_ME1_CH1_Star_Citadel_Roleplaying_Plots_RP110_In_Flanders_Fields_Quest_Complete_Got_Body 4820
#define CONST_ME1_CH1_Star_Citadel_Roleplaying_Plots_RP111_Drink_Before_the_War_Spoke_to_Mom 4926
#define CONST_ME1_CH1_Star_Citadel_Roleplaying_Plots_RP112_I_Remember_Me_Resolved_Talked_Her_Down 4861
#define CONST_ME1_CH1_Star_Citadel_Roleplaying_Plots_RP112_I_Remember_Me_Resolved_Bait_and_Switch 4862
#define CONST_ME1_CH1_Star_Citadel_Roleplaying_Plots_RP113_Memories_of_Green_Met_Finch 4847
#define CONST_ME1_CH1_Star_Citadel_Roleplaying_Plots_RP113_Memories_of_Green_Plot_Complete_Killed_Finch 4855
#define CONST_ME1_CH2_Feros_Frontier_Lost_asari_decided          4133
#define CONST_ME1_CH2_Feros_Frontier_Lost_asari_fate_decided_Killed_Asari 3798
#define CONST_ME1_CH2_Feros_Frontier_Lost_Colony_Outcome_Give_Good_Plus 6252
#define CONST_ME1_CH2_Feros_Frontier_Lost_Colony_Outcome_Give_Good 6253
#define CONST_ME1_CH2_Feros_Frontier_Lost_Colony_Outcome_Give_Fail 6380
#define CONST_ME1_CH2_Feros_Frontier_Lost_Colony_Outcome_Renegade 6254
#define CONST_ME1_CH2_Feros_Frontier_Lost_Too_Many_Killed        2514
#define CONST_ME1_CH2_Feros_The_Company_Man_GOOD                 2490
#define CONST_ME1_CH2_Feros_The_Company_Man_GOOD_PLUS            2491
#define CONST_ME1_CH2_Noveria_ICE_60_Conversation_Flags_Han_Olar_Talked_Once 3860
#define CONST_ME1_CH2_Noveria_Leaving_Hanshan_Port_Betray_Gianna_Player_Betrayed 2713
#define CONST_ME1_CH2_Noveria_Leaving_Hanshan_Port_Kickbacks_Kickbacks_Complete_Evidence_to_Gianna 2690
#define CONST_ME1_CH2_Noveria_Leaving_Hanshan_Port_Kickbacks_Kickbacks_Complete_Evidence_to_Lorik 2687
#define CONST_ME1_CH2_Noveria_Rachni_Queen_Queen_Dealt_With_Queen_Released 2587
#define CONST_ME1_CH2_Virmire_Krogan_conundrum_Failure_Failure_AshKilledWithoutPermission 5543
#define CONST_ME1_CH2_Virmire_Krogan_conundrum_Failure_Failure_KilledBy_Ashley 3028
#define CONST_ME1_CH2_Virmire_The_Choice_Rescued_Ash             3827
#define CONST_ME1_CH2_Virmire_The_Choice_Rescued_Kaidan          3828
#define CONST_ME1_CH2_Virmire_Incursion_40_GethFlyers_Disabled   4464
#define CONST_ME1_CH2_Virmire_Incursion_40_jug40_captainupdate_GethFlyers_Reported 4459
#define CONST_ME1_CH2_Virmire_Infiltration_70_PsyranaDead        6058
#define CONST_ME1_CH2_Virmire_Krogan_conundrum_Failure_Failure_KilledBy_Player 3029
#define CONST_ME1_CH4_Star_Citadel_Final_Choice_Chose_Anderson   5435
#define CONST_ME1_CH4_Star_Citadel_Final_Choice_Choice_Is_Made_Save_the_Council 3001
#define CONST_ME1_CH4_Star_Citadel_Final_Choice_Choice_Is_Made_Destroy_the_Council 3002
#define CONST_ME1_CH4_Star_Citadel_Final_Choice_Chose_ambassador 5434
#define CONST_ME1_CH4_Star_Citadel_Final_Choice_Game_Complete    6530
#define CONST_ME1_Light_Content_Subplots_SP102_MonkeyFun_UNC84_Light_Content_Microplot_EasterEgg 7015
#define CONST_ME1_Light_Content_Subplots_SP103_GhostInTheMachine_Plot_Complete 4682
#define CONST_ME1_Light_Content_Subplots_SP108_SlaverQueen_Player_Killed_Sister 6848
#define CONST_ME1_Light_Content_Subplots_SP108_SlaverQueen_Player_knows_about_plot 4621
#define CONST_ME1_Light_Content_Subplots_SP109_Hostile_Takeover_Quest_Complete_Accepted_Money 5014
#define CONST_ME1_Light_Content_Subplots_SP109_Hostile_Takeover_Quest_Complete_Persuaded_Criminal 5015
#define CONST_ME1_Light_Content_Subplots_SP111_Hostage_Situation_chairman_died 4883
#define CONST_ME1_Light_Content_Subplots_SP111_Hostage_Situation_Situation_Resolved_Killed_Biotics 4885
#define CONST_ME1_Light_Content_Subplots_SP111_Hostage_Situation_Situation_Resolved_Biotics_surrendered 4886
#define CONST_ME1_Light_Content_Subplots_SP120_Survivors_Revenge_Quest_Complete_Convinced_Soldier 5038
#define CONST_ME1_Light_Content_Subplots_SP120_Survivors_Revenge_Quest_Complete_Killed_Scientist 5039
#define CONST_ME1_Light_Content_Subplots_SP122_CerberusTheTest_Heard_of_Cerberus 5885
#define CONST_ME1_Light_Content_Subplots_SP124_CerberusFinale_Found_Files 4608
#define CONST_ME1_Light_Content_Subplots_SP125_Insanity_Outcome  6288
#define CONST_ME1_Light_Content_Subplots_SP126_Shepard_Unchained_Quest_Completed_Killed_Darius 5072
#define CONST_ME1_Light_Content_Subplots_SP126_Shepard_Unchained_Quest_Completed_Negotiated_Treaty 5073
#define CONST_ME1_DLC_UNC_UNC52_Plot_Finished_Humans_Rescued     7317
#define CONST_STATUS_Barrier                                     1
#define CONST_STATUS_Bleedout                                    2
#define CONST_STATUS_HardenedShields                             4
#define CONST_STATUS_HeavyArmour                                 8
#define CONST_STATUS_MinimalDamage                               16
#define CONST_STATUS_ActivePower                                 32
#define CONST_STATUS_SuperRegen                                  64
#define CONST_SF_9SLICE_SCALE_ERROR                              0.05336
#define CONST_WEAPON_NONE                                        0
#define CONST_WEAPON_FAIL                                        1
#define CONST_NUM_KEYBOARD_QUICKSLOTS                            8
#define CONST_OPTION_CAMERA_ORBIT                                1
#define CONST_OPTION_CAMERA_FREE                                 0
#define CONST_OPTION_ON                                          1
#define CONST_OPTION_OFF                                         0
#define CONST_CROSSHAIR_SMOOTHING_BUFFER                         3
#define CONST_MINSHIELDBARS                                      0
#define CONST_MAXSHIELDBARS                                      6

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum SFXGame.BioBaseAppearance.EBioBaseAppearanceReportMethod
/*enum EBioBaseAppearanceReportMethod
{
	BIO_BASE_APPEARANCE_REPORT_METHOD_NONE             = 0,
	BIO_BASE_APPEARANCE_REPORT_METHOD_LOG              = 1,
	BIO_BASE_APPEARANCE_REPORT_METHOD_DIALOG           = 2,
	BIO_BASE_APPEARANCE_REPORT_METHOD_MAX              = 3
};*/

// Enum SFXGame.BioDefine.EBioEquipmentType
/*enum EBioEquipmentType
{
	EQUIPMENT_TYPE_INVALID                             = 0,
	EQUIPMENT_TYPE_ARMOR                               = 1,
	EQUIPMENT_TYPE_OMNITOOL                            = 2,
	EQUIPMENT_TYPE_WEAPON                              = 3,
	EQUIPMENT_TYPE_BIOAMP                              = 4,
	EQUIPMENT_TYPE_GRENADE                             = 5,
	EQUIPMENT_TYPE_MAX                                 = 6
};*/

// Enum SFXGame.BioDefine.EBioArmorType
/*enum EBioArmorType
{
	ARMOR_TYPE_NONE                                    = 0,
	ARMOR_TYPE_CLOTHING                                = 1,
	ARMOR_TYPE_LIGHT                                   = 2,
	ARMOR_TYPE_MEDIUM                                  = 3,
	ARMOR_TYPE_HEAVY                                   = 4,
	ARMOR_TYPE_MAX                                     = 5
};*/

// Enum SFXGame.BioDefine.EBioHeadGearType
/*enum EBioHeadGearType
{
	BIO_HEAD_GEAR_TYPE_HELMET                          = 0,
	BIO_HEAD_GEAR_TYPE_VISOR                           = 1,
	BIO_HEAD_GEAR_TYPE_COUNT                           = 2,
	BIO_HEAD_GEAR_TYPE_MAX                             = 3
};*/

// Enum SFXGame.BioDefine.EBioItemWeaponType
/*enum EBioItemWeaponType
{
	ITEM_WEAPTYPE_MELEE                                = 0,
	ITEM_WEAPTYPE_RANGED                               = 1,
	ITEM_WEAPTYPE_MAX                                  = 2
};*/

// Enum SFXGame.BioDefine.EBioItemWeaponRangedType
/*enum EBioItemWeaponRangedType
{
	ITEM_WEAPON_RANGED_PISTOL                          = 0,
	ITEM_WEAPON_RANGED_SHOTGUN                         = 1,
	ITEM_WEAPON_RANGED_ASSAULT_RIFLE                   = 2,
	ITEM_WEAPON_RANGED_SNIPER                          = 3,
	ITEM_WEAPON_RANGED_MAX                             = 4
};*/

// Enum SFXGame.BioDefine.EBioItemWeaponMeleeType
/*enum EBioItemWeaponMeleeType
{
	ITEM_WEAPON_MELEE_KNIFE                            = 0,
	ITEM_WEAPON_MELEE_SWORD                            = 1,
	ITEM_WEAPON_MELEE_AXE                              = 2,
	ITEM_WEAPON_MELEE_POLEARM                          = 3,
	ITEM_WEAPON_MELEE_SPEAR                            = 4,
	ITEM_WEAPON_MELEE_BLUNT                            = 5,
	ITEM_WEAPON_MELEE_COUNT                            = 6,
	ITEM_WEAPON_MELEE_MAX                              = 7
};*/

// Enum SFXGame.BioDefine.EBioTechniqueWeapon
/*enum EBioTechniqueWeapon
{
	BioWepTech_Pistol                                  = 0,
	BioWepTech_Blaster                                 = 1,
	BioWepTech_Assault                                 = 2,
	BioWepTech_Sniper                                  = 3,
	BioWepTech_Grenade                                 = 4,
	BioWepTech_Melee                                   = 5,
	BioWepTech_MAX                                     = 6
};*/

// Enum SFXGame.BioDefine.EActionStateVariable
/*enum EActionStateVariable
{
	BIO_ACTION_STATE_EXPLORE                           = 0,
	BIO_ACTION_STATE_COMBAT                            = 1,
	BIO_ACTION_STATE_MAX                               = 2
};*/

// Enum SFXGame.BioDefine.EStateEventElementTypes
/*enum EStateEventElementTypes
{
	SEE_Bool                                           = 0,
	SEE_Consequence                                    = 1,
	SEE_Float                                          = 2,
	SEE_Function                                       = 3,
	SEE_Int                                            = 4,
	SEE_LocalBool                                      = 5,
	SEE_LocalFloat                                     = 6,
	SEE_LocalInt                                       = 7,
	SEE_Substate                                       = 8,
	SEE_MAX                                            = 9
};*/

// Enum SFXGame.BioDefine.EBioCapabilityTypes
/*enum EBioCapabilityTypes
{
	BioCaps_AllTypes                                   = 0,
	BioCaps_SingleTargetAttack                         = 1,
	BioCaps_AreaAttack                                 = 2,
	BioCaps_Disable                                    = 3,
	BioCaps_Debuff                                     = 4,
	BioCaps_Defense                                    = 5,
	BioCaps_Heal                                       = 6,
	BioCaps_Buff                                       = 7,
	BioCaps_Suicide                                    = 8,
	BioCaps_Death                                      = 9,
	BioCaps_ERROR                                      = 10,
	BioCaps_MAX                                        = 11
};*/

// Enum SFXGame.BioDefine.ELookAtTransitionType
/*enum ELookAtTransitionType
{
	LookAt_Default                                     = 0,
	LookAt_Snap                                        = 1,
	LookAt_MAX                                         = 2
};*/

// Enum SFXGame.BioDefine.EBioAnimSkidTurnState
/*enum EBioAnimSkidTurnState
{
	eBioAnimSkid_NoState                               = 0,
	eBioAnimSkid_StartingLeft                          = 1,
	eBioAnimSkid_StartingRight                         = 2,
	eBioAnimSkid_TurningLeft                           = 3,
	eBioAnimSkid_TurningRight                          = 4,
	eBioAnimSkid_FinishingLeft                         = 5,
	eBioAnimSkid_FinishingRight                        = 6,
	eBioAnimSkid_MAX                                   = 7
};*/

// Enum SFXGame.BioDefine.EBioPawnHeadGearComponent
/*enum EBioPawnHeadGearComponent
{
	BIO_PAWN_HEAD_GEAR_COMPONENT_VISOR                 = 0,
	BIO_PAWN_HEAD_GEAR_COMPONENT_FACE_PLATE            = 1,
	BIO_PAWN_HEAD_GEAR_COMPONENT_HELMET                = 2,
	BIO_PAWN_HEAD_GEAR_COMPONENT_MAX                   = 3
};*/

// Enum SFXGame.BioDefine.ECustomizableElementType
/*enum ECustomizableElementType
{
	CustomizableType_None                              = 0,
	CustomizableType_Torso                             = 1,
	CustomizableType_Shoulders                         = 2,
	CustomizableType_Arms                              = 3,
	CustomizableType_Legs                              = 4,
	CustomizableType_Helmet                            = 5,
	CustomizableType_Spec                              = 6,
	CustomizableType_Tint                              = 7,
	CustomizableType_Pattern                           = 8,
	CustomizableType_PatternColor                      = 9,
	CustomizableType_MAX                               = 10
};*/

// Enum SFXGame.BioDefine.EAttachSlot
/*enum EAttachSlot
{
	EASlot_Holster                                     = 0,
	EASlot_LowerBack                                   = 1,
	EASlot_LeftShoulder                                = 2,
	EASlot_RightShoulder                               = 3,
	EASlot_CenterBack                                  = 4,
	EASlot_Max                                         = 5
};*/

// Enum SFXGame.BioDefine.EInventoryResourceTypes
/*enum EInventoryResourceTypes
{
	INV_RESOURCE_CREDITS                               = 0,
	INV_RESOURCE_MEDIGEL                               = 1,
	INV_RESOURCE_SALVAGE                               = 2,
	INV_RESOURCE_GRENADES                              = 3,
	INV_RESOURCE_RARE1_EEZO                            = 4,
	INV_RESOURCE_RARE2_IRIDIUM                         = 5,
	INV_RESOURCE_RARE3_PALLADIUM                       = 6,
	INV_RESOURCE_RARE4_PLATINUM                        = 7,
	INV_RESOURCE_PROBES                                = 8,
	INV_RESOURCE_FUEL                                  = 9,
	INV_RESOURCE_MAX                                   = 10
};*/

// Enum SFXGame.BioDefine.EBioVFXPriority
/*enum EBioVFXPriority
{
	BIO_VFX_PRIORITY_MIN                               = 0,
	BIO_VFX_PRIORITY_LOW                               = 1,
	BIO_VFX_PRIORITY_MEDIUM                            = 2,
	BIO_VFX_PRIORITY_HIGH                              = 3,
	BIO_VFX_PRIORITY_ALWAYS                            = 4,
	BIO_VFX_PRIORITY_MAX                               = 5
};*/

// Enum SFXGame.BioDefine.EBioFactionRelationship
/*enum EBioFactionRelationship
{
	BIO_Relation_Friendly                              = 0,
	BIO_Relation_Neutral                               = 1,
	BIO_Relation_Hostile                               = 2,
	BIO_Relation_MAX                                   = 3
};*/

// Enum SFXGame.BioDefine.EBioFactionTypes
/*enum EBioFactionTypes
{
	BIO_Faction_Player                                 = 0,
	BIO_Faction_Commoner                               = 1,
	BIO_Faction_Ambient                                = 2,
	BIO_Faction_Defender1                              = 3,
	BIO_Faction_Defender2                              = 4,
	BIO_Faction_Hostile1                               = 5,
	BIO_Faction_Hostile2                               = 6,
	BIO_Faction_Hacked                                 = 7,
	BIO_Faction_MAX                                    = 8
};*/

// Enum SFXGame.BioDefine.EBioPawnClassification
/*enum EBioPawnClassification
{
	BPC_General                                        = 0,
	BPC_ActionStation                                  = 1,
	BPC_Ambient                                        = 2,
	BPC_UIWorld                                        = 3,
	BPC_Combat                                         = 4,
	BPC_Player                                         = 5,
	BPC_Party                                          = 6,
	BPC_MAX                                            = 7
};*/

// Enum SFXGame.BioDefine.EDisableType
/*enum EDisableType
{
	DT_AI                                              = 0,
	DT_Power                                           = 1,
	DT_Offensive                                       = 2,
	DT_MAX                                             = 3
};*/

// Enum SFXGame.BioDefine.EActionComplete_None
/*enum EActionComplete_None
{
	ACN_Cancelled                                      = 0,
	ACN_Success                                        = 1,
	ACN_Disabled                                       = 2,
	ACN_MAX                                            = 3
};*/

// Enum SFXGame.BioDefine.EActionComplete_Movement
/*enum EActionComplete_Movement
{
	ACM_Cancelled                                      = 0,
	ACM_Success                                        = 1,
	ACM_Failed                                         = 2,
	ACM_Dead                                           = 3,
	ACM_LostCover                                      = 4,
	ACM_Disabled                                       = 5,
	ACM_CantSeeTarget                                  = 6,
	ACM_MAX                                            = 7
};*/

// Enum SFXGame.BioDefine.EActionComplete_Combat
/*enum EActionComplete_Combat
{
	ACC_Cancelled                                      = 0,
	ACC_Success                                        = 1,
	ACC_Failed                                         = 2,
	ACC_Dead                                           = 3,
	ACC_TargetKilled                                   = 4,
	ACC_TimeOut                                        = 5,
	ACC_LowTargeting                                   = 6,
	ACC_LostSight                                      = 7,
	ACC_Disabled                                       = 8,
	ACC_PowerCooldown                                  = 9,
	ACC_WeaponOverheat                                 = 10,
	ACC_WeaponCoolDown                                 = 11,
	ACC_MAX                                            = 12
};*/

// Enum SFXGame.BioDefine.EBioRadarType
/*enum EBioRadarType
{
	BRT_None                                           = 0,
	BRT_Pawn_Friendly                                  = 1,
	BRT_Pawn_Neutral                                   = 2,
	BRT_Pawn_Hostile                                   = 3,
	BRT_Vehicle                                        = 4,
	BRT_Store                                          = 5,
	BRT_Destination                                    = 6,
	BRT_Plot                                           = 7,
	BRT_Mineral                                        = 8,
	BRT_Anomaly                                        = 9,
	BRT_Point_Of_Interest                              = 10,
	BRT_Debris                                         = 11,
	BRT_Surveyed                                       = 12,
	BRT_Henchmen                                       = 13,
	BRT_Transition                                     = 14,
	BRT_TextNote                                       = 15,
	BRT_MAX                                            = 16
};*/

// Enum SFXGame.BioDefine.EBioSkillGameDifficulty
/*enum EBioSkillGameDifficulty
{
	SKILL_GAME_DIFFICULTY_EASY                         = 0,
	SKILL_GAME_DIFFICULTY_MEDIUM                       = 1,
	SKILL_GAME_DIFFICULTY_HARD                         = 2,
	SKILL_GAME_DIFFICULTY_MAX                          = 3
};*/

// Enum SFXGame.BioDefine.EBioSkillGame
/*enum EBioSkillGame
{
	SKILL_GAME_DECRYPTION                              = 0,
	SKILL_GAME_ELECTRONICS                             = 1,
	SKILL_GAME_CUSTOM                                  = 2,
	SKILL_GAME_MAX                                     = 3
};*/

// Enum SFXGame.Bio_Appr_Character.eModelVar
/*enum eModelVar
{
	BioMV_Variation1                                   = 0,
	BioMV_Variation2                                   = 1,
	BioMV_Variation3                                   = 2,
	BioMV_Variation4                                   = 3,
	BioMV_Variation5                                   = 4,
	BioMV_Variation6                                   = 5,
	BioMV_Variation7                                   = 6,
	BioMV_Variation8                                   = 7,
	BioMV_Variation9                                   = 8,
	BioMV_MAX                                          = 9
};*/

// Enum SFXGame.Bio_Appr_Character.eMaterialVar
/*enum eMaterialVar
{
	BioTV_Sophistication1                              = 0,
	BioTV_Sophistication2                              = 1,
	BioTV_Sophistication3                              = 2,
	BioTV_Sophistication4                              = 3,
	BioTV_Sophistication5                              = 4,
	BioTV_Sophistication6                              = 5,
	BioTV_Sophistication7                              = 6,
	BioTV_Sophistication8                              = 7,
	BioTV_Sophistication9                              = 8,
	BioTV_MAX                                          = 9
};*/

// Enum SFXGame.Bio_Appr_Character.eHeadVar
/*enum eHeadVar
{
	BioHV_Head1                                        = 0,
	BioHV_Head2                                        = 1,
	BioHV_Head3                                        = 2,
	BioHV_Head4                                        = 3,
	BioHV_Head5                                        = 4,
	BioHV_Head6                                        = 5,
	BioHV_Head7                                        = 6,
	BioHV_Head8                                        = 7,
	BioHV_Head9                                        = 8,
	BioHV_MAX                                          = 9
};*/

// Enum SFXGame.Bio_Appr_Character.eHairVar
/*enum eHairVar
{
	BioHTV_Hat1                                        = 0,
	BioHTV_Hat2                                        = 1,
	BioHTV_Hat3                                        = 2,
	BioHTV_Hat4                                        = 3,
	BioHTV_Hat5                                        = 4,
	BioHTV_Hat6                                        = 5,
	BioHTV_Hat7                                        = 6,
	BioHTV_Hat8                                        = 7,
	BioHTV_Hat9                                        = 8,
	BioHTV_MAX                                         = 9
};*/

// Enum SFXGame.Bio_Appr_Character.eModelType
/*enum eModelType
{
	BioMT_BodyAndHead                                  = 0,
	BioMT_Simple                                       = 1,
	BioMT_MAX                                          = 2
};*/

// Enum SFXGame.BioVisualEffect.EBioVFXState
/*enum EBioVFXState
{
	BVFX_SPAWN                                         = 0,
	BVFX_LIFE                                          = 1,
	BVFX_DEATH                                         = 2,
	BVFX_ENUM_SIZE                                     = 3,
	BVFX_MAX                                           = 4
};*/

// Enum SFXGame.BioBaseAppearancePlaceable.EBioStateEnumProxy
/*enum EBioStateEnumProxy
{
	StateEnum_None                                     = 0,
	StateEnum_MAX                                      = 1
};*/

// Enum SFXGame.BioActive.EInitalizeEventType
/*enum EInitalizeEventType
{
	EIET_None                                          = 0,
	EIET_Attacked                                      = 1,
	EIET_Cast                                          = 2,
	EIET_MAX                                           = 3
};*/

// Enum SFXGame.BioActivePower.EBioPowerState
/*enum EBioPowerState
{
	BIO_POWER_DONE                                     = 0,
	BIO_POWER_CASTING                                  = 1,
	BIO_POWER_RELEASE                                  = 2,
	BIO_POWER_FINISHING                                = 3,
	BIO_POWER_MAX                                      = 4
};*/

// Enum SFXGame.BioAiController.EPerceptionType
/*enum EPerceptionType
{
	PT_Sight                                           = 0,
	PT_Heard                                           = 1,
	PT_HurtBy                                          = 2,
	PT_NotifySight                                     = 3,
	PT_Force                                           = 4,
	PT_MAX                                             = 5
};*/

// Enum SFXGame.BioAiController.ELocationType
/*enum ELocationType
{
	LT_Known                                           = 0,
	LT_Interp                                          = 1,
	LT_Exact                                           = 2,
	LT_MAX                                             = 3
};*/

// Enum SFXGame.BioAiController.eWalkWaypointsTypes
/*enum eWalkWaypointsTypes
{
	WWT_Linear                                         = 0,
	WWT_Looping                                        = 1,
	WWT_OutAndBack                                     = 2,
	WWT_OutAndBackLooping                              = 3,
	WWT_Random                                         = 4,
	WWT_MAX                                            = 5
};*/

// Enum SFXGame.BioAnimNodeBlendBase.EBioAnimBlendDirection
/*enum EBioAnimBlendDirection
{
	eBioAnimBlend_NOBLEND                              = 0,
	eBioAnimBlend_BLENDUP                              = 1,
	eBioAnimBlend_BLENDDOWN                            = 2,
	eBioAnimBlend_BLENDDIRECT                          = 3,
	eBioAnimBlend_MAX                                  = 4
};*/

// Enum SFXGame.BioAnimNodeBlendAdditive.EBioAnimAdditive
/*enum EBioAnimAdditive
{
	eBioAnimAdd_Primary                                = 0,
	eBioAnimAdd_Additive                               = 1,
	eBioAnimAdd_BasePose                               = 2,
	eBioAnimAdd_MAX                                    = 3
};*/

// Enum SFXGame.BioAnimNodeBlendByAction.EBioActionAnimNode
/*enum EBioActionAnimNode
{
	ACTION_ANIM_NODE_POSTURE                           = 0,
	ACTION_ANIM_NODE_MOUNT                             = 1,
	ACTION_ANIM_NODE_HESITATE                          = 2,
	ACTION_ANIM_NODE_FALL                              = 3,
	ACTION_ANIM_NODE_BIOTIC                            = 4,
	ACTION_ANIM_NODE_DEATH                             = 5,
	ACTION_ANIM_NODE_DIE                               = 6,
	ACTION_ANIM_NODE_TECH                              = 7,
	ACTION_ANIM_NODE_MATINEE                           = 8,
	ACTION_ANIM_NODE_GETUP                             = 9,
	ACTION_ANIM_NODE_GESTURES                          = 10,
	ACTION_ANIM_NODE_MAX                               = 11
};*/

// Enum SFXGame.BioAnimNodeBlendByAim.EBioAnimNodeBlendByAim
/*enum EBioAnimNodeBlendByAim
{
	eBioAnimNodeBlendByAim_LevelFront                  = 0,
	eBioAnimNodeBlendByAim_LevelLeft                   = 1,
	eBioAnimNodeBlendByAim_LevelRight                  = 2,
	eBioAnimNodeBlendByAim_UpFront                     = 3,
	eBioAnimNodeBlendByAim_UpLeft                      = 4,
	eBioAnimNodeBlendByAim_UpRight                     = 5,
	eBioAnimNodeBlendByAim_DownFront                   = 6,
	eBioAnimNodeBlendByAim_DownLeft                    = 7,
	eBioAnimNodeBlendByAim_DownRight                   = 8,
	eBioAnimNodeBlendByAim_MAX                         = 9
};*/

// Enum SFXGame.BioAnimNodeBlendByDamage.EBioAnimDamage
/*enum EBioAnimDamage
{
	eBioAnimDamage_Front                               = 0,
	eBioAnimDamage_Rear                                = 1,
	eBioAnimDamage_Left                                = 2,
	eBioAnimDamage_Right                               = 3,
	eBioAnimDamage_MAX                                 = 4
};*/

// Enum SFXGame.BioAnimNodeBlendByDeath.EBioAnimDeath
/*enum EBioAnimDeath
{
	eBioAnimDeath_Head                                 = 0,
	eBioAnimDeath_Stomach                              = 1,
	eBioAnimDeath_ArmLeft                              = 2,
	eBioAnimDeath_ArmRight                             = 3,
	eBioAnimDeath_LegLeft                              = 4,
	eBioAnimDeath_LegRight                             = 5,
	eBioAnimDeath_MAX                                  = 6
};*/

// Enum SFXGame.BioAnimNodeBlendByFireSequence.EBioAnimNodeBlendByFireSequenceChild
/*enum EBioAnimNodeBlendByFireSequenceChild
{
	BIO_ANIM_NODE_BLEND_BY_FIRE_SEQUENCE_CHILD_IDLE    = 0,
	BIO_ANIM_NODE_BLEND_BY_FIRE_SEQUENCE_CHILD_START   = 1,
	BIO_ANIM_NODE_BLEND_BY_FIRE_SEQUENCE_CHILD_LOOP    = 2,
	BIO_ANIM_NODE_BLEND_BY_FIRE_SEQUENCE_CHILD         = 3,
	BIO_ANIM_NODE_BLEND_BY_FIRE_SEQUENCE_CHILD_END     = 4,
	BIO_ANIM_NODE_BLEND_BY_FIRE_SEQUENCE_MAX           = 5
};*/

// Enum SFXGame.BioAnimNodeBlendByIncline.EBioAnimIncline
/*enum EBioAnimIncline
{
	eBioAnimIncline_Up                                 = 0,
	eBioAnimIncline_Level                              = 1,
	eBioAnimIncline_Down                               = 2,
	eBioAnimIncline_MAX                                = 3
};*/

// Enum SFXGame.BioAnimNodeBlendByPower.EBioAnimNodePower
/*enum EBioAnimNodePower
{
	eBioAnimNodePower_Idle                             = 0,
	eBioAnimNodePower_Casting                          = 1,
	eBioAnimNodePower_Release                          = 2,
	eBioAnimNodePower_Using                            = 3,
	eBioAnimNodePower_MAX                              = 4
};*/

// Enum SFXGame.BioAnimNodeBlendByPower.EBioAnimNodePowerNotifyActive
/*enum EBioAnimNodePowerNotifyActive
{
	eBioAnimNodePowerNotifyActive_None                 = 0,
	eBioAnimNodePowerNotifyActive_Casting              = 1,
	eBioAnimNodePowerNotifyActive_Release              = 2,
	eBioAnimNodePowerNotifyActive_MAX                  = 3
};*/

// Enum SFXGame.BioAnimNodeBlendByReload.EBioReloadAnimNode
/*enum EBioReloadAnimNode
{
	RELOAD_ANIM_NODE_IDLE                              = 0,
	RELOAD_ANIM_NODE_RELOADING                         = 1,
	RELOAD_ANIM_NODE_MAX                               = 2
};*/

// Enum SFXGame.BioAnimNodeBlendByStorm.EBioAnimNodeBlendByStorm
/*enum EBioAnimNodeBlendByStorm
{
	eBioAnimNodeBlendByStorm_Idle                      = 0,
	eBioAnimNodeBlendByStorm_Storm                     = 1,
	eBioAnimNodeBlendByStorm_MAX                       = 2
};*/

// Enum SFXGame.BioAnimNodeBlendByWeaponAction.WeaponAnimState
/*enum WeaponAnimState
{
	WeaponState_Expanded                               = 0,
	WeaponState_Expanding                              = 1,
	WeaponState_Collapsing                             = 2,
	WeaponState_Collapsed                              = 3,
	WeaponState_MAX                                    = 4
};*/

// Enum SFXGame.BioAnimNodeBlendByWeaponEquip.EBioAnimNodeBlendByWeaponEquip
/*enum EBioAnimNodeBlendByWeaponEquip
{
	eBioAnimNodeBlendByWeaponEquip_Idle                = 0,
	eBioAnimNodeBlendByWeaponEquip_Draw                = 1,
	eBioAnimNodeBlendByWeaponEquip_Holster             = 2,
	eBioAnimNodeBlendByWeaponEquip_MAX                 = 3
};*/

// Enum SFXGame.BioAnimNodeBlendDirStart.EBioAnimStartDirection
/*enum EBioAnimStartDirection
{
	eBioAnimDirStart_ForwardRight                      = 0,
	eBioAnimDirStart_ForwardLeft                       = 1,
	eBioAnimDirStart_Right                             = 2,
	eBioAnimDirStart_Left                              = 3,
	eBioAnimDirStart_BackwardRight                     = 4,
	eBioAnimDirStart_BackwardLeft                      = 5,
	eBioAnimDirStart_MAX                               = 6
};*/

// Enum SFXGame.BioAnimNodeBlendFall.EBioAnimNodeFall
/*enum EBioAnimNodeFall
{
	eBioAnimNodeFall_Falling                           = 0,
	eBioAnimNodeFall_Landing                           = 1,
	eBioAnimNodeFall_MAX                               = 2
};*/

// Enum SFXGame.BioAnimNodeBlendMovement.EBioAnimNodeBlendMovement
/*enum EBioAnimNodeBlendMovement
{
	eBioAnimNodeBlendMovement_Idle                     = 0,
	eBioAnimNodeBlendMovement_Walk                     = 1,
	eBioAnimNodeBlendMovement_Run                      = 2,
	eBioAnimNodeBlendMovement_MAX                      = 3
};*/

// Enum SFXGame.BioAnimNodeBlendMoveStop.EBioAnimMoveStop
/*enum EBioAnimMoveStop
{
	eBioAnimMoveStop_StopRight                         = 0,
	eBioAnimMoveStop_StopLeft                          = 1,
	eBioAnimMoveStop_MAX                               = 2
};*/

// Enum SFXGame.BioAnimNodeBlendPerBone.EBoneBlendType
/*enum EBoneBlendType
{
	BLENDTYPE_ALWAYS                                   = 0,
	BLENDTYPE_ALWAYS_BONE_SWITCH                       = 1,
	BLENDTYPE_CROSSFADE_BONE_SWITCH                    = 2,
	BLENDTYPE_SWITCH                                   = 3,
	BLENDTYPE_TOGGLE                                   = 4,
	BLENDTYPE_WEIGHT                                   = 5,
	BLENDTYPE_MAX                                      = 6
};*/

// Enum SFXGame.BioAnimNodeBlendPerBone.EBoneBlendTestType
/*enum EBoneBlendTestType
{
	BLENDTESTTYPE_NONE                                 = 0,
	BLENDTESTTYPE_ANIM                                 = 1,
	BLENDTESTTYPE_BONE                                 = 2,
	BLENDTESTTYPE_MAX                                  = 3
};*/

// Enum SFXGame.BioAnimNodeBlendScalarMovementBehavior.EBioAnimNodeBlendScalarMovementBehavior
/*enum EBioAnimNodeBlendScalarMovementBehavior
{
	BScMv_None                                         = 0,
	BScMv_TurnAngle                                    = 1,
	BScMv_SpeedVelocity                                = 2,
	BScMv_SpeedTacticalVelocity                        = 3,
	BScMv_AxisDirection                                = 4,
	BScMv_MAX                                          = 5
};*/

// Enum SFXGame.BioAnimNodeBlendScalarMovementBehavior.EBioAnimNodeBlendScalarMoveSpeedStates
/*enum EBioAnimNodeBlendScalarMoveSpeedStates
{
	BScMvSS_Idle                                       = 0,
	BScMvSS_Walk                                       = 1,
	BScMvSS_Run                                        = 2,
	BScMvSS_Sprint                                     = 3,
	BScMvSS_MAX                                        = 4
};*/

// Enum SFXGame.BioAnimNodeBlendScalarMovementBehavior.EBioAnimNodeBlendScalarMoveAxis
/*enum EBioAnimNodeBlendScalarMoveAxis
{
	BScMvAxis_All                                      = 0,
	BScMvAxis_2D                                       = 1,
	BScMvAxis_X                                        = 2,
	BScMvAxis_Y                                        = 3,
	BScMvAxis_Z                                        = 4,
	BScMvAxis_MAX                                      = 5
};*/

// Enum SFXGame.BioAnimNodeBlendScalarMovementBehavior.EBioAnimNodeBlendScalarMoveAxisDir
/*enum EBioAnimNodeBlendScalarMoveAxisDir
{
	BScMvAxisDir_X                                     = 0,
	BScMvAxisDir_Y                                     = 1,
	BScMvAxisDir_Z                                     = 2,
	BScMvAxisDir_MAX                                   = 3
};*/

// Enum SFXGame.BioAnimNodeBlendScalarMovementBehavior.EBioAnimNodeBlendScalarMoveAxisDirMode
/*enum EBioAnimNodeBlendScalarMoveAxisDirMode
{
	BScMvAxisDirMode_WorldRotation                     = 0,
	BScMvAxisDirMode_WorldVelDir                       = 1,
	BScMvAxisDirMode_WorldAccelDir                     = 2,
	BScMvAxisDirMode_LocalVelDir                       = 3,
	BScMvAxisDirMode_LocalAccelDir                     = 4,
	BScMvAxisDirMode_MAX                               = 5
};*/

// Enum SFXGame.BioAnimNodeBlendSkidTurn.EBioAnimSkidTurn
/*enum EBioAnimSkidTurn
{
	eBioAnimSkidTurn_StartRight                        = 0,
	eBioAnimSkidTurn_StartLeft                         = 1,
	eBioAnimSkidTurn_TurnRightNear                     = 2,
	eBioAnimSkidTurn_TurnRightFar                      = 3,
	eBioAnimSkidTurn_TurnLeftNear                      = 4,
	eBioAnimSkidTurn_TurnLeftFar                       = 5,
	eBioAnimSkidTurn_MAX                               = 6
};*/

// Enum SFXGame.BioAnimNodeBlendSpeed.EBioAnim_SpeedType
/*enum EBioAnim_SpeedType
{
	eBioAnim_SpeedStandard                             = 0,
	eBioAnim_SpeedStarting                             = 1,
	eBioAnim_SpeedSnapshot                             = 2,
	eBioAnim_MAX                                       = 3
};*/

// Enum SFXGame.BioAnimNodeBlendState.EBioBlendStatePlayMode
/*enum EBioBlendStatePlayMode
{
	eBioBlendStatePlayMode_None                        = 0,
	eBioBlendStatePlayMode_OneShot                     = 1,
	eBioBlendStatePlayMode_Looping                     = 2,
	eBioBlendStatePlayMode_Query                       = 3,
	eBioBlendStatePlayMode_MAX                         = 4
};*/

// Enum SFXGame.BioAnimNodeBlendState.EBioBlendStatePlayAction
/*enum EBioBlendStatePlayAction
{
	eBioBlendStatePlayAction_NoAction                  = 0,
	eBioBlendStatePlayAction_Play                      = 1,
	eBioBlendStatePlayAction_Stop                      = 2,
	eBioBlendStatePlayAction_Reset                     = 3,
	eBioBlendStatePlayAction_PlayFromStart             = 4,
	eBioBlendStatePlayAction_PlayFromTime              = 5,
	eBioBlendStatePlayAction_MAX                       = 6
};*/

// Enum SFXGame.BioAnimNodeBlendStateActionBehavior.EBioAnimNodeBlendStateActionBehavior
/*enum EBioAnimNodeBlendStateActionBehavior
{
	BSAct_None                                         = 0,
	BSAct_PawnState                                    = 1,
	BSAct_PawnGesturesState                            = 2,
	BSAct_ActiveState                                  = 3,
	BSAct_Posture                                      = 4,
	BSAct_ArtPlaceable                                 = 5,
	BSAct_IdleState                                    = 6,
	BSAct_MAX                                          = 7
};*/

// Enum SFXGame.BioAnimNodeBlendStateActionBehavior.EBioPawnAnimActionStates
/*enum EBioPawnAnimActionStates
{
	PAAS_Posture                                       = 0,
	PAAS_Dying                                         = 1,
	PAAS_Death                                         = 2,
	PAAS_Matinee                                       = 3,
	PAAS_Recover                                       = 4,
	PAAS_Gestures                                      = 5,
	PAAS_MAX                                           = 6
};*/

// Enum SFXGame.BioAnimNodeBlendStateActionBehavior.EBioPawnAnimActiveStates
/*enum EBioPawnAnimActiveStates
{
	PAActiveS_Active                                   = 0,
	PAActiveS_ActiveToInactive                         = 1,
	PAActiveS_InactiveToActive                         = 2,
	PAActiveS_Inactive                                 = 3,
	PAActiveS_MAX                                      = 4
};*/

// Enum SFXGame.BioAnimNodeBlendStateActionBehavior.EBioArtPlaceableActionStates
/*enum EBioArtPlaceableActionStates
{
	APAS_Default                                       = 0,
	APAS_Matinee                                       = 1,
	APAS_MAX                                           = 2
};*/

// Enum SFXGame.BioAnimNodeBlendStateCombatBehavior.EBioAnimNodeBlendStateCombatBehavior
/*enum EBioAnimNodeBlendStateCombatBehavior
{
	BSCbt_None                                         = 0,
	BSCbt_CoverSwitch                                  = 1,
	BSCbt_CoverDirection                               = 2,
	BSCbt_CoverState                                   = 3,
	BSCbt_CoverBlocked                                 = 4,
	BSCbt_CombatSwitch                                 = 5,
	BSCbt_CoverPredictDirection                        = 6,
	BSCbt_CoverBlockType                               = 7,
	BSCbt_MAX                                          = 8
};*/

// Enum SFXGame.BioAnimNodeBlendStateMovementBehavior.EBioAnimNodeBlendStateMovementBehavior
/*enum EBioAnimNodeBlendStateMovementBehavior
{
	BSMove_None                                        = 0,
	BSMove_SpeedVelocity                               = 1,
	BSMove_SpeedTacticalVelocity                       = 2,
	BSMove_ScaleRate                                   = 3,
	BSMove_ScaleRateByWalkSpeed                        = 4,
	BSMove_ScaleRateByRunSpeed                         = 5,
	BSMove_ScaleRateBySprintSpeed                      = 6,
	BSMove_ScaleRateByTacticalWalkSpeed                = 7,
	BSMove_ScaleRateByTacticalRunSpeed                 = 8,
	BSMove_LookAtTurning                               = 9,
	BSMove_TurningDirection                            = 10,
	BSMove_AxisDirection                               = 11,
	BSMove_FlyingState                                 = 12,
	BSMove_StopSwitch                                  = 13,
	BSMove_StopOnFoot                                  = 14,
	BSMove_StartSwitch                                 = 15,
	BSMove_ScaleRateByWalkRunRatio                     = 16,
	BSMove_SkidTurnSwitch                              = 17,
	BSMove_MAX                                         = 18
};*/

// Enum SFXGame.BioAnimNodeBlendStateMovementBehavior.EBioMovementSpeedStates
/*enum EBioMovementSpeedStates
{
	MSS_Idle                                           = 0,
	MSS_Walk                                           = 1,
	MSS_Run                                            = 2,
	MSS_Sprint                                         = 3,
	MSS_MAX                                            = 4
};*/

// Enum SFXGame.BioAnimNodeBlendStateMovementBehavior.EBioAnimNodeBlendStateMoveAxisDir
/*enum EBioAnimNodeBlendStateMoveAxisDir
{
	BSMoveAxisDir_X                                    = 0,
	BSMoveAxisDir_Y                                    = 1,
	BSMoveAxisDir_Z                                    = 2,
	BSMoveAxisDir_MAX                                  = 3
};*/

// Enum SFXGame.BioAnimNodeBlendStateMovementBehavior.EBioAnimNodeBlendStateMoveAxisDirMode
/*enum EBioAnimNodeBlendStateMoveAxisDirMode
{
	BSMoveAxisDirMode_WorldRotation                    = 0,
	BSMoveAxisDirMode_WorldVelDir                      = 1,
	BSMoveAxisDirMode_WorldAccelDir                    = 2,
	BSMoveAxisDirMode_LocalVelDir                      = 3,
	BSMoveAxisDirMode_LocalAccelDir                    = 4,
	BSMoveAxisDirMode_MAX                              = 5
};*/

// Enum SFXGame.BioAnimNodeBlendStrafe.EBioAnimNodeBlendStrafe
/*enum EBioAnimNodeBlendStrafe
{
	eBioAnimNodeBlendStrafe_Forward                    = 0,
	eBioAnimNodeBlendStrafe_Backward                   = 1,
	eBioAnimNodeBlendStrafe_Left                       = 2,
	eBioAnimNodeBlendStrafe_Right                      = 3,
	eBioAnimNodeBlendStrafe_MAX                        = 4
};*/

// Enum SFXGame.BioAnimNodeBlendTurn.EBioAnimNodeBlendTurn
/*enum EBioAnimNodeBlendTurn
{
	eBioAnimNodeBlendTurn_Idle                         = 0,
	eBioAnimNodeBlendTurn_TurnLeft                     = 1,
	eBioAnimNodeBlendTurn_TurnRight                    = 2,
	eBioAnimNodeBlendTurn_MAX                          = 3
};*/

// Enum SFXGame.BioAnimNodeCombatMode.EBioAnimNodeCombatModeChild
/*enum EBioAnimNodeCombatModeChild
{
	BIO_ANIM_NODE_COMBAT_MODE_CHILD_NONCOMBAT          = 0,
	BIO_ANIM_NODE_COMBAT_MODE_CHILD_COMBAT             = 1,
	BIO_ANIM_NODE_COMBAT_MODE_CHILD_ENTERCOMBAT        = 2,
	BIO_ANIM_NODE_COMBAT_MODE_CHILD_EXITCOMBAT         = 3,
	BIO_ANIM_NODE_COMBAT_MODE_CHILD_MAX                = 4
};*/

// Enum SFXGame.BioAnimNodeCombatMode.EBioAnimNodeCombatModeState
/*enum EBioAnimNodeCombatModeState
{
	BIO_ANIM_NODE_COMBAT_MODE_STATE_NONCOMBAT          = 0,
	BIO_ANIM_NODE_COMBAT_MODE_STATE_COMBAT             = 1,
	BIO_ANIM_NODE_COMBAT_MODE_STATE_ANIMATING_TO_COMBAT = 2,
	BIO_ANIM_NODE_COMBAT_MODE_STATE_ANIMATING_TO_NONCOMBAT = 3,
	BIO_ANIM_NODE_COMBAT_MODE_STATE_BLENDING_TO_COMBAT = 4,
	BIO_ANIM_NODE_COMBAT_MODE_STATE_BLENDING_TO_NONCOMBAT = 5,
	BIO_ANIM_NODE_COMBAT_MODE_STATE_MAX                = 6
};*/

// Enum SFXGame.BioAnimNodeCover2Actions.EBioAnimNodeCover2Actions
/*enum EBioAnimNodeCover2Actions
{
	eBioAnimNodeCover2Actions_Default                  = 0,
	eBioAnimNodeCover2Actions_Lean                     = 1,
	eBioAnimNodeCover2Actions_PopUp                    = 2,
	eBioAnimNodeCover2Actions_PeekSide                 = 3,
	eBioAnimNodeCover2Actions_PeekUp                   = 4,
	eBioAnimNodeCover2Actions_MAX                      = 5
};*/

// Enum SFXGame.BioAnimNodeCover2ChangeDirection.EBioAnimNodeCover2ChangeDirection
/*enum EBioAnimNodeCover2ChangeDirection
{
	eBioAnimNodeCover2ChangeDirection_Idle             = 0,
	eBioAnimNodeCover2ChangeDirection_TransitionToMirror = 1,
	eBioAnimNodeCover2ChangeDirection_TransitionToDefault = 2,
	eBioAnimNodeCover2ChangeDirection_MAX              = 3
};*/

// Enum SFXGame.BioAnimNodeCover2Move.EBioAnimNodeCover2Move
/*enum EBioAnimNodeCover2Move
{
	eBioAnimNodeCover2Move_Idle                        = 0,
	eBioAnimNodeCover2Move_Move                        = 1,
	eBioAnimNodeCover2Move_MAX                         = 2
};*/

// Enum SFXGame.BioAnimNodeCover2Neutral.EBioAnimNodeCover2Neutral
/*enum EBioAnimNodeCover2Neutral
{
	eBioAnimNodeCover2Neutral_Idle                     = 0,
	eBioAnimNodeCover2Neutral_Active                   = 1,
	eBioAnimNodeCover2Neutral_MAX                      = 2
};*/

// Enum SFXGame.BioAnimNodeCover2Transition.EBioAnimNodeCover2Transition
/*enum EBioAnimNodeCover2Transition
{
	eBioAnimNodeCover2Transition_Intro                 = 0,
	eBioAnimNodeCover2Transition_Body                  = 1,
	eBioAnimNodeCover2Transition_Outro                 = 2,
	eBioAnimNodeCover2Transition_MAX                   = 3
};*/

// Enum SFXGame.BioAnimNodeLocomotion.EBioAnimNodeLocomotion
/*enum EBioAnimNodeLocomotion
{
	eBioAnimNodeLocomotion_Idle                        = 0,
	eBioAnimNodeLocomotion_MoveStart                   = 1,
	eBioAnimNodeLocomotion_Moving                      = 2,
	eBioAnimNodeLocomotion_MoveStop                    = 3,
	eBioAnimNodeLocomotion_SkidTurn                    = 4,
	eBioAnimNodeLocomotion_PoseHolder                  = 5,
	eBioAnimNodeLocomotion_MAX                         = 6
};*/

// Enum SFXGame.BioAnimNodeLocomotionMoving.EBioAnimNodeLocomotionMoving
/*enum EBioAnimNodeLocomotionMoving
{
	eBioAnimNodeLocomotionMoving_Fwd                   = 0,
	eBioAnimNodeLocomotionMoving_LeanLeft              = 1,
	eBioAnimNodeLocomotionMoving_LeanRight             = 2,
	eBioAnimNodeLocomotionMoving_Ascend                = 3,
	eBioAnimNodeLocomotionMoving_Descend               = 4,
	eBioAnimNodeLocomotionMoving_MAX                   = 5
};*/

// Enum SFXGame.BioAnimNodeLocomotionSpeed.EBioAnimNodeLocomotionSpeed
/*enum EBioAnimNodeLocomotionSpeed
{
	eBioAnimNodeLocomotionSpeed_Idle                   = 0,
	eBioAnimNodeLocomotionSpeed_Walk                   = 1,
	eBioAnimNodeLocomotionSpeed_Run                    = 2,
	eBioAnimNodeLocomotionSpeed_MAX                    = 3
};*/

// Enum SFXGame.BioAnimNodeLocomotionStart.EBioAnimNodeLocomotionStart
/*enum EBioAnimNodeLocomotionStart
{
	eBioAnimNodeLocomotionStart_ForwardRight           = 0,
	eBioAnimNodeLocomotionStart_ForwardLeft            = 1,
	eBioAnimNodeLocomotionStart_Right                  = 2,
	eBioAnimNodeLocomotionStart_Left                   = 3,
	eBioAnimNodeLocomotionStart_BackwardRight          = 4,
	eBioAnimNodeLocomotionStart_BackwardLeft           = 5,
	eBioAnimNodeLocomotionStart_MAX                    = 6
};*/

// Enum SFXGame.BioAnimNodeLocomotionStop.EBioAnimNodeLocomotionStop
/*enum EBioAnimNodeLocomotionStop
{
	eBioAnimNodeLocomotionStop_LeftFoot                = 0,
	eBioAnimNodeLocomotionStop_RightFoot               = 1,
	eBioAnimNodeLocomotionStop_MAX                     = 2
};*/

// Enum SFXGame.BioAppearanceItemWeapon.EBioAppearanceItemWeaponVFXDamageEnum
/*enum EBioAppearanceItemWeaponVFXDamageEnum
{
	BIO_APPEARANCE_ITEM_WEAPON_VFX_DAMAGE_ENUM_PLACEHOLDER = 0,
	BIO_APPEARANCE_ITEM_WEAPON_VFX_DAMAGE_ENUM_MAX     = 1
};*/

// Enum SFXGame.BioArtPlaceableType.eMateralVariation
/*enum eMateralVariation
{
	APMV                                               = 0,
	APMV01                                             = 1,
	APMV02                                             = 2,
	APMV03                                             = 3,
	APMV04                                             = 4,
	APMV05                                             = 5,
	APMV06                                             = 6,
	APMV07                                             = 7,
	APMV08                                             = 8,
	APMV_MAX                                           = 9
};*/

// Enum SFXGame.BioArtPlaceableType.eBioAPLUseCase
/*enum eBioAPLUseCase
{
	APL_USE_TOGGLE                                     = 0,
	APL_USE_STATE0                                     = 1,
	APL_USE_STATE1                                     = 2,
	APL_USE_ELECTRONICS                                = 3,
	APL_USE_DECRYPT                                    = 4,
	APL_USE_PROXIMITY                                  = 5,
	APL_USE_PROXIMITY_ENTER                            = 6,
	APL_USE_PROXIMITY_EXIT                             = 7,
	APL_USE_MAX                                        = 8
};*/

// Enum SFXGame.BioArtPlaceableType.eArtPlaceableRole
/*enum eArtPlaceableRole
{
	APR_NONE                                           = 0,
	APR_MAX                                            = 1
};*/

// Enum SFXGame.BioArtPlaceableType.eArtPlaceableStates
/*enum eArtPlaceableStates
{
	APL_FSM_STATE_NONE                                 = 0,
	APL_FSM_STATE_MAX                                  = 1
};*/

// Enum SFXGame.BioFSMComponent.eBioPendingStateChange
/*enum eBioPendingStateChange
{
	BIO_PST_Done                                       = 0,
	BIO_PST_Pending                                    = 1,
	BIO_PST_Started                                    = 2,
	BIO_PST_MAX                                        = 3
};*/

// Enum SFXGame.BioAttributesPawn.EBioAttributePawnRace
/*enum EBioAttributePawnRace
{
	BIO_ATTRIBUTE_PAWN_RACE_HUMAN                      = 0,
	BIO_ATTRIBUTE_PAWN_RACE_ASARI                      = 1,
	BIO_ATTRIBUTE_PAWN_RACE_TURIAN                     = 2,
	BIO_ATTRIBUTE_PAWN_RACE_SALARIAN                   = 3,
	BIO_ATTRIBUTE_PAWN_RACE_QUARIAN                    = 4,
	BIO_ATTRIBUTE_PAWN_RACE_OTHER                      = 5,
	BIO_ATTRIBUTE_PAWN_RACE_KROGAN                     = 6,
	BIO_ATTRIBUTE_PAWN_RACE_GETH                       = 7,
	BIO_ATTRIBUTE_PAWN_RACE_OTHER_ARTIFICIAL           = 8,
	BIO_ATTRIBUTE_PAWN_RACE_MAX                        = 9
};*/

// Enum SFXGame.BioBaseSquad.ePawnValidType
/*enum ePawnValidType
{
	PVT_Invalid                                        = 0,
	PVT_ValidPawn                                      = 1,
	PVT_MAX                                            = 2
};*/

// Enum SFXGame.BioBaseSquad.eATTACK_TYPE
/*enum eATTACK_TYPE
{
	AI_ATTACK_TYPE_NONE                                = 0,
	AI_ATTACK_TYPE_SNIPER                              = 1,
	AI_ATTACK_TYPE_ACCURATE                            = 2,
	AI_ATTACK_TYPE_INACCURATE                          = 3,
	AI_ATTACK_TYPE_SUPPRESSING                         = 4,
	AI_ATTACK_TYPE_POWER                               = 5,
	AI_ATTACK_TYPE_MELEE                               = 6,
	AI_ATTACK_TYPE_MAX                                 = 7
};*/

// Enum SFXGame.BioBaseSquad.ESwitchToWeapon
/*enum ESwitchToWeapon
{
	STW_Pistol                                         = 0,
	STW_ShotGun                                        = 1,
	STW_AssaultRifle                                   = 2,
	STW_SniperRifle                                    = 3,
	STW_None                                           = 4,
	STW_MAX                                            = 5
};*/

// Enum SFXGame.BioBaseSquad.ESquadIcons
/*enum ESquadIcons
{
	BIO_SQUADICON_INVALID                              = 0,
	BIO_SQUADICON_HOLD                                 = 1,
	BIO_SQUADICON_MOVETO                               = 2,
	BIO_SQUADICON_FOLLOW                               = 3,
	BIO_SQUADICON_DEAD                                 = 4,
	BIO_SQUADICON_INCOVER                              = 5,
	BIO_SQUADICON_MAX                                  = 6
};*/

// Enum SFXGame.BioBaseSquad.EBioCapMode
/*enum EBioCapMode
{
	BIO_CAPMODE_WEAPON                                 = 0,
	BIO_CAPMODE_BIOTICS                                = 1,
	BIO_CAPMODE_TECH                                   = 2,
	BIO_CAPMODE_COMBAT                                 = 3,
	BIO_CAPMODE_GRENADES                               = 4,
	BIO_CAPMODE_ERROR                                  = 5,
	BIO_CAPMODE_MAX                                    = 6
};*/

// Enum SFXGame.BioBaseSquad.EBioTacticalAction
/*enum EBioTacticalAction
{
	BIO_TACACT_NONE                                    = 0,
	BIO_TACACT_SHOOT                                   = 1,
	BIO_TACACT_GRENADE                                 = 2,
	BIO_TACACT_POWER                                   = 3,
	BIO_TACACT_EQUIP                                   = 4,
	BIO_TACACT_MAX                                     = 5
};*/

// Enum SFXGame.BioCameraDebugger.EBioCameraDebuggerFlag
/*enum EBioCameraDebuggerFlag
{
	BIO_CAMERA_DEBUGGER_FLAG_ACTIVE                    = 0,
	BIO_CAMERA_DEBUGGER_FLAG_COLLISION_LOCK            = 1,
	BIO_CAMERA_DEBUGGER_FLAG_DRAW_HOOK                 = 2,
	BIO_CAMERA_DEBUGGER_FLAG_MAX                       = 3
};*/

// Enum SFXGame.SFXCameraModifier_ScreenShake.EShakeParam
/*enum EShakeParam
{
	ESP_OffsetRandom                                   = 0,
	ESP_OffsetZero                                     = 1,
	ESP_MAX                                            = 2
};*/

// Enum SFXGame.BioCameraBehaviorGalaxy.EBioGalaxyMap_PlanetType
/*enum EBioGalaxyMap_PlanetType
{
	eBioGM_PlanetType_None                             = 0,
	eBioGM_PlanetType_Planet                           = 1,
	eBioGM_PlanetType_Anomaly                          = 2,
	eBioGM_PlanetType_PlanetAndAnomaly                 = 3,
	eBioGM_PlanetType_Citadel                          = 4,
	eBioGM_PlanetType_Prefab                           = 5,
	eBioGM_PlanetType_PlanetAndRing                    = 6,
	eBioGM_PlanetType_2DImage                          = 7,
	eBioGM_PlanetType_MAX                              = 8
};*/

// Enum SFXGame.BioCameraBehaviorGalaxy.EBioGalaxyMapState
/*enum EBioGalaxyMapState
{
	GalaxyMapState_None                                = 0,
	GalaxyMapState_Galaxy                              = 1,
	GalaxyMapState_Cluster                             = 2,
	GalaxyMapState_System                              = 3,
	GalaxyMapState_Planet                              = 4,
	GalaxyMapState_PlanetScan                          = 5,
	GalaxyMapState_MAX                                 = 6
};*/

// Enum SFXGame.BioCameraShake.EBioCameraShakeType
/*enum EBioCameraShakeType
{
	BIO_CAMERA_SHAKE_TYPE_PLACEHOLDER                  = 0,
	BIO_CAMERA_SHAKE_TYPE_MAX                          = 1
};*/

// Enum SFXGame.BioCameraShake.EBioCameraShakeVariant
/*enum EBioCameraShakeVariant
{
	BIO_CAMERA_SHAKE_VARIANT_PLACEHOLDER               = 0,
	BIO_CAMERA_SHAKE_VARIANT_MAX                       = 1
};*/

// Enum SFXGame.BioCheatManager.EProfileType
/*enum EProfileType
{
	Profile_None                                       = 0,
	Profile_AI                                         = 1,
	Profile_Camera                                     = 2,
	Profile_Combat                                     = 3,
	Profile_SysDesign                                  = 4,
	Profile_CombatStats                                = 5,
	Profile_Difficulty                                 = 6,
	Profile_Angst                                      = 7,
	Profile_Cooldown                                   = 8,
	Profile_Damage                                     = 9,
	Profile_Pawn                                       = 10,
	Profile_Power                                      = 11,
	Profile_Tech                                       = 12,
	Profile_Treasure                                   = 13,
	Profile_Locomotion                                 = 14,
	Profile_AnimTree                                   = 15,
	Profile_Ticket                                     = 16,
	Profile_Vehicle                                    = 17,
	Profile_Henchmen                                   = 18,
	Profile_Settings                                   = 19,
	Profile_Effects                                    = 20,
	Profile_Scaleform                                  = 21,
	Profile_ME1Import                                  = 22,
	Profile_Trilogy                                    = 23,
	Profile_Anim                                       = 24,
	Profile_Cover                                      = 25,
	Profile_Door                                       = 26,
	Profile_Conversation                               = 27,
	Profile_ConversationBug                            = 28,
	Profile_Gestures                                   = 29,
	Profile_DesignBudgetGeneral                        = 30,
	Profile_Bonuses                                    = 31,
	Profile_Multipliers                                = 32,
	Profile_LookAt                                     = 33,
	Profile_MAX                                        = 34
};*/

// Enum SFXGame.SFXProfileSettings.EProfileSetting
/*enum EProfileSetting
{
	Setting_Unknown                                    = 0,
	Setting_ControllerVibration                        = 1,
	Setting_YInversion                                 = 2,
	Setting_GamerCred                                  = 3,
	Setting_GamerRep                                   = 4,
	Setting_VoiceMuted                                 = 5,
	Setting_VoiceThruSpeakers                          = 6,
	Setting_VoiceVolume                                = 7,
	Setting_GamerPictureKey                            = 8,
	Setting_GamerMotto                                 = 9,
	Setting_GamerTitlesPlayed                          = 10,
	Setting_GamerAchievementsEarned                    = 11,
	Setting_GameDifficulty                             = 12,
	Setting_ControllerSensitivity                      = 13,
	Setting_PreferredColor1                            = 14,
	Setting_PreferredColor2                            = 15,
	Setting_AutoAim                                    = 16,
	Setting_AutoCenter                                 = 17,
	Setting_MovementControl                            = 18,
	Setting_RaceTransmission                           = 19,
	Setting_RaceCameraLocation                         = 20,
	Setting_RaceBrakeControl                           = 21,
	Setting_RaceAcceleratorControl                     = 22,
	Setting_GameCredEarned                             = 23,
	Setting_GameAchievementsEarned                     = 24,
	Setting_EndLiveIds                                 = 25,
	Setting_ProfileVersionNum                          = 26,
	Setting_ProfileSaveCount                           = 27,
	Setting_StickConfiguration                         = 28,
	Setting_TriggerConfiguration                       = 29,
	Setting_Subtitles                                  = 30,
	Setting_AimAssist                                  = 31,
	Setting_Difficulty                                 = 32,
	Setting_AutoLevel                                  = 33,
	Setting_SquadPowers                                = 34,
	Setting_AutoSave                                   = 35,
	Setting_MusicVolume                                = 36,
	Setting_FXVolume                                   = 37,
	Setting_DialogVolume                               = 38,
	Setting_MotionBlur                                 = 39,
	Setting_FilmGrain                                  = 40,
	Setting_SelectedDeviceID                           = 41,
	Setting_CurrentCareer                              = 42,
	Setting_DaysSinceRegistration                      = 43,
	Setting_AutoLogin                                  = 44,
	Setting_LoginInfo                                  = 45,
	Setting_PersonaID                                  = 46,
	Setting_NucleusRefused                             = 47,
	Setting_NucleusSuccessful                          = 48,
	Setting_CerberusRefused                            = 49,
	Setting_Achievement_FieldA                         = 50,
	Setting_Achievement_FieldB                         = 51,
	Setting_Achievement_FieldC                         = 52,
	Setting_TelemetryCollectionEnabled                 = 53,
	Setting_KeyBindings                                = 54,
	Setting_DisplayGamma                               = 55,
	Setting_CurrentSaveGame                            = 56,
	Setting_VerticalSync                               = 57,
	Setting_AntiAliasing                               = 58,
	Setting_NumHeadshots                               = 59,
	Setting_NumPowerCombos                             = 60,
	Setting_NumScreams                                 = 61,
	Setting_NumShieldsDisrupted                        = 62,
	Setting_NumBarriersWarped                          = 63,
	Setting_NumArmourIncinerated                       = 64,
	Setting_NumN7MissionsCompleted                     = 65,
	Setting_NumCodex                                   = 66,
	Setting_ShowHints                                  = 67,
	Setting_NumTrainingVidsWatched                     = 68,
	Setting_WatchedVid1                                = 69,
	Setting_WatchedVid2                                = 70,
	Setting_WatchedVid3                                = 71,
	Setting_MorinthNotSamara                           = 72,
	Setting_MaxWeaponUpgradeCount                      = 73,
	Setting_LastFinishedCareer                         = 74,
	Setting_SwapTriggersShoulders                      = 75,
	Setting_PS3_RedeemedProductCode                    = 76,
	Setting_HDREnabled                                 = 77,
	Setting_HDRBrightness                              = 78,
	Setting_HDRContrast                                = 79,
	Setting_DynamicResolution                          = 80,
	Setting_AmbientOcclusion                           = 81,
	Setting_MAX                                        = 82
};*/

// Enum SFXGame.SFXProfileSettings.EAutoLevelOptions
/*enum EAutoLevelOptions
{
	ALO_Off                                            = 0,
	ALO_Squad                                          = 1,
	ALO_All                                            = 2,
	ALO_MAX                                            = 3
};*/

// Enum SFXGame.SFXProfileSettings.EDifficultyOptions
/*enum EDifficultyOptions
{
	DO_Level1                                          = 0,
	DO_Level2                                          = 1,
	DO_Level3                                          = 2,
	DO_Level4                                          = 3,
	DO_Level5                                          = 4,
	DO_Level6                                          = 5,
	DO_MAX                                             = 6
};*/

// Enum SFXGame.SFXProfileSettings.EAimAssistOptions
/*enum EAimAssistOptions
{
	AAO_Low                                            = 0,
	AAO_Normal                                         = 1,
	AAO_High                                           = 2,
	AAO_MAX                                            = 3
};*/

// Enum SFXGame.SFXProfileSettings.ETriggerConfigOptions
/*enum ETriggerConfigOptions
{
	TCO_Default                                        = 0,
	TCO_SouthPaw                                       = 1,
	TCO_DefaultSwapped                                 = 2,
	TCO_SouthPawSwapped                                = 3,
	TCO_MAX                                            = 4
};*/

// Enum SFXGame.SFXProfileSettings.EStickConfigOptions
/*enum EStickConfigOptions
{
	SCO_Default                                        = 0,
	SCO_SouthPaw                                       = 1,
	SCO_MAX                                            = 2
};*/

// Enum SFXGame.SFXProfileSettings.EAchievementID
/*enum EAchievementID
{
	ACHIEVEMENT_00_COMPLETE                            = 0,
	ACHIEVEMENT_01_PRONOR_COMPLETE                     = 1,
	ACHIEVEMENT_02_PROCER_COMPLETE                     = 2,
	ACHIEVEMENT_03_CR1                                 = 3,
	ACHIEVEMENT_04_CR2                                 = 4,
	ACHIEVEMENT_05_ENDGAME                             = 5,
	ACHIEVEMENT_06_COMPLETESURVIVE                     = 6,
	ACHIEVEMENT_07_COMPLETEFOLLOWER                    = 7,
	ACHIEVEMENT_08_LEGIONACQ                           = 8,
	ACHIEVEMENT_09_GARRUSACQ                           = 9,
	ACHIEVEMENT_10_THANEACQ                            = 10,
	ACHIEVEMENT_11_JACKACQ                             = 11,
	ACHIEVEMENT_12_SAMARRAACQ                          = 12,
	ACHIEVEMENT_13_GRUNTACQ                            = 13,
	ACHIEVEMENT_14_MORDINACQ                           = 14,
	ACHIEVEMENT_15_TALIACQ                             = 15,
	ACHIEVEMENT_16_LEGIONLOYALTY                       = 16,
	ACHIEVEMENT_17_GRUNTLOYALTY                        = 17,
	ACHIEVEMENT_18_THANELOYALTY                        = 18,
	ACHIEVEMENT_19_JACKLOYALTY                         = 19,
	ACHIEVEMENT_20_SAMARRALOYALTY                      = 20,
	ACHIEVEMENT_21_GARRUSLOYALTY                       = 21,
	ACHIEVEMENT_22_JACOBLOYALTY                        = 22,
	ACHIEVEMENT_23_MORDINLOYALTY                       = 23,
	ACHIEVEMENT_24_MIRANDALOYALTY                      = 24,
	ACHIEVEMENT_25_TALILOYALTY                         = 25,
	ACHIEVEMENT_26_THRESHERMAW                         = 26,
	ACHIEVEMENT_27_HEADSHOT                            = 27,
	ACHIEVEMENT_28_BURNARMOUR                          = 28,
	ACHIEVEMENT_29_SCREAM                              = 29,
	ACHIEVEMENT_30_DISRUPTSHIELDS                      = 30,
	ACHIEVEMENT_31_POWERCOMBO                          = 31,
	ACHIEVEMENT_32_BREAKBARRIERS                       = 32,
	ACHIEVEMENT_33_MULTIN7MISSION                      = 33,
	ACHIEVEMENT_34_EXPLORATION                         = 34,
	ACHIEVEMENT_35_N7MISSION                           = 35,
	ACHIEVEMENT_36_RESEARCH                            = 36,
	ACHIEVEMENT_37_WEAPONUPGRADE                       = 37,
	ACHIEVEMENT_38_CODEX                               = 38,
	ACHIEVEMENT_39_EVOLVEDPOWER                        = 39,
	ACHIEVEMENT_40_DLC1_ZAEEDLOYALTY                   = 40,
	ACHIEVEMENT_41_DLC2_KASUMILOYALTY                  = 41,
	ACHIEVEMENT_42_DLC4_UNC1COMPLETE                   = 42,
	ACHIEVEMENT_43_DLC7_BROKERDEFEAT                   = 43,
	ACHIEVEMENT_44_TRILOGY_INSANITYI                   = 44,
	ACHIEVEMENT_45_TRILOGY_INSANITYII                  = 45,
	ACHIEVEMENT_46_TRILOGY_INSANITYIII                 = 46,
	ACHIEVEMENT_47_TRILOGY_PARAMOURI                   = 47,
	ACHIEVEMENT_48_TRILOGY_PARAMOURII                  = 48,
	ACHIEVEMENT_49_TRILOGY_PARAMOURIII                 = 49,
	ACHIEVEMENT_50_TRILOGY_LONGSERVICE                 = 50,
	ACHIEVEMENT_51_TRILOGY_RECRUIT                     = 51,
	ACHIEVEMENT_52_TRILOGY_SOLDIER                     = 52,
	ACHIEVEMENT_53_TRILOGY_VETERAN                     = 53,
	ACHIEVEMENT_54_TRILOGY_BRUISER                     = 54,
	ACHIEVEMENT_MAX                                    = 55
};*/

// Enum SFXGame.SFXProfileSettings.ETVType
/*enum ETVType
{
	TVT_Default                                        = 0,
	TVT_Soft                                           = 1,
	TVT_Lucent                                         = 2,
	TVT_Vibrant                                        = 3,
	TVT_MAX                                            = 4
};*/

// Enum SFXGame.SFXProfileSettings.EOptionYesNo
/*enum EOptionYesNo
{
	OYN_Yes                                            = 0,
	OYN_No                                             = 1,
	OYN_MAX                                            = 2
};*/

// Enum SFXGame.SFXProfileSettings.EOptionOnOff
/*enum EOptionOnOff
{
	OOO_On                                             = 0,
	OOO_Off                                            = 1,
	OOO_MAX                                            = 2
};*/

// Enum SFXGame.SFXProfileSettings.EMappedSettingTypes
/*enum EMappedSettingTypes
{
	MST_Gamma                                          = 0,
	MST_HDRContrast                                    = 1,
	MST_HDRBrightness                                  = 2,
	MST_MAX                                            = 3
};*/

// Enum SFXGame.SFXProfileSettings.ETelemetryExtendedSettings
/*enum ETelemetryExtendedSettings
{
	Telem_Setting_MouseDampening                       = 0,
	Telem_Setting_MouseSensitivity                     = 1,
	Telem_Setting_CameraSensitivity                    = 2,
	Telem_Setting_Resolution                           = 3,
	Telem_Setting_WindowedMode                         = 4,
	Telem_Setting_EnableHighQualityBloom               = 5,
	Telem_Setting_EnableDynamicShadows                 = 6,
	Telem_Setting_LightEnvironmentShadows              = 7,
	Telem_Setting_VSync                                = 8,
	Telem_Setting_MAX                                  = 9
};*/

// Enum SFXGame.BioSFHandler_MessageBox.SFXHintPosition
/*enum SFXHintPosition
{
	SFXHINTPOS_Top                                     = 0,
	SFXHINTPOS_Middle                                  = 1,
	SFXHINTPOS_Bottom                                  = 2,
	SFXHINTPOS_MAX                                     = 3
};*/

// Enum SFXGame.BioSFHandler_MessageBox.BioMessageBoxIconSets
/*enum BioMessageBoxIconSets
{
	ICONSET_None                                       = 0,
	ICONSET_Manufacturer                               = 1,
	ICONSET_Combat                                     = 2,
	ICONSET_Plot                                       = 3,
	ICONSET_ItemProperties                             = 4,
	ICONSET_MAX                                        = 5
};*/

// Enum SFXGame.BioSFHandler_MessageBox.SFX_MB_TextAlign
/*enum SFX_MB_TextAlign
{
	SFX_MB_Centered                                    = 0,
	SFX_MB_Left                                        = 1,
	SFX_MB_Right                                       = 2,
	SFX_MB_MAX                                         = 3
};*/

// Enum SFXGame.BioSFHandler_MessageBox.SFX_MB_Skin
/*enum SFX_MB_Skin
{
	SFX_MB_Skin_User                                   = 0,
	SFX_MB_Skin_Shepard                                = 1,
	SFX_MB_Skin_MAX                                    = 2
};*/

// Enum SFXGame.BioSFHandler_MessageBox.SFXGenericHintIcon
/*enum SFXGenericHintIcon
{
	HINTICON_None                                      = 0,
	HINTICON_MAX                                       = 1
};*/

// Enum SFXGame.BioSFHandler_MessageBox.SFXPCHintIcon
/*enum SFXPCHintIcon
{
	PCICON_None                                        = 0,
	PCICON_MAX                                         = 1
};*/

// Enum SFXGame.BioSFHandler_MessageBox.SFXPS3HintIcon
/*enum SFXPS3HintIcon
{
	PS3ICON_None                                       = 0,
	PS3ICON_MAX                                        = 1
};*/

// Enum SFXGame.BioSFHandler_MessageBox.SFXXBoxHintIcon
/*enum SFXXBoxHintIcon
{
	XBICON_None                                        = 0,
	XBICON_XBOX_A                                      = 1,
	XBICON_XBOX_B                                      = 2,
	XBICON_XBOX_Y                                      = 3,
	XBICON_XBOX_X                                      = 4,
	XBICON_XBOX_Right_Thumb                            = 5,
	XBICON_XBOX_Right_Thumb_Pressed                    = 6,
	XBICON_XBOX_Right_Thumb_Released                   = 7,
	XBICON_XBOX_Left_Thumb                             = 8,
	XBICON_XBOX_Left_Thumb_Pressed                     = 9,
	XBICON_XBOX_Left_Thumb_Released                    = 10,
	XBICON_XBOX_Right_Thumb_Up                         = 11,
	XBICON_XBOX_Right_Thumb_UpRight                    = 12,
	XBICON_XBOX_Right_Thumb_Right                      = 13,
	XBICON_XBOX_Right_Thumb_DownRight                  = 14,
	XBICON_XBOX_Right_Thumb_Down                       = 15,
	XBICON_XBOX_Right_Thumb_DownLeft                   = 16,
	XBICON_XBOX_Right_Thumb_Left                       = 17,
	XBICON_XBOX_Right_Thumb_UpLeft                     = 18,
	XBICON_XBOX_Left_Thumb_Up                          = 19,
	XBICON_XBOX_Left_Thumb_UpRight                     = 20,
	XBICON_XBOX_Left_Thumb_Right                       = 21,
	XBICON_XBOX_Left_Thumb_DownRight                   = 22,
	XBICON_XBOX_Left_Thumb_Down                        = 23,
	XBICON_XBOX_Left_Thumb_DownLeft                    = 24,
	XBICON_XBOX_Left_Thumb_Left                        = 25,
	XBICON_XBOX_Left_Thumb_UpLeft                      = 26,
	XBICON_XBOX_DPad                                   = 27,
	XBICON_XBOX_DPad_Up                                = 28,
	XBICON_XBOX_DPad_Right                             = 29,
	XBICON_XBOX_DPad_Down                              = 30,
	XBICON_XBOX_DPad_Left                              = 31,
	XBICON_XBOX_Start                                  = 32,
	XBICON_XBOX_Back                                   = 33,
	XBICON_XBOX_Right_Shoulder                         = 34,
	XBICON_XBOX_Right_Trigger                          = 35,
	XBICON_XBOX_Left_Shoulder                          = 36,
	XBICON_XBOX_Left_Trigger                           = 37,
	XBICON_MAX                                         = 38
};*/

// Enum SFXGame.SFXEngine.ESFXSaveGameAction
/*enum ESFXSaveGameAction
{
	SaveGame_DoNothing                                 = 0,
	SaveGame_Load                                      = 1,
	SaveGame_Save                                      = 2,
	SaveGame_Delete                                    = 3,
	SaveGame_CreateCareer                              = 4,
	SaveGame_DeleteCareer                              = 5,
	SaveGame_EnumerateCareers                          = 6,
	SaveGame_EnumerateSaves                            = 7,
	SaveGame_QueryFreeSpace                            = 8,
	SaveGame_PrepareSave                               = 9,
	SaveGame_DeletePreparedSave                        = 10,
	SaveGame_MAX                                       = 11
};*/

// Enum SFXGame.SFXSaveGame.EPlayerAppearanceType
/*enum EPlayerAppearanceType
{
	PlayerAppearanceType_Parts                         = 0,
	PlayerAppearanceType_Full                          = 1,
	PlayerAppearanceType_MAX                           = 2
};*/

// Enum SFXGame.SFXSaveGame.EEndGameState
/*enum EEndGameState
{
	EGS_NotFinished                                    = 0,
	EGS_OutInABlazeOfGlory                             = 1,
	EGS_LivedToFightAgain                              = 2,
	EGS_MAX                                            = 3
};*/

// Enum SFXGame.SFXSaveGame.ENotorietyType
/*enum ENotorietyType
{
	NotorietyType_None                                 = 0,
	NotorietyType_Survivor                             = 1,
	NotorietyType_Warhero                              = 2,
	NotorietyType_Ruthless                             = 3,
	NotorietyType_MAX                                  = 4
};*/

// Enum SFXGame.SFXSaveGame.EOriginType
/*enum EOriginType
{
	OriginType_None                                    = 0,
	OriginType_Spacer                                  = 1,
	OriginType_Colony                                  = 2,
	OriginType_Earthborn                               = 3,
	OriginType_MAX                                     = 4
};*/

// Enum SFXGame.SFXSaveGame.eOption
/*enum eOption
{
	OPTION_TYPE_COMBAT_DIFFICULTY                      = 0,
	OPTION_TYPE_DIALOG_MODE                            = 1,
	OPTION_TYPE_AUTO_LEVELUP                           = 2,
	OPTION_TYPE_AUTO_EQUIP                             = 3,
	OPTION_TYPE_TUTORIAL_FLAG                          = 4,
	OPTION_TYPE_SUBTITLES                              = 5,
	OPTION_TYPE_AUTOPAUSE_ENEMY_SIGHTED                = 6,
	OPTION_TYPE_AUTOPAUSE_SQUADMEMBER_DOWN             = 7,
	OPTION_TYPE_BRIGHTNESS                             = 8,
	OPTION_TYPE_DISPLAY_SETTING                        = 9,
	OPTION_TYPE_MUSIC_VOLUME                           = 10,
	OPTION_TYPE_FX_VOLUME                              = 11,
	OPTION_TYPE_DIALOG_VOLUME                          = 12,
	OPTION_TYPE_INVERT_YAXIS                           = 13,
	OPTION_TYPE_SOUTHPAW_FLAG                          = 14,
	OPTION_TYPE_TARGET_ASSIST_MODE                     = 15,
	OPTION_TYPE_H_COMBAT_SENSITIVITY                   = 16,
	OPTION_TYPE_V_COMBAT_SENSITIVITY                   = 17,
	OPTION_TYPE_H_EXPLORATION_SENSITIVITY              = 18,
	OPTION_TYPE_V_EXPLORATION_SENSITIVITY              = 19,
	OPTION_TYPE_RUMBLE_FLAG                            = 20,
	OPTION_TYPE_AUTOPAUSE_BLEEDOUT                     = 21,
	OPTION_TYPE_MOTION_BLUR                            = 22,
	OPTION_TYPE_FILM_GRAIN                             = 23,
	OPTION_TYPE_SQUAD_POWER_USE                        = 24,
	OPTION_TYPE_AUTO_SAVE                              = 25,
	OPTION_TYPE_STICK_CONFIGURATION                    = 26,
	OPTION_TYPE_TRIGGER_CONFIGURATION                  = 27,
	OPTION_TYPE_VERTICAL_SYNC                          = 28,
	OPTION_TYPE_MAX                                    = 29
};*/

// Enum SFXGame.SFXSaveGame.EHelmetPart
/*enum EHelmetPart
{
	HelmetPart_Helmet                                  = 0,
	HelmetPart_Visor                                   = 1,
	HelmetPart_Breather                                = 2,
	HelmetPart_MAX                                     = 3
};*/

// Enum SFXGame.SFXEngine.EAsyncLoadStatus
/*enum EAsyncLoadStatus
{
	ASYNC_LOAD_ERROR                                   = 0,
	ASYNC_LOAD_STARTED                                 = 1,
	ASYNC_LOAD_INPROGRESS                              = 2,
	ASYNC_LOAD_COMLETE                                 = 3,
	ASYNC_LOAD_MAX                                     = 4
};*/

// Enum SFXGame.SFXLoadMovieManager.LoadingMovieState
/*enum LoadingMovieState
{
	LMS_NotPlaying                                     = 0,
	LMS_Playing                                        = 1,
	LMS_MAX                                            = 2
};*/

// Enum SFXGame.SFXEngine.ESFXSaveGameType
/*enum ESFXSaveGameType
{
	SaveGameType_Manual                                = 0,
	SaveGameType_Quick                                 = 1,
	SaveGameType_Auto                                  = 2,
	SaveGameType_Chapter                               = 3,
	SaveGameType_Legacy                                = 4,
	SaveGameType_MAX                                   = 5
};*/

// Enum SFXGame.SFXTrilogyProfileSettings.ETrilogyProfileSetting
/*enum ETrilogyProfileSetting
{
	TrilogySetting_TotalKills                          = 0,
	TrilogySetting_TotalMeleeKills                     = 1,
	TrilogySetting_InsanityME1                         = 2,
	TrilogySetting_InsanityME2                         = 3,
	TrilogySetting_InsanityME3                         = 4,
	TrilogySetting_RomancedME1                         = 5,
	TrilogySetting_RomancedME2                         = 6,
	TrilogySetting_RomancedME3                         = 7,
	TrilogySetting_MAX                                 = 8
};*/

// Enum SFXGame.BioPawnType.EChallengeType
/*enum EChallengeType
{
	ChallengeType_None                                 = 0,
	ChallengeType_Minion                               = 1,
	ChallengeType_Elite                                = 2,
	ChallengeType_SubBoss                              = 3,
	ChallengeType_Boss                                 = 4,
	ChallengeType_MAX                                  = 5
};*/

// Enum SFXGame.BioPawnType.EAffiliationType
/*enum EAffiliationType
{
	AffiliationType_None                               = 0,
	AffiliationType_GenericMerc                        = 1,
	AffiliationType_BloodPack                          = 2,
	AffiliationType_BlueSuns                           = 3,
	AffiliationType_Eclipse                            = 4,
	AffiliationType_MAX                                = 5
};*/

// Enum SFXGame.BioPawnType.ECharacterType
/*enum ECharacterType
{
	CharacterType_None                                 = 0,
	CharacterType_Human                                = 1,
	CharacterType_Turian                               = 2,
	CharacterType_Asari                                = 3,
	CharacterType_Krogan                               = 4,
	CharacterType_Quarian                              = 5,
	CharacterType_Salarian                             = 6,
	CharacterType_Vorcha                               = 7,
	CharacterType_LightMech                            = 8,
	CharacterType_HeavyMech                            = 9,
	CharacterType_MechDog                              = 10,
	CharacterType_Batarian                             = 11,
	CharacterType_GethInfantry                         = 12,
	CharacterType_GethColossus                         = 13,
	CharacterType_GethDestroyer                        = 14,
	CharacterType_Husk                                 = 15,
	CharacterType_Scion                                = 16,
	CharacterType_Praetorian                           = 17,
	CharacterType_Collector                            = 18,
	CharacterType_Oculus                               = 19,
	CharacterType_Gunship                              = 20,
	CharacterType_Animal                               = 21,
	CharacterType_Other                                = 22,
	CharacterType_MAX                                  = 23
};*/

// Enum SFXGame.BioPawnType.eDefaultAIBehaviour
/*enum eDefaultAIBehaviour
{
	DAIB_NONE                                          = 0,
	DAIB_MAX                                           = 1
};*/

// Enum SFXGame.BioPawnType.ERaceType
/*enum ERaceType
{
	RaceType_None                                      = 0,
	RaceType_Humanoid                                  = 1,
	RaceType_Machine                                   = 2,
	RaceType_Animal                                    = 3,
	RaceType_MAX                                       = 4
};*/

// Enum SFXGame.SFXVocalizationTypes.ESFXVocalizationRole
/*enum ESFXVocalizationRole
{
	SFXVocalizationRole_None                           = 0,
	SFXVocalizationRole_Instigator                     = 1,
	SFXVocalizationRole_Recipient                      = 2,
	SFXVocalizationRole_EnemyWitness                   = 3,
	SFXVocalizationRole_TeammateWitness                = 4,
	SFXVocalizationRole_HenchmanWitness                = 5,
	SFXVocalizationRole_ReferencedPawn                 = 6,
	SFXVocalizationRole_MAX                            = 7
};*/

// Enum SFXGame.SFXVocalizationTypes.ESFXVocalizationVariationType
/*enum ESFXVocalizationVariationType
{
	SFXVocalizationSpecificType_None                   = 0,
	SFXVocalizationSpecificType_Location               = 1,
	SFXVocalizationSpecificType_CharacterName          = 2,
	SFXVocalizationSpecificType_CharacterType          = 3,
	SFXVocalizationSpecificType_Affiliation            = 4,
	SFXVocalizationSpecificType_Gender                 = 5,
	SFXVocalizationSpecificType_Weapon                 = 6,
	SFXVocalizationSpecificType_Challenge              = 7,
	SFXVocalizationSpecificType_Me                     = 8,
	SFXVocalizationSpecificType_IsFriendly             = 9,
	SFXVocalizationSpecificType_MAX                    = 10
};*/

// Enum SFXGame.SFXVocalizationTypes.ESFXVocalizationBool
/*enum ESFXVocalizationBool
{
	SFXVocalizationBool_False                          = 0,
	SFXVocalizationBool_True                           = 1,
	SFXVocalizationBool_MAX                            = 2
};*/

// Enum SFXGame.SFXVocalizationTypes.ESFXVocalizationLocation
/*enum ESFXVocalizationLocation
{
	SFXVocalizationLocation_None                       = 0,
	SFXVocalizationLocation_Above                      = 1,
	SFXVocalizationLocation_Below                      = 2,
	SFXVocalizationLocation_Right                      = 3,
	SFXVocalizationLocation_Left                       = 4,
	SFXVocalizationLocation_Ahead                      = 5,
	SFXVocalizationLocation_Behind                     = 6,
	SFXVocalizationLocation_Specific                   = 7,
	SFXVocalizationLocation_MAX                        = 8
};*/

// Enum SFXGame.SFXVocalizationTypes.ESFXVocalizationGender
/*enum ESFXVocalizationGender
{
	SFXVocalizationGender_None                         = 0,
	SFXVocalizationGender_Male                         = 1,
	SFXVocalizationGender_Female                       = 2,
	SFXVocalizationGender_MAX                          = 3
};*/

// Enum SFXGame.SFXVocalizationTypes.ESFXVocalizationName
/*enum ESFXVocalizationName
{
	SFXVocalizationCharacter_None                      = 0,
	SFXVocalizationCharacter_Shepard                   = 1,
	SFXVocalizationCharacter_Garrus                    = 2,
	SFXVocalizationCharacter_Tali                      = 3,
	SFXVocalizationCharacter_Legion                    = 4,
	SFXVocalizationCharacter_Samara                    = 5,
	SFXVocalizationCharacter_Morinth                   = 6,
	SFXVocalizationCharacter_Jacob                     = 7,
	SFXVocalizationCharacter_Miranda                   = 8,
	SFXVocalizationCharacter_Grunt                     = 9,
	SFXVocalizationCharacter_Mordin                    = 10,
	SFXVocalizationCharacter_Thane                     = 11,
	SFXVocalizationCharacter_Jack                      = 12,
	SFXVocalizationCharacter_Kasumi                    = 13,
	SFXVocalizationCharacter_Zaeed                     = 14,
	SFXVocalizationCharacter_MAX                       = 15
};*/

// Enum SFXGame.SFXVocalizationTypes.ESFXVocalizationWeapon
/*enum ESFXVocalizationWeapon
{
	SFXVocalizationWeapon_None                         = 0,
	SFXVocalizationWeapon_Pistol                       = 1,
	SFXVocalizationWeapon_SMG                          = 2,
	SFXVocalizationWeapon_AssaultRifle                 = 3,
	SFXVocalizationWeapon_Shotgun                      = 4,
	SFXVocalizationWeapon_SniperRifle                  = 5,
	SFXVocalizationWeapon_HeavyWeapon                  = 6,
	SFXVocalizationWeapon_MAX                          = 7
};*/

// Enum SFXGame.SFXVocalizationManager.ESFXVocalizationEventID
/*enum ESFXVocalizationEventID
{
	SFXVocalizationEvent_None                          = 0,
	SFXVocalizationEvent_EnteredCombat                 = 1,
	SFXVocalizationEvent_ReceivedOrder_Attack          = 2,
	SFXVocalizationEvent_ReceivedOrder_Attack_TargetValid = 3,
	SFXVocalizationEvent_ReceivedOrder_Attack_MovingFirst = 4,
	SFXVocalizationEvent_ReceivedOrder_Attack_KilledTarget = 5,
	SFXVocalizationEvent_ReceivedOrder_ChangeWeapon    = 6,
	SFXVocalizationEvent_ReceivedOrder_Move            = 7,
	SFXVocalizationEvent_ReceivedOrder_Follow          = 8,
	SFXVocalizationEvent_ReceivedOrder_TakeCover       = 9,
	SFXVocalizationEvent_ReceivedOrder_Hold            = 10,
	SFXVocalizationEvent_CancellingHoldOrder           = 11,
	SFXVocalizationEvent_FailedMoveOrder               = 12,
	SFXVocalizationEvent_Attacking                     = 13,
	SFXVocalizationEvent_Attacking_Henchman            = 14,
	SFXVocalizationEvent_KilledTarget_Henchman         = 15,
	SFXVocalizationEvent_LostSight                     = 16,
	SFXVocalizationEvent_EnemySighted                  = 17,
	SFXVocalizationEvent_MovingToCover                 = 18,
	SFXVocalizationEvent_UsingPower                    = 19,
	SFXVocalizationEvent_ChangingWeapon                = 20,
	SFXVocalizationEvent_Death                         = 21,
	SFXVocalizationEvent_Death_NonTrivial              = 22,
	SFXVocalizationEvent_Death_Henchman                = 23,
	SFXVocalizationEvent_ReceivedDamage                = 24,
	SFXVocalizationEvent_ReceivedDamage_LowHealth      = 25,
	SFXVocalizationEvent_ReceivedDamage_ExtremelyLowHealth = 26,
	SFXVocalizationEvent_RequireHealing                = 27,
	SFXVocalizationEvent_ShieldsDown                   = 28,
	SFXVocalizationEvent_OneEnemyRemaining             = 29,
	SFXVocalizationEvent_ZeroEnemiesRemaining          = 30,
	SFXVocalizationEvent_Agitation_High                = 31,
	SFXVocalizationEvent_Agitation_Medium              = 32,
	SFXVocalizationEvent_DamageReaction_GreatPain      = 33,
	SFXVocalizationEvent_DamageReaction_OnFire         = 34,
	SFXVocalizationEvent_DamageReaction_KnockedBack    = 35,
	SFXVocalizationEvent_Falling                       = 36,
	SFXVocalizationEvent_Tossed                        = 37,
	SFXVocalizationEvent_Brainwashed                   = 38,
	SFXVocalizationEvent_Taunt                         = 39,
	SFXVocalizationEvent_Ambient                       = 40,
	SFXVocalizationEvent_Power_Failed_ShieldsUp        = 41,
	SFXVocalizationEvent_Power_Failed_BarrierUp        = 42,
	SFXVocalizationEvent_Power_Failed_ArmorUp          = 43,
	SFXVocalizationEvent_Power_EnergyDrain             = 44,
	SFXVocalizationEvent_Power_Reave                   = 45,
	SFXVocalizationEvent_Power_ShockWave               = 46,
	SFXVocalizationEvent_Power_Crush                   = 47,
	SFXVocalizationEvent_Power_CombatDrone             = 48,
	SFXVocalizationEvent_Power_Incinerate              = 49,
	SFXVocalizationEvent_Power_Lift                    = 50,
	SFXVocalizationEvent_Power_Pull                    = 51,
	SFXVocalizationEvent_Power_Singularity             = 52,
	SFXVocalizationEvent_Power_Stasis                  = 53,
	SFXVocalizationEvent_Power_Throw                   = 54,
	SFXVocalizationEvent_Power_Warp                    = 55,
	SFXVocalizationEvent_Power_Biotic_Misc             = 56,
	SFXVocalizationEvent_Power_AIHack                  = 57,
	SFXVocalizationEvent_Power_Fissure                 = 58,
	SFXVocalizationEvent_Power_Flashbang               = 59,
	SFXVocalizationEvent_Power_NeuralShock             = 60,
	SFXVocalizationEvent_Power_Overload                = 61,
	SFXVocalizationEvent_Power_Sabotage                = 62,
	SFXVocalizationEvent_Power_Tech_Misc               = 63,
	SFXVocalizationEvent_Power_Ammo                    = 64,
	SFXVocalizationEvent_Power_Explosion               = 65,
	SFXVocalizationEvent_Power_Melee                   = 66,
	SFXVocalizationEvent_Power_Projectile              = 67,
	SFXVocalizationEvent_Power_Combat_Misc             = 68,
	SFXVocalizationEvent_Power_Buff                    = 69,
	SFXVocalizationEvent_Power_Cloak                   = 70,
	SFXVocalizationEvent_Power_Regeneration            = 71,
	SFXVocalizationEvent_Power_Resurrection            = 72,
	SFXVocalizationEvent_Power_KroganCharge            = 73,
	SFXVocalizationEvent_Power_KroganResurrection      = 74,
	SFXVocalizationEvent_MultipleAttackers             = 75,
	SFXVocalizationEvent_ViolenceAwe                   = 76,
	SFXVocalizationEvent_Bored                         = 77,
	SFXVocalizationEvent_DrewWeapon_OutOfCombat        = 78,
	SFXVocalizationEvent_StaredAt                      = 79,
	SFXVocalizationEvent_Bumped                        = 80,
	SFXVocalizationEvent_FriendlyFire                  = 81,
	SFXVocalizationEvent_Headshot                      = 82,
	SFXVocalizationEvent_ShootDeadBody                 = 83,
	SFXVocalizationEvent_UsedNuclearWeapon             = 84,
	SFXVocalizationEvent_CoverCrateExplosion           = 85,
	SFXVocalizationEvent_HeavyMechGoingToExplode       = 86,
	SFXVocalizationEvent_Flanked                       = 87,
	SFXVocalizationEvent_UnCloaked                     = 88,
	SFXVocalizationEvent_ChargeFailed                  = 89,
	SFXVocalizationEvent_BlockedPower                  = 90,
	SFXVocalizationEvent_PowerStillOnCooldown          = 91,
	SFXVocalizationEvent_Varren_Charge                 = 92,
	SFXVocalizationEvent_Husk_Charge                   = 93,
	SFXVocalizationEvent_DamageReaction_PlayerStagger  = 94,
	SFXVocalizationEvent_DamageReaction_PlayerMeleed   = 95,
	SFXVocalizationEvent_DamageReaction_PlayerMeleedII = 96,
	SFXVocalizationEvent_DamageReaction_PlayerMeleedNoRotate = 97,
	SFXVocalizationEvent_DamageReaction_PlayerStandardImpact = 98,
	SFXVocalizationEvent_DamageReaction_PlayerKnockback = 99,
	SFXVocalizationEvent_DamageReaction_BloodyPlayerStandardImpact = 100,
	SFXVocalizationEvent_DamageReaction_PlayerOnFire   = 101,
	SFXVocalizationEvent_CollectorPossession           = 102,
	SFXVocalizationEvent_VorchaBloodlust               = 103,
	SFXVocalizationEvent_CausedDamage                  = 104,
	SFXVocalizationEvent_LowAmmo                       = 105,
	SFXVocalizationEvent_OutOfAmmo                     = 106,
	SFXVocalizationEvent_Loot_AmmoFound                = 107,
	SFXVocalizationEvent_Loot_AmmoFull                 = 108,
	SFXVocalizationEvent_Loot_TreasureFound            = 109,
	SFXVocalizationEvent_Saw_HeavyMech                 = 110,
	SFXVocalizationEvent_CollectorGeneral_ReceivedDamage = 111,
	SFXVocalizationEvent_Aggressive_Flank              = 112,
	SFXVocalizationEvent_PraetorianImmune_ReceivedDamage = 113,
	SFXVocalizationEvent_Krogan_ReceivedDamage         = 114,
	SFXVocalizationEvent_CollectorPossessed            = 115,
	SFXVocalizationEvent_MAX                           = 116
};*/

// Enum SFXGame.BioConversation.EConvGUIStyles
/*enum EConvGUIStyles
{
	GUI_STYLE_NONE                                     = 0,
	GUI_STYLE_CHARM                                    = 1,
	GUI_STYLE_INTIMIDATE                               = 2,
	GUI_STYLE_PLAYER_ALERT                             = 3,
	GUI_STYLE_ILLEGAL                                  = 4,
	GUI_STYLE_MAX                                      = 5
};*/

// Enum SFXGame.BioConversation.EReplyCategory
/*enum EReplyCategory
{
	REPLY_CATEGORY_DEFAULT                             = 0,
	REPLY_CATEGORY_AGREE                               = 1,
	REPLY_CATEGORY_DISAGREE                            = 2,
	REPLY_CATEGORY_FRIENDLY                            = 3,
	REPLY_CATEGORY_HOSTILE                             = 4,
	REPLY_CATEGORY_INVESTIGATE                         = 5,
	REPLY_CATEGORY_RENEGADE_INTERRUPT                  = 6,
	REPLY_CATEGORY_PARAGON_INTERRUPT                   = 7,
	REPLY_CATEGORY_MAX                                 = 8
};*/

// Enum SFXGame.BioConversation.EInterruptionType
/*enum EInterruptionType
{
	INTERRUPTION_RENEGADE                              = 0,
	INTERRUPTION_PARAGON                               = 1,
	INTERRUPTION_MAX                                   = 2
};*/

// Enum SFXGame.BioConversation.EReplyTypes
/*enum EReplyTypes
{
	REPLY_STANDARD                                     = 0,
	REPLY_AUTOCONTINUE                                 = 1,
	REPLY_DIALOGEND                                    = 2,
	REPLY_MAX                                          = 3
};*/

// Enum SFXGame.BioConversation.EConvLightingType
/*enum EConvLightingType
{
	ConvLighting_Cinematic                             = 0,
	ConvLighting_Exploration                           = 1,
	ConvLighting_Dynamic                               = 2,
	ConvLighting_MAX                                   = 3
};*/

// Enum SFXGame.BioPawn.EAimNodes
/*enum EAimNodes
{
	AimNode_Cover                                      = 0,
	AimNode_Head                                       = 1,
	AimNode_LeftShoulder                               = 2,
	AimNode_RightShoulder                              = 3,
	AimNode_Chest                                      = 4,
	AimNode_Groin                                      = 5,
	AimNode_LeftKnee                                   = 6,
	AimNode_RightKnee                                  = 7,
	AimNode_MAX                                        = 8
};*/

// Enum SFXGame.BioPawn.EActionState
/*enum EActionState
{
	ActionState_Explore                                = 0,
	ActionState_Combat                                 = 1,
	ActionState_MAX                                    = 2
};*/

// Enum SFXGame.BioPawn.eAIBehaviour
/*enum eAIBehaviour
{
	AIB_None                                           = 0,
	AIB_MAX                                            = 1
};*/

// Enum SFXGame.BioPawn.ESFXRigidBodyMode
/*enum ESFXRigidBodyMode
{
	SFXRigidBodyMode_Animated                          = 0,
	SFXRigidBodyMode_Motorized                         = 1,
	SFXRigidBodyMode_Full                              = 2,
	SFXRigidBodyMode_MAX                               = 3
};*/

// Enum SFXGame.SFXDamageType.ESFXDamageFalloffType
/*enum ESFXDamageFalloffType
{
	DamageFalloffType_Constant                         = 0,
	DamageFalloffType_Linear                           = 1,
	DamageFalloffType_MAX                              = 2
};*/

// Enum SFXGame.SFXDamageType.EWeaponRange
/*enum EWeaponRange
{
	WeaponRange_Invalid                                = 0,
	WeaponRange_Melee                                  = 1,
	WeaponRange_Short                                  = 2,
	WeaponRange_Medium                                 = 3,
	WeaponRange_Long                                   = 4,
	WeaponRange_MAX                                    = 5
};*/

// Enum SFXGame.SFXCustomActionTypes.EAICustomAction
/*enum EAICustomAction
{
	AI_CustomAction_None                               = 0,
	AI_CustomAction_CollectorDeath                     = 1,
	AI_CustomAction_PraetorianDeath                    = 2,
	AI_CustomAction_DeathCrawl                         = 3,
	AI_CustomAction_Frozen                             = 4,
	AI_CustomAction_Ragdoll                            = 5,
	AI_CustomAction_BovineFortitude                    = 6,
	AI_CustomAction_Charge                             = 7,
	AI_CustomAction_CombatActivate                     = 8,
	AI_CustomAction_CoverClimb                         = 9,
	AI_CustomAction_CoverMantle                        = 10,
	AI_CustomAction_WaypointAnim                       = 11,
	AI_CustomAction_Freezing                           = 12,
	AI_CustomAction_Possessed                          = 13,
	AI_CustomAction_Knockback                          = 14,
	AI_CustomAction_HeadShot                           = 15,
	AI_CustomAction_GreatPain                          = 16,
	AI_CustomAction_Staggering                         = 17,
	AI_CustomAction_Reave                              = 18,
	AI_CustomAction_ScionHeadless                      = 19,
	AI_CustomAction_HitLeftLeg                         = 20,
	AI_CustomAction_HitRightLeg                        = 21,
	AI_CustomAction_CorkscrewDeath                     = 22,
	AI_CustomAction_ExplosionDeath                     = 23,
	AI_CustomAction_LeftArmDeath                       = 24,
	AI_CustomAction_RightArmDeath                      = 25,
	AI_CustomAction_StomachDeath                       = 26,
	AI_CustomAction_DeathKnockback                     = 27,
	AI_CustomAction_OnFire                             = 28,
	AI_CustomAction_TakeAKnee                          = 29,
	AI_CustomAction_StaggerImpact                      = 30,
	AI_CustomAction_StandardImpact                     = 31,
	AI_CustomAction_ZombieTakeAKnee                    = 32,
	AI_CustomAction_ScionImpact                        = 33,
	AI_CustomAction_HuskImpact                         = 34,
	AI_CustomAction_ShieldKnockback                    = 35,
	AI_CustomAction_ShieldStaggerImpact                = 36,
	AI_CustomAction_ShieldStandardImpact               = 37,
	AI_CustomAction_GlobalDeath                        = 38,
	AI_CustomAction_TentacleDeath                      = 39,
	AI_CustomAction_OculusDeath                        = 40,
	AI_CustomAction_NeuralShock                        = 41,
	AI_CustomAction_BioticCharge                       = 42,
	AI_CustomAction_HeavyPunch                         = 43,
	AI_CustomAction_Swipe                              = 44,
	AI_CustomAction_PraetorianTeleportStart            = 45,
	AI_CustomAction_PraetorianTeleportEnd              = 46,
	AI_CustomAction_PlayerStagger                      = 47,
	AI_CustomAction_PlayerMeleed                       = 48,
	AI_CustomAction_PlayerMeleedII                     = 49,
	AI_CustomAction_PlayerMeleedNoRotate               = 50,
	AI_CustomAction_PlayerStandardImpact               = 51,
	AI_CustomAction_PlayerKnockback                    = 52,
	AI_CustomAction_Maelstrom                          = 53,
	AI_CustomAction_Melee                              = 54,
	AI_CustomAction_Explosion_Level1                   = 55,
	AI_CustomAction_Explosion_Level2                   = 56,
	AI_CustomAction_Explosion_Level3                   = 57,
	AI_CustomAction_Meleed                             = 58,
	AI_CustomAction_Meleed_Twice                       = 59,
	AI_CustomAction_MawDeath                           = 60,
	AI_CustomAction_MawBurrow                          = 61,
	AI_CustomAction_Spider                             = 62,
	AI_CustomAction_BloodyPlayerStandardImpact         = 63,
	AI_CustomAction_PlayerOnFire                       = 64,
	AI_CustomAction_BloodLust                          = 65,
	AI_CustomAction_OnFireShort                        = 66,
	AI_CustomAction_PlayerShortStagger                 = 67,
	AI_CustomAction_StumbleForward                     = 68,
	AI_CustomAction_MechDogIdle                        = 69,
	AI_CustomAction_MechDogBite                        = 70,
	AI_CustomAction_ElectricStandardImpact             = 71,
	AI_CustomAction_RoboticImpact                      = 72,
	AI_CustomAction_GreatPainII                        = 73,
	AI_CustomAction_KnockbackII                        = 74,
	AI_CustomAction_MeleedII                           = 75,
	AI_CustomAction_HeavyMeleed                        = 76,
	AI_CustomAction_Utilize                            = 77,
	AI_CustomAction_PunchDeathKnockback                = 78,
	AI_CustomAction_GreatPainII_Death                  = 79,
	AI_CustomAction_PlayerStumbleForward               = 80,
	AI_CustomAction_VarrenImpact                       = 81,
	AI_CustomAction_SpiderImpact                       = 82,
	AI_CustomAction_Exploration_Comm                   = 83,
	AI_CustomAction_VarrenBite                         = 84,
	AI_CustomAction_ExplosiveKnockback                 = 85,
	AI_CustomAction_Power_Standard                     = 86,
	AI_CustomAction_Power_StandardVariant              = 87,
	AI_CustomAction_Power_Stagger                      = 88,
	AI_CustomAction_Power_StaggerVariant               = 89,
	AI_CustomAction_Power_Knockback                    = 90,
	AI_CustomAction_Power_KnockbackVariant             = 91,
	AI_CustomAction_Power_StandardForward              = 92,
	AI_CustomAction_Power_StaggerForward               = 93,
	AI_CustomAction_Power_OnFireShort                  = 94,
	AI_CustomAction_Power_OnFireLong                   = 95,
	AI_CustomAction_Power_OnFireVariant                = 96,
	AI_CustomAction_Power_NeuralShock                  = 97,
	AI_CustomAction_Power_Reave                        = 98,
	AI_CustomAction_MAX                                = 99
};*/

// Enum SFXGame.BioPawn.EWalkingSpeedMode
/*enum EWalkingSpeedMode
{
	eWalkingSpeedMode_ExploreRun                       = 0,
	eWalkingSpeedMode_ExploreWalk                      = 1,
	eWalkingSpeedMode_ExploreStorming                  = 2,
	eWalkingSpeedMode_ExploreCrouched                  = 3,
	eWalkingSpeedMode_CombatRun                        = 4,
	eWalkingSpeedMode_CombatWalk                       = 5,
	eWalkingSpeedMode_CombatStorming                   = 6,
	eWalkingSpeedMode_CombatCrouched                   = 7,
	eWalkingSpeedMode_CombatSniping                    = 8,
	eWalkingSpeedMode_CombatZoomed                     = 9,
	eWalkingSpeedMode_CoverMove                        = 10,
	eWalkingSpeedMode_CoverCrouched                    = 11,
	eWalkingSpeedMode_Crawling                         = 12,
	eWalkingSpeedMode_MAX                              = 13
};*/

// Enum SFXGame.SFXPlayerSquadLoadoutData.ELoadoutWeapons
/*enum ELoadoutWeapons
{
	LoadoutWeapons_AssaultRifles                       = 0,
	LoadoutWeapons_Shotguns                            = 1,
	LoadoutWeapons_SniperRifles                        = 2,
	LoadoutWeapons_AutoPistols                         = 3,
	LoadoutWeapons_HeavyPistols                        = 4,
	LoadoutWeapons_HeavyWeapons                        = 5,
	LoadoutWeapons_MAX                                 = 6
};*/

// Enum SFXGame.SFXGame.ECharacterClass
/*enum ECharacterClass
{
	ClassType_Invalid                                  = 0,
	ClassType_Soldier                                  = 1,
	ClassType_Adept                                    = 2,
	ClassType_Infiltrator                              = 3,
	ClassType_Engineer                                 = 4,
	ClassType_Vanguard                                 = 5,
	ClassType_Sentinel                                 = 6,
	ClassType_MAX                                      = 7
};*/

// Enum SFXGame.SFXGameEffect.EDurationType
/*enum EDurationType
{
	DurationType_Instant                               = 0,
	DurationType_Temporary                             = 1,
	DurationType_Permanent                             = 2,
	DurationType_MAX                                   = 3
};*/

// Enum SFXGame.BioEpicPawnBehavior.EBioAnimNodeCombatModeFadeOut
/*enum EBioAnimNodeCombatModeFadeOut
{
	BIO_ANIM_NODE_COMBAT_MODE_FADEOUT_NONE             = 0,
	BIO_ANIM_NODE_COMBAT_MODE_FADEOUT_ANIMATING_ENTER  = 1,
	BIO_ANIM_NODE_COMBAT_MODE_FADEOUT_ENTER            = 2,
	BIO_ANIM_NODE_COMBAT_MODE_FADEOUT_ANIMATING_EXIT   = 3,
	BIO_ANIM_NODE_COMBAT_MODE_FADEOUT_EXIT             = 4,
	BIO_ANIM_NODE_COMBAT_MODE_FADEOUT_MAX              = 5
};*/

// Enum SFXGame.BioEpicPawnBehavior.EBioEpicPawnBehaviorWeaponFireMode
/*enum EBioEpicPawnBehaviorWeaponFireMode
{
	BIO_EPIC_PAWN_BEHAVIOR_WEAPON_FIRE_MODE_NORMAL     = 0,
	BIO_EPIC_PAWN_BEHAVIOR_WEAPON_FIRE_MODE_ALWAYS_HIT = 1,
	BIO_EPIC_PAWN_BEHAVIOR_WEAPON_FIRE_MODE_ALWAYS_MISS = 2,
	BIO_EPIC_PAWN_BEHAVIOR_WEAPON_FIRE_MODE_MAX        = 3
};*/

// Enum SFXGame.BioPawnBehavior.EBioAnimCombatState
/*enum EBioAnimCombatState
{
	eBioAnimCombat_NoState                             = 0,
	eBioAnimCombat_FireAuto                            = 1,
	eBioAnimCombat_FireAutoStop                        = 2,
	eBioAnimCombat_FireManual                          = 3,
	eBioAnimCombat_ThrowGrenade                        = 4,
	eBioAnimCombat_DoneFireManual                      = 5,
	eBioAnimCombat_MAX                                 = 6
};*/

// Enum SFXGame.BioPawnBehavior.EBioAnimStartState
/*enum EBioAnimStartState
{
	eBioAnimStart_NoState                              = 0,
	eBioAnimStart_StartingMove                         = 1,
	eBioAnimStart_FinishStartMove                      = 2,
	eBioAnimStart_DoneStartMove                        = 3,
	eBioAnimStart_RotationUnlocked                     = 4,
	eBioAnimStart_PlayingMove                          = 5,
	eBioAnimStart_MAX                                  = 6
};*/

// Enum SFXGame.BioPawnBehavior.EBioAnimStopState
/*enum EBioAnimStopState
{
	eBioAnimStop_NoState                               = 0,
	eBioAnimStop_StopLeftMove                          = 1,
	eBioAnimStop_StopRightMove                         = 2,
	eBioAnimStop_FinishLeftMove                        = 3,
	eBioAnimStop_FinishRightMove                       = 4,
	eBioAnimStop_InterruptLeftMove                     = 5,
	eBioAnimStop_InterruptRightMove                    = 6,
	eBioAnimStop_DoneFinishLeftMove                    = 7,
	eBioAnimStop_DoneFinishRightMove                   = 8,
	eBioAnimStop_DoneIntLeftMove                       = 9,
	eBioAnimStop_DoneIntRightMove                      = 10,
	eBioAnimStop_MAX                                   = 11
};*/

// Enum SFXGame.BioPawnBehavior.EBioAnimTurnDirState
/*enum EBioAnimTurnDirState
{
	eBioAnimTurn_NoTurn                                = 0,
	eBioAnimTurn_ReqStartLeft                          = 1,
	eBioAnimTurn_ReqStartRight                         = 2,
	eBioAnimTurn_AckStartLeft                          = 3,
	eBioAnimTurn_AckStartRight                         = 4,
	eBioAnimTurn_ProcessLeft                           = 5,
	eBioAnimTurn_ProcessRight                          = 6,
	eBioAnimTurn_MAX                                   = 7
};*/

// Enum SFXGame.BioPawnBehavior.EBioAnimGetUpState
/*enum EBioAnimGetUpState
{
	eBioAnimGetUp_Idle                                 = 0,
	eBioAnimGetUp_Start                                = 1,
	eBioAnimGetUp_Processing                           = 2,
	eBioAnimGetUp_MAX                                  = 3
};*/

// Enum SFXGame.BioPawn.EBodyStance
/*enum EBodyStance
{
	BS_FullBody                                        = 0,
	BS_Max                                             = 1
};*/

// Enum SFXGame.BioCustomAction_CoverClimbMantleBase.ECoverBodyStanceID
/*enum ECoverBodyStanceID
{
	ECS_None                                           = 0,
	ECS_FromExplore                                    = 1,
	ECS_FromCombat                                     = 2,
	ECS_FromCover                                      = 3,
	ECS_MAX                                            = 4
};*/

// Enum SFXGame.BioCustomAction_KroganCharge.EKroganChargeActions
/*enum EKroganChargeActions
{
	EKC_Start                                          = 0,
	EKC_Miss                                           = 1,
	EKC_Hit                                            = 2,
	EKC_MAX                                            = 3
};*/

// Enum SFXGame.BioDestinationArrow.eColorSelection
/*enum eColorSelection
{
	BDA_White                                          = 0,
	BDA_Yellow                                         = 1,
	BDA_Blue                                           = 2,
	BDA_Red                                            = 3,
	BDA_MAX                                            = 4
};*/

// Enum SFXGame.BioEventNotifier.BioNoticeDisplayTypes
/*enum BioNoticeDisplayTypes
{
	NOTICE_TYPE_DELTA                                  = 0,
	NOTICE_TYPE_TEXT                                   = 1,
	NOTICE_TYPE_QUANTITY                               = 2,
	NOTICE_TYPE_QUANTITY_TEXT                          = 3,
	NOTICE_TYPE_MAX                                    = 4
};*/

// Enum SFXGame.BioEventNotifier.BioNoticeIcons
/*enum BioNoticeIcons
{
	NOTICE_ICON_UNASSIGNED                             = 0,
	NOTICE_ICON_QUEST_UPDATE                           = 1,
	NOTICE_ICON_LEVELUP                                = 2,
	NOTICE_ICON_DEFICIENCY                             = 3,
	NOTICE_ICON_XP                                     = 4,
	NOTICE_ICON_PARAGON                                = 5,
	NOTICE_ICON_RENEGADE                               = 6,
	NOTICE_ICON_OMNITOOL                               = 7,
	NOTICE_ICON_BIOAMP                                 = 8,
	NOTICE_ICON_XMOD                                   = 9,
	NOTICE_ICON_CODEX_ADDED                            = 10,
	NOTICE_ICON_COIN                                   = 11,
	NOTICE_ICON_MEDIGEL                                = 12,
	NOTICE_ICON_SALVAGE                                = 13,
	NOTICE_ICON_PISTOL                                 = 14,
	NOTICE_ICON_SHOTGUN                                = 15,
	NOTICE_ICON_ASSAULT_RIFLE                          = 16,
	NOTICE_ICON_SNIPER_RIFLE                           = 17,
	NOTICE_ICON_ARMOR                                  = 18,
	NOTICE_ICON_GRENADE                                = 19,
	NOTICE_ICON_QUEST_ADDED                            = 20,
	NOTICE_ICON_AREAMAPNODE                            = 21,
	NOTICE_ICON_MAX                                    = 22
};*/

// Enum SFXGame.BioEventNotifier.BioNoticeContexts
/*enum BioNoticeContexts
{
	NOTICE_CONTEXT_JOURNAL                             = 0,
	NOTICE_CONTEXT_CODEX                               = 1,
	NOTICE_CONTEXT_INVENTORY                           = 2,
	NOTICE_CONTEXT_PARTYLEVEL                          = 3,
	NOTICE_CONTEXT_XP                                  = 4,
	NOTICE_CONTEXT_MEDIGEL                             = 5,
	NOTICE_CONTEXT_SALVAGE                             = 6,
	NOTICE_CONTEXT_CREDITS                             = 7,
	NOTICE_CONTEXT_GRENADES                            = 8,
	NOTICE_CONTEXT_PARAGON                             = 9,
	NOTICE_CONTEXT_RENEGADE                            = 10,
	NOTICE_CONTEXT_AREAMAP                             = 11,
	NOTICE_CONTEXT_ABILITY                             = 12,
	NOTICE_CONTEXT_MAX                                 = 13
};*/

// Enum SFXGame.BioEventNotifier.BioQuestEventTypes
/*enum BioQuestEventTypes
{
	QET_New                                            = 0,
	QET_Updated                                        = 1,
	QET_Completed                                      = 2,
	QET_MAX                                            = 3
};*/

// Enum SFXGame.BioEvtSysTrackFuncShot.EBioFuncShotType
/*enum EBioFuncShotType
{
	FuncShotType_Unset                                 = 0,
	FuncShotType_MAX                                   = 1
};*/

// Enum SFXGame.SFXGameActorInterpTrack.EActorTrackFindActorMode
/*enum EActorTrackFindActorMode
{
	ActorTrack_FindActorByTag                          = 0,
	ActorTrack_UseObjectPinForActor                    = 1,
	ActorTrack_FindActorByNode                         = 2,
	ActorTrack_MAX                                     = 3
};*/

// Enum SFXGame.BioEvtSysTrackGesture.EBioGestureAllPoses
/*enum EBioGestureAllPoses
{
	GestPose_Unset                                     = 0,
	GestPose_MAX                                       = 1
};*/

// Enum SFXGame.BioEvtSysTrackGesture.EBioGestureOverrideType
/*enum EBioGestureOverrideType
{
	DEFAULT_TRACK                                      = 0,
	FEMALE_PLAYER_TRACK                                = 1,
	EBioGestureOverrideType_MAX                        = 2
};*/

// Enum SFXGame.BioEvtSysTrackGesture.EBioGestureValidPoses
/*enum EBioGestureValidPoses
{
	GestValidPoses_Unset                               = 0,
	GestValidPoses_MAX                                 = 1
};*/

// Enum SFXGame.BioEvtSysTrackGesture.EBioGestureValidGestures
/*enum EBioGestureValidGestures
{
	GestValidGest_Unset                                = 0,
	GestValidGest_MAX                                  = 1
};*/

// Enum SFXGame.BioEvtSysTrackGesture.EBioGestureGroups
/*enum EBioGestureGroups
{
	GestGroups_Unset                                   = 0,
	GestGroups_MAX                                     = 1
};*/

// Enum SFXGame.BioEvtSysTrackGesture.EBioValidPoseGroups
/*enum EBioValidPoseGroups
{
	ValidPoseGroups_Unset                              = 0,
	ValidPoseGroups_MAX                                = 1
};*/

// Enum SFXGame.BioEvtSysTrackGesture.EBioTrackAllPoseGroups
/*enum EBioTrackAllPoseGroups
{
	AllPoseGroups_Unset                                = 0,
	AllPoseGroups_MAX                                  = 1
};*/

// Enum SFXGame.BioEvtSysTrackProp.EDynPropList
/*enum EDynPropList
{
	DynPropList_Unset                                  = 0,
	DynPropList_MAX                                    = 1
};*/

// Enum SFXGame.BioEvtSysTrackProp.EDynPropActionList
/*enum EDynPropActionList
{
	DynPropActionList_Unset                            = 0,
	DynPropActionList_MAX                              = 1
};*/

// Enum SFXGame.BioEvtSysTrackSetFacing.EDynamicStageNodes
/*enum EDynamicStageNodes
{
	EDynamicStageNodes_UNSET                           = 0,
	EDynamicStageNodes_MAX                             = 1
};*/

// Enum SFXGame.BioSeqAct_StageSwitchCamera.EBioCommonStageCameras
/*enum EBioCommonStageCameras
{
	ChangeCam_Unset                                    = 0,
	cam1_2                                             = 1,
	cam1_201                                           = 2,
	cam1_202                                           = 3,
	cam1_203                                           = 4,
	cam1_204                                           = 5,
	cam2_1                                             = 6,
	cam2_101                                           = 7,
	cam2_102                                           = 8,
	cam2_103                                           = 9,
	cam2_104                                           = 10,
	cam3_1                                             = 11,
	cam3_101                                           = 12,
	cam3_2                                             = 13,
	cam3_201                                           = 14,
	cam4_1                                             = 15,
	cam4_101                                           = 16,
	cam4_2                                             = 17,
	cam4_201                                           = 18,
	EBioCommonStageCameras_MAX                         = 19
};*/

// Enum SFXGame.BioEvtSysTrackSwitchCamera.EBioSwitchCamSpecific
/*enum EBioSwitchCamSpecific
{
	SwitchCam_Unset                                    = 0,
	SwitchCam_MAX                                      = 1
};*/

// Enum SFXGame.BioHintSystemBase.SFXNotificationPriotity
/*enum SFXNotificationPriotity
{
	NOTIFICATIONPRIORITY_UNDEFINED                     = 0,
	NOTIFICATIONPRIORITY_NORMAL                        = 1,
	NOTIFICATIONPRIORITY_HIGH                          = 2,
	NOTIFICATIONPRIORITY_MAX                           = 3
};*/

// Enum SFXGame.BioHintSystem.SFXPowerTutorialType
/*enum SFXPowerTutorialType
{
	PowerTutorial_Pull                                 = 0,
	PowerTutorial_Unity                                = 1,
	PowerTutorial_Overload                             = 2,
	PowerTutorial_MAX                                  = 3
};*/

// Enum SFXGame.BioInterpolator.EBioInterpolationMethod
/*enum EBioInterpolationMethod
{
	BIO_INTERPOLATION_METHOD_LINEAR                    = 0,
	BIO_INTERPOLATION_METHOD_LOG_E                     = 1,
	BIO_INTERPOLATION_METHOD_QUARTER_SIN               = 2,
	BIO_INTERPOLATION_METHOD_MAX                       = 3
};*/

// Enum SFXGame.BioLayers.EBioLayer
/*enum EBioLayer
{
	LAYER_DAMAGE_CONCENTRATION                         = 0,
	LAYER_SUPPRESSION_CONCENTRATION                    = 1,
	LAYER_BIOTIC_HARDENING                             = 2,
	LAYER_TECH_HARDENING                               = 3,
	LAYER_TOXIC_RESISTANCE                             = 4,
	LAYER_DISABLING_EFFECTS_RESISTANCE                 = 5,
	LAYER_DAMAGE_RESISTANCE                            = 6,
	LAYER_COMBAT_KICKBACK_REDUCTION                    = 7,
	LAYER_BIOTIC_KICKBACK_REDUCTION                    = 8,
	LAYER_TECH_KICKBACK_REDUCTION                      = 9,
	LAYER_COUNT                                        = 10,
	LAYER_MAX                                          = 11
};*/

// Enum SFXGame.BioLevelUpSystem.EBioLevelUp2DA
/*enum EBioLevelUp2DA
{
	LEVEL_UP_2DA_LEVEL_UP                              = 0,
	LEVEL_UP_2DA_EXPERIENCE                            = 1,
	LEVEL_UP_2DA_MAX                                   = 2
};*/

// Enum SFXGame.BioMorphUtility.EBioMorphUtilityComponentType
/*enum EBioMorphUtilityComponentType
{
	BMU_Component_Unknown                              = 0,
	BMU_Component_Picker                               = 1,
	BMU_Component_Slider                               = 2,
	BMU_Component_Combo                                = 3,
	BMU_Component_RGBA                                 = 4,
	BMU_Component_Compound                             = 5,
	BMU_Component_MAX                                  = 6
};*/

// Enum SFXGame.BioMorphUtility.EBioMorphUtilityHairComponentType
/*enum EBioMorphUtilityHairComponentType
{
	BMU_HairComponent_Hair                             = 0,
	BMU_HairComponent_Other                            = 1,
	BMU_HairComponent_MAX                              = 2
};*/

// Enum SFXGame.BioMorphFaceFrontEnd.EBioMorphFrontendSliderType
/*enum EBioMorphFrontendSliderType
{
	BMFE_SLIDER_MORPH_SINGLE                           = 0,
	BMFE_SLIDER_MORPH_DOUBLE                           = 1,
	BMFE_SLIDER_MATERIAL                               = 2,
	BMFE_SLIDER_MAX                                    = 3
};*/

// Enum SFXGame.BioParticleModuleLocationAttachedMesh.EmissionAreaSpecificationType
/*enum EmissionAreaSpecificationType
{
	EAST_UniformDensityPerVertex                       = 0,
	EAST_UniformDensityPerBone                         = 1,
	EAST_WeightedDensityPerBone                        = 2,
	EAST_WeightedDensityPerEmissionArea                = 3,
	EAST_UniformDensityPerEmissionArea                 = 4,
	EAST_MAX                                           = 5
};*/

// Enum SFXGame.BioParticleModuleLocationPrimitiveNearestSurface.ELocationNearestSurface
/*enum ELocationNearestSurface
{
	eLocationNearestSurface_Stay                       = 0,
	eLocationNearestSurface_StayAtRadius               = 1,
	eLocationNearestSurface_Kill                       = 2,
	eLocationNearestSurface_MAX                        = 3
};*/

// Enum SFXGame.BioParticleModuleLocationPrimitiveNearestSurface.EBioParticleCollisionComplete
/*enum EBioParticleCollisionComplete
{
	EBPCC_DoNothing                                    = 0,
	EBPCC_Kill                                         = 1,
	EBPCC_Freeze                                       = 2,
	EBPCC_FreezeTranslation                            = 3,
	EBPCC_FreezeRotation                               = 4,
	EBPCC_FreezeMovement                               = 5,
	EBPCC_MAX                                          = 6
};*/

// Enum SFXGame.BioParticleModuleMultiplyByEmitterSpeed.MultiplyByEmitterSpeedProperty
/*enum MultiplyByEmitterSpeedProperty
{
	MESProperty_SpawnRate                              = 0,
	MESProperty_MAX                                    = 1
};*/

// Enum SFXGame.BioParticleModuleSound.EInstanceVersion
/*enum EInstanceVersion
{
	ParticleModSound_OriginalVer                       = 0,
	ParticleModSound_PerParticleVer                    = 1,
	ParticleModSound_MaxVer                            = 2,
	ParticleModSound_MAX                               = 3
};*/

// Enum SFXGame.BioPathNodeVolume.EBioPathNodeAlignment
/*enum EBioPathNodeAlignment
{
	BIO_PATH_ALIGN_NONE                                = 0,
	BIO_PATH_ALIGN_CENTER                              = 1,
	BIO_PATH_ALIGN_JUSTIFY                             = 2,
	BIO_PATH_ALIGN_MAX                                 = 3
};*/

// Enum SFXGame.BioPathNodeVolume.EBioPathNodeGenerators
/*enum EBioPathNodeGenerators
{
	PATHNODE_SQUARE                                    = 0,
	PATHNODE_MAX                                       = 1
};*/

// Enum SFXGame.SFXGalaxyMapObject.EGalaxyObjectVisiblePlotAutoSet
/*enum EGalaxyObjectVisiblePlotAutoSet
{
	GalaxyObjectVisiblePlot_Unset                      = 0,
	GalaxyObjectVisiblePlot_MAX                        = 1
};*/

// Enum SFXGame.SFXGalaxyMapObject.EGalaxyObjectVisibleAutoSet
/*enum EGalaxyObjectVisibleAutoSet
{
	GalaxyObjectVisible_Unset                          = 0,
	GalaxyObjectVisible_MAX                            = 1
};*/

// Enum SFXGame.SFXGalaxyMapObject.EGalaxyObjectUsablePlotAutoSet
/*enum EGalaxyObjectUsablePlotAutoSet
{
	GalaxyObjectUsablePlot_Unset                       = 0,
	GalaxyObjectUsablePlot_MAX                         = 1
};*/

// Enum SFXGame.SFXGalaxyMapObject.EGalaxyObjectUsableAutoSet
/*enum EGalaxyObjectUsableAutoSet
{
	GalaxyObjectUsable_Unset                           = 0,
	GalaxyObjectUsable_MAX                             = 1
};*/

// Enum SFXGame.BioPlanet.EFeatureType
/*enum EFeatureType
{
	FEATURE_INVALID                                    = 0,
	FEATURE_MINERAL                                    = 1,
	FEATURE_LABEL                                      = 2,
	FEATURE_PROBES                                     = 3,
	FEATURE_ARTIFACT                                   = 4,
	FEATURE_LANDINGSITE                                = 5,
	FEATURE_MAX                                        = 6
};*/

// Enum SFXGame.BioPlanet.EMineralType
/*enum EMineralType
{
	MINERAL_RED                                        = 0,
	MINERAL_BLUE                                       = 1,
	MINERAL_GREEN                                      = 2,
	MINERAL_ALPHA                                      = 3,
	MINERAL_MAX                                        = 4
};*/

// Enum SFXGame.BioPlanet.ESystemLevelType
/*enum ESystemLevelType
{
	SL_PLANET                                          = 0,
	SL_ANOMALY                                         = 1,
	SL_RINGPLANET                                      = 2,
	SL_MASSRELAY                                       = 3,
	SL_DEPOT                                           = 4,
	SL_SUN                                             = 5,
	SL_MAX                                             = 6
};*/

// Enum SFXGame.BioPlanet.EOrbitRingType
/*enum EOrbitRingType
{
	OR_NONE                                            = 0,
	OR_ORBIT                                           = 1,
	OR_ASTEROID                                        = 2,
	OR_MAX                                             = 3
};*/

// Enum SFXGame.BioPlanet.EPlanetType
/*enum EPlanetType
{
	NOSCAN_PLANET                                      = 0,
	ROCK_PLANET                                        = 1,
	DESERT_PLANET                                      = 2,
	OCEAN_PLANET                                       = 3,
	GARDEN_PLANET                                      = 4,
	GIANT_ICE_PLANET                                   = 5,
	GIANT_JOVIAN_PLANET                                = 6,
	GIANT_PEGASID_PLANET                               = 7,
	POST_GARDEN                                        = 8,
	BROWN_DWARF                                        = 9,
	TIDAL_LOCK                                         = 10,
	EPlanetType_MAX                                    = 11
};*/

// Enum SFXGame.BioPlanet.EBioPlanetEventConditionPlotAutoSet
/*enum EBioPlanetEventConditionPlotAutoSet
{
	BioPlanetEventConditionPlot_Unset                  = 0,
	BioPlanetEventConditionPlot_MAX                    = 1
};*/

// Enum SFXGame.BioPlanet.EBioPlanetEventConditionAutoSet
/*enum EBioPlanetEventConditionAutoSet
{
	BioPlanetEventCondition_Unset                      = 0,
	BioPlanetEventCondition_MAX                        = 1
};*/

// Enum SFXGame.BioPlanet.EBioPlanetEventTransitionPlotAutoSet
/*enum EBioPlanetEventTransitionPlotAutoSet
{
	BioPlanetEventTransitionPlot_Unset                 = 0,
	BioPlanetEventTransitionPlot_MAX                   = 1
};*/

// Enum SFXGame.BioPlanet.EBioPlanetEventTransitionAutoSet
/*enum EBioPlanetEventTransitionAutoSet
{
	BioPlanetEventTransition_Unset                     = 0,
	BioPlanetEventTransition_MAX                       = 1
};*/

// Enum SFXGame.BioPlanet.EBioPlanetLandConditionPlotAutoSet
/*enum EBioPlanetLandConditionPlotAutoSet
{
	BioPlanetLandConditionPlot_Unset                   = 0,
	BioPlanetLandConditionPlot_MAX                     = 1
};*/

// Enum SFXGame.BioPlanet.EBioPlanetLandConditionAutoSet
/*enum EBioPlanetLandConditionAutoSet
{
	BioPlanetLandCondition_Unset                       = 0,
	BioPlanetLandCondition_MAX                         = 1
};*/

// Enum SFXGame.BioPlanet.EBioPlanetPlotLabelConditionPlotAutoSet
/*enum EBioPlanetPlotLabelConditionPlotAutoSet
{
	BioPlanetPlotLabelConditionPlot_Unset              = 0,
	BioPlanetPlotLabelConditionPlot_MAX                = 1
};*/

// Enum SFXGame.BioPlanet.EBioPlanetPlotLabelConditionAutoSet
/*enum EBioPlanetPlotLabelConditionAutoSet
{
	BioPlanetPlotLabelCondition_Unset                  = 0,
	BioPlanetPlotLabelCondition_MAX                    = 1
};*/

// Enum SFXGame.BioPlayerController.ETutorialHooks
/*enum ETutorialHooks
{
	TUT_Reload                                         = 0,
	TUT_Melee                                          = 1,
	TUT_Zoom                                           = 2,
	TUT_QuickCast                                      = 3,
	TUT_WeaponSwitch                                   = 4,
	TUT_Storm                                          = 5,
	TUT_OrderHenchmen                                  = 6,
	TUT_WheelHidden                                    = 7,
	TUT_AreaMapHidden                                  = 8,
	TUT_MAX                                            = 9
};*/

// Enum SFXGame.SFXAI_Core.AttackResult
/*enum AttackResult
{
	ATTACK_SUCCESS                                     = 0,
	ATTACK_FAIL                                        = 1,
	ATTACK_FAIL_RELOADING                              = 2,
	ATTACK_FAIL_NO_LOS                                 = 3,
	ATTACK_MAX                                         = 4
};*/

// Enum SFXGame.SFXAI_Core.EAICompletionReasons
/*enum EAICompletionReasons
{
	AI_Cancelled                                       = 0,
	AI_Success                                         = 1,
	AI_Failed                                          = 2,
	AI_LOS                                             = 3,
	AI_Cooldown                                        = 4,
	AI_Disabled                                        = 5,
	AI_MAX                                             = 6
};*/

// Enum SFXGame.SFXAI_Core.EAITicketType
/*enum EAITicketType
{
	AI_NoTicket                                        = 0,
	AI_TargetTicket                                    = 1,
	AI_AttackTicket                                    = 2,
	AI_MAX                                             = 3
};*/

// Enum SFXGame.SFXAI_Core.EAICustomActionTypes
/*enum EAICustomActionTypes
{
	AI_DefaultCustomAction                             = 0,
	AI_DamageCustomAction                              = 1,
	AI_DeathCustomAction                               = 2,
	AI_MAX                                             = 3
};*/

// Enum SFXGame.BioPower.EBioPowerResource
/*enum EBioPowerResource
{
	BIO_POWER_RESOURCE_VFX_PLAYER_CRUST                = 0,
	BIO_POWER_RESOURCE_VFX_PLAYER_MATERIAL             = 1,
	BIO_POWER_RESOURCE_VFX_TARGET_CRUST                = 2,
	BIO_POWER_RESOURCE_VFX_TARGET_MATERIAL             = 3,
	BIO_POWER_RESOURCE_VFX_FRAMEBUFFER                 = 4,
	BIO_POWER_RESOURCE_VFX_TRAVELLING                  = 5,
	BIO_POWER_RESOURCE_VFX_IMPACT                      = 6,
	BIO_POWER_RESOURCE_VFX_WORLD_IMPACT                = 7,
	BIO_POWER_RESOURCE_VFX_RELEASE                     = 8,
	BIO_POWER_RESOURCE_VFX_CASTING_BEAM                = 9,
	BIO_POWER_RESOURCE_CASTING                         = 10,
	BIO_POWER_RESOURCE_RELEASE                         = 11,
	BIO_POWER_RESOURCE_MAX                             = 12
};*/

// Enum SFXGame.BioPower.EBioPowerType
/*enum EBioPowerType
{
	BIO_POWER_TYPE_UNKNOWN                             = 0,
	BIO_POWER_TYPE_CYLINDER                            = 1,
	BIO_POWER_TYPE_TARGET                              = 2,
	BIO_POWER_TYPE_PARTY                               = 3,
	BIO_POWER_TYPE_IMPACT_VOLUME                       = 4,
	BIO_POWER_TYPE_MELEE                               = 5,
	BIO_POWER_TYPE_MAX                                 = 6
};*/

// Enum SFXGame.SFXAI_Henchman.HenchmanOrderType
/*enum HenchmanOrderType
{
	HENCHMAN_ORDER_NONE                                = 0,
	HENCHMAN_ORDER_USE_POWER                           = 1,
	HENCHMAN_ORDER_SWITCH_WEAPON                       = 2,
	HENCHMAN_ORDER_ATTACK_TARGET                       = 3,
	HENCHMAN_ORDER_FOLLOW                              = 4,
	HENCHMAN_ORDER_HOLD_POSITION                       = 5,
	HENCHMAN_ORDER_MAX                                 = 6
};*/

// Enum SFXGame.SFXWeapon.FireModes
/*enum FireModes
{
	FireMode_Firing                                    = 0,
	FireMode_Reload                                    = 1,
	FireMode_Failed                                    = 2,
	FireMode_MAX                                       = 3
};*/

// Enum SFXGame.SFXWeapon.WeaponAnimType
/*enum WeaponAnimType
{
	WeaponAnimType_Pistol                              = 0,
	WeaponAnimType_Shotgun                             = 1,
	WeaponAnimType_Rifle                               = 2,
	WeaponAnimType_Sniper                              = 3,
	WeaponAnimType_GrenadeLauncher                     = 4,
	WeaponAnimType_MissileLauncher                     = 5,
	WeaponAnimType_NukeLauncher                        = 6,
	WeaponAnimType_ParticleBeam                        = 7,
	WeaponAnimType_RepulsorBeam                        = 8,
	WeaponAnimType_AutoShotgun                         = 9,
	WeaponAnimType_AutoSniper                          = 10,
	WeaponAnimType_AutoPistol                          = 11,
	WeaponAnimType_MAX                                 = 12
};*/

// Enum SFXGame.BioPlayerSelection.EGeneralSelectionMode
/*enum EGeneralSelectionMode
{
	BIO_SELECTION_MODE_INACTIVE                        = 0,
	BIO_SELECTION_MODE_NORMAL                          = 1,
	BIO_SELECTION_MODE_SPECTATOR                       = 2,
	BIO_SELECTION_MODE_MAX                             = 3
};*/

// Enum SFXGame.BioPlayerInput.EAxisBuffer
/*enum EAxisBuffer
{
	AxisBuffer_LX                                      = 0,
	AxisBuffer_LY                                      = 1,
	AxisBuffer_RX                                      = 2,
	AxisBuffer_RY                                      = 3,
	AxisBuffer_MouseX                                  = 4,
	AxisBuffer_MouseY                                  = 5,
	AxisBuffer_MAX                                     = 6
};*/

// Enum SFXGame.BioPlayerSquad.EExperienceSourceType
/*enum EExperienceSourceType
{
	EXPSourceType_SimpleDeath                          = 0,
	EXPSourceType_SkillUse                             = 1,
	EXPSourceType_QuestCompletion                      = 2,
	EXPSourceType_Generic                              = 3,
	EXPSourceType_MAX                                  = 4
};*/

// Enum SFXGame.BioPlayerSquad.EBioGameOverCondition
/*enum EBioGameOverCondition
{
	BIO_GAME_OVER_CONDITION_PLAYER_PAWN_DIES           = 0,
	BIO_GAME_OVER_CONDITION_PLAYER_SQUAD_DIES          = 1,
	BIO_GAME_OVER_CONDITION_PLAYER_SQUAD_MAX           = 2,
	BIO_GAME_OVER_CONDITION_PLAYER_MAX                 = 3
};*/

// Enum SFXGame.BioPowerScriptDesign.ECombatReaction
/*enum ECombatReaction
{
	CombatReaction_None                                = 0,
	CombatReaction_Twitch                              = 1,
	CombatReaction_Standard                            = 2,
	CombatReaction_Stagger                             = 3,
	CombatReaction_Ragdoll                             = 4,
	CombatReaction_GreatPain                           = 5,
	CombatReaction_OnFire                              = 6,
	CombatReaction_MAX                                 = 7
};*/

// Enum SFXGame.BioPowerScriptDesign.EModalPower
/*enum EModalPower
{
	ModalPower_Carnage                                 = 0,
	ModalPower_Overkill                                = 1,
	ModalPower_Marksman                                = 2,
	ModalPower_Assassinate                             = 3,
	ModalPower_MAX                                     = 4
};*/

// Enum SFXGame.SFXTreasureUseModule.ETreasureType
/*enum ETreasureType
{
	AMMO_TREASURE                                      = 0,
	MEDIGEL_TREASURE                                   = 1,
	CREDITS_TREASURE                                   = 2,
	EEZO_TREASURE                                      = 3,
	PALLADIUM_TREASURE                                 = 4,
	IRIDIUM_TREASURE                                   = 5,
	PLATINUM_TREASURE                                  = 6,
	PROBES_TREASURE                                    = 7,
	ETreasureType_MAX                                  = 8
};*/

// Enum SFXGame.BioSeqAct_BlackScreen.BlackScreenActionSet
/*enum BlackScreenActionSet
{
	BlackScreenAction_TurnBlackOn                      = 0,
	BlackScreenAction_TurnBlackOff                     = 1,
	BlackScreenAction_FadeToBlack                      = 2,
	BlackScreenAction_FadeFromBlack                    = 3,
	BlackScreenAction_MAX                              = 4
};*/

// Enum SFXGame.BioSFHandler_DesignerUI.BioDUIElements
/*enum BioDUIElements
{
	BIO_DUI_PassiveTimer                               = 0,
	BIO_DUI_PassiveCounter                             = 1,
	BIO_DUI_PassiveText                                = 2,
	BIO_DUI_PassiveBar                                 = 3,
	BIO_DUI_PassiveBarMarker1                          = 4,
	BIO_DUI_PassiveBarMarker2                          = 5,
	BIO_DUI_ModalBar                                   = 6,
	BIO_DUI_ModalBarMarker1                            = 7,
	BIO_DUI_ModalBarMarker2                            = 8,
	BIO_DUI_ModalCounter                               = 9,
	BIO_DUI_ModalTimer                                 = 10,
	BIO_DUI_ModalText                                  = 11,
	BIO_DUI_ModalBackground                            = 12,
	BIO_DUI_ButtonA                                    = 13,
	BIO_DUI_ButtonAText                                = 14,
	BIO_DUI_ButtonB                                    = 15,
	BIO_DUI_ButtonBText                                = 16,
	BIO_DUI_ButtonX                                    = 17,
	BIO_DUI_ButtonXText                                = 18,
	BIO_DUI_ButtonY                                    = 19,
	BIO_DUI_ButtonYText                                = 20,
	BIO_DUI_ModalBackground2                           = 21,
	BIO_DUI_MAX                                        = 22
};*/

// Enum SFXGame.BioSeqAct_FaceOnlyVO.EBioFOVOLines
/*enum EBioFOVOLines
{
	FOVOLines_Unset                                    = 0,
	FOVOLines_MAX                                      = 1
};*/

// Enum SFXGame.BioSeqAct_FaceOnlyVO.EBioFOVOSpeakers
/*enum EBioFOVOSpeakers
{
	FOVOSpeakers_Unset                                 = 0,
	FOVOSpeakers_MAX                                   = 1
};*/

// Enum SFXGame.BioSeqAct_FireWeaponAt.EFireWeaponAtOutputPins
/*enum EFireWeaponAtOutputPins
{
	OL_Success                                         = 0,
	OL_Failed                                          = 1,
	OL_MAX                                             = 2
};*/

// Enum SFXGame.BioSeqAct_InteractProperty.EBioPropertyType
/*enum EBioPropertyType
{
	BPT_INVALID                                        = 0,
	BPT_OBJECT_PROPERTY                                = 1,
	BPT_BEHAVIOR_PROPERTY                              = 2,
	BPT_BEHAVIOR_FUNCTION                              = 3,
	BPT_OBJECT_FUNCTION                                = 4,
	BPT_SELECTION_PROPERTY                             = 5,
	BPT_MAX                                            = 6
};*/

// Enum SFXGame.BioSeqAct_GetShieldPercentage.EShieldType
/*enum EShieldType
{
	EShieldType_All                                    = 0,
	EShieldType_Energy                                 = 1,
	EShieldType_Barrier                                = 2,
	EShieldType_Armour                                 = 3,
	EShieldType_MAX                                    = 4
};*/

// Enum SFXGame.BioSeqAct_MoveToObject.EMoveToObjectOutputPins
/*enum EMoveToObjectOutputPins
{
	MTO_Success                                        = 0,
	MTO_Failed                                         = 1,
	MTO_MAX                                            = 2
};*/

// Enum SFXGame.BioSeqAct_ScalarMathUnit.EScalarMathOps
/*enum EScalarMathOps
{
	SMO_Add                                            = 0,
	SMO_Subtract                                       = 1,
	SMO_Multiply                                       = 2,
	SMO_Divide                                         = 3,
	SMO_Exponent                                       = 4,
	SMO_Modulo                                         = 5,
	SMO_MAX                                            = 6
};*/

// Enum SFXGame.BioSeqAct_SelectWeapon.EBioSeqActSelectWeaponLinks
/*enum EBioSeqActSelectWeaponLinks
{
	EBioSeqActSelectWeaponLinks_Success                = 0,
	EBioSeqActSelectWeaponLinks_Failure                = 1,
	EBioSeqActSelectWeaponLinks_MAX                    = 2
};*/

// Enum SFXGame.BioWorldInfo.BioBrowserStates
/*enum BioBrowserStates
{
	BBS_NORMAL                                         = 0,
	BBS_ALERT                                          = 1,
	BBS_DISABLED                                       = 2,
	BBS_MAX                                            = 3
};*/

// Enum SFXGame.BioWorldInfo.MEBrowserWheelSubPages
/*enum MEBrowserWheelSubPages
{
	MBW_SP_Map                                         = 0,
	MBW_SP_Save                                        = 1,
	MBW_SP_CharacterRecord                             = 2,
	MBW_SP_Load                                        = 3,
	MBW_SP_Journal                                     = 4,
	MBW_SP_DataPad                                     = 5,
	MBW_SP_Options                                     = 6,
	MBW_SP_ReturnToMainMenu                            = 7,
	MBW_SP_ExitGame                                    = 8,
	MBW_SP_MAX                                         = 9
};*/

// Enum SFXGame.BioWorldInfo.JournalSortMethods
/*enum JournalSortMethods
{
	JSM_Newest                                         = 0,
	JSM_Name                                           = 1,
	JSM_Oldest                                         = 2,
	JSM_MAX                                            = 3
};*/

// Enum SFXGame.BioWorldInfo.EPlayerRenderStateSetting
/*enum EPlayerRenderStateSetting
{
	PRSS_NEARCLIP                                      = 0,
	PRSS_MAX                                           = 1
};*/

// Enum SFXGame.BioWorldInfo.BioLocalVariableObjectType
/*enum BioLocalVariableObjectType
{
	BIO_LVOT_PLAYER                                    = 0,
	BIO_LVOT_OWNER                                     = 1,
	BIO_LVOT_TARGET                                    = 2,
	BIO_LVOT_BYTAG                                     = 3,
	BIO_LVOT_SPEAKER                                   = 4,
	BIO_LVOT_MAX                                       = 5
};*/

// Enum SFXGame.BioSeqAct_SetGestureMode.EBioSetGestureModes
/*enum EBioSetGestureModes
{
	GestureMode_On                                     = 0,
	GestureMode_Off                                    = 1,
	GestureMode_MAX                                    = 2
};*/

// Enum SFXGame.BioSeqAct_SetSuperMode.EModes
/*enum EModes
{
	MOD_Ready                                          = 0,
	MOD_Explore                                        = 1,
	MOD_MAX                                            = 2
};*/

// Enum SFXGame.BioSeqAct_SetWeapon.EBioSeqActSetWeaponLinks
/*enum EBioSeqActSetWeaponLinks
{
	EBioSeqActSetWeaponLinks_Success                   = 0,
	EBioSeqActSetWeaponLinks_Failure                   = 1,
	EBioSeqActSetWeaponLinks_MAX                       = 2
};*/

// Enum SFXGame.BioSeqAct_SkillGame_Base.ESkillGameComplete
/*enum ESkillGameComplete
{
	SK_CANCEL                                          = 0,
	SK_SUCCESS                                         = 1,
	SK_FAIL                                            = 2,
	SK_UNDEFINED                                       = 3,
	SK_MAX                                             = 4
};*/

// Enum SFXGame.BioSeqAct_ToggleLightEnv.ToggleLightEnvType
/*enum ToggleLightEnvType
{
	TLET_ENABLE                                        = 0,
	TLET_DISABLE                                       = 1,
	TLET_TOGGLE                                        = 2,
	TLET_MAX                                           = 3
};*/

// Enum SFXGame.BioSeqAct_WalkWaypointSet.EWalkWaypointSetOutputPins
/*enum EWalkWaypointSetOutputPins
{
	WWS_Success                                        = 0,
	WWS_Failed                                         = 1,
	WWS_MAX                                            = 2
};*/

// Enum SFXGame.BioSeqEvt_Conversation.EConversationScriptType
/*enum EConversationScriptType
{
	NodeEnd                                            = 0,
	NodeStart                                          = 1,
	StartConversationScript                            = 2,
	EndConversationScript                              = 3,
	EConversationScriptType_MAX                        = 4
};*/

// Enum SFXGame.SFXGameChoiceGUIData.SFXChoiceColors
/*enum SFXChoiceColors
{
	CHOICECOLOR_Orange                                 = 0,
	CHOICECOLOR_Red                                    = 1,
	CHOICECOLOR_Green                                  = 2,
	CHOICECOLOR_MAX                                    = 3
};*/

// Enum SFXGame.BioSFHandler_BlackScreen.BlackScreenDisplayModes
/*enum BlackScreenDisplayModes
{
	BlackScreenMode_None                               = 0,
	BlackScreenMode_TurnBlackOn                        = 1,
	BlackScreenMode_TurnBlackOff                       = 2,
	BlackScreenMode_FadeToBlack                        = 3,
	BlackScreenMode_FadeFromBlack                      = 4,
	BlackScreenMode_MAX                                = 5
};*/

// Enum SFXGame.BioSFHandler_CharacterRecord2.PowerRankState
/*enum PowerRankState
{
	POWER_RANK_STATE_LOCKED                            = 0,
	POWER_RANK_STATE_BUYABLE                           = 1,
	POWER_RANK_STATE_BOUGHT                            = 2,
	POWER_RANK_STATE_MAX                               = 3
};*/

// Enum SFXGame.BioSFHandler_ChoiceGUI.EChoiceGUIHandlerID
/*enum EChoiceGUIHandlerID
{
	CHOICEHANDLER_NONE                                 = 0,
	CHOICEHANDLER_SELECTED                             = 1,
	CHOICEHANDLER_EXIT                                 = 2,
	CHOICEHANDLER_UPDATE_IMAGE                         = 3,
	CHOICEHANDLER_SHOW_CREDITS                         = 4,
	CHOICEHANDLER_MAX                                  = 5
};*/

// Enum SFXGame.BioSFHandler_Conversation.BioConvWheelPositions
/*enum BioConvWheelPositions
{
	REPLY_WHEEL_MIDDLE_RIGHT                           = 0,
	REPLY_WHEEL_BOTTOM_RIGHT                           = 1,
	REPLY_WHEEL_BOTTOM_LEFT                            = 2,
	REPLY_WHEEL_MIDDLE_LEFT                            = 3,
	REPLY_WHEEL_TOP_LEFT                               = 4,
	REPLY_WHEEL_TOP_RIGHT                              = 5,
	REPLY_WHEEL_MAX                                    = 6
};*/

// Enum SFXGame.BioSFHandler_Keyboard.Keyboard_Options
/*enum Keyboard_Options
{
	KEYBOARD_STANDARD                                  = 0,
	KEYBOARD_EMAIL                                     = 1,
	KEYBOARD_PASSWORD                                  = 2,
	KEYBOARD_CODE                                      = 3,
	KEYBOARD_MAX                                       = 4
};*/

// Enum SFXGame.MassEffectGuiManager.SFXDisplayableSquadCommands
/*enum SFXDisplayableSquadCommands
{
	SFX_DSC_READY                                      = 0,
	SFX_DSC_ATTACK                                     = 1,
	SFX_DSC_MOVETO                                     = 2,
	SFX_DSC_FOLLOW                                     = 3,
	SFX_DSC_MAX                                        = 4
};*/

// Enum SFXGame.MassEffectGuiManager.BioTutorialPosition
/*enum BioTutorialPosition
{
	BTP_Top                                            = 0,
	BTP_Bottom                                         = 1,
	BTP_MessageBox                                     = 2,
	BTP_MAX                                            = 3
};*/

// Enum SFXGame.MassEffectGuiManager.Cerberus3DState
/*enum Cerberus3DState
{
	C3D_Default                                        = 0,
	C3D_RightPanel_Open                                = 1,
	C3D_RightPanel_Closed                              = 2,
	C3D_RightPanel_Opening                             = 3,
	C3D_RightPanel_Closing                             = 4,
	C3D_MAX                                            = 5
};*/

// Enum SFXGame.MassEffectGuiManager.MainMenuEntries
/*enum MainMenuEntries
{
	MM_ENTRY_DEFAULT                                   = 0,
	MM_ENTRY_NEWGAME                                   = 1,
	MM_ENTRY_NEWGAME_MALE                              = 2,
	MM_ENTRY_NEWGAME_FEMALE                            = 3,
	MM_ENTRY_LOADGAME                                  = 4,
	MM_ENTRY_EXTRAS                                    = 5,
	MM_ENTRY_ACHIEVEMENTS                              = 6,
	MM_ENTRY_ALERT_DLC                                 = 7,
	MM_ENTRY_LIVECONTENT                               = 8,
	MM_ENTRY_OPTIONS                                   = 9,
	MM_ENTRY_CREDITS                                   = 10,
	MM_ENTRY_IMPORT                                    = 11,
	MM_ENTRY_IMPORT_ME2                                = 12,
	MM_ENTRY_MARKETPLACE                               = 13,
	MM_ENTRY_EXITGAME                                  = 14,
	MM_ENTRY_GAMEMANUAL                                = 15,
	MM_ENTRY_EMPTY                                     = 16,
	MM_ENTRY_MAX                                       = 17
};*/

// Enum SFXGame.MassEffectGuiManager.EGuiHandlers
/*enum EGuiHandlers
{
	GUI_HANDLER_NONE                                   = 0,
	GUI_HANDLER_INVENTORY                              = 1,
	GUI_HANDLER_INGAMEGUI                              = 2,
	GUI_HANDLER_CHARACTER_RECORD                       = 3,
	GUI_HANDLER_LOOT                                   = 4,
	GUI_HANDLER_CONVERSATION                           = 5,
	GUI_HANDLER_SHOP                                   = 6,
	GUI_HANDLER_GALAXYMAP                              = 7,
	GUI_HANDLER_MAINMENU                               = 8,
	GUI_HANDLER_NEW_CHARACTER                          = 9,
	GUI_HANDLER_SELECT_CHARACTER                       = 10,
	GUI_HANDLER_JOURNAL                                = 11,
	GUI_HANDLER_HUD                                    = 12,
	GUI_HANDLER_PARTYSELECT                            = 13,
	GUI_HANDLER_XMODS                                  = 14,
	GUI_HANDLER_SQUADCOMMAND                           = 15,
	GUI_HANDLER_DATACODEX                              = 16,
	GUI_HANDLER_SAVELOAD                               = 17,
	GUI_HANDLER_ACHIEVEMENT                            = 18,
	GUI_HANDLER_AREAMAP                                = 19,
	GUI_HANDLER_SHAREDINGAMEGUI                        = 20,
	GUI_HANDLER_MENUBROWSER                            = 21,
	GUI_HANDLER_GAMEOVER                               = 22,
	GUI_HANDLER_SPECIALIZATION                         = 23,
	GUI_HANDLER_MESSAGEBOX                             = 24,
	GUI_HANDLER_INTROTEXT                              = 25,
	GUI_HANDLER_BLACKSCREEN                            = 26,
	GUI_HANDLER_CREDITS                                = 27,
	GUI_HANDLER_OPTIONS                                = 28,
	GUI_HANDLER_ADDITONALCONTENT                       = 29,
	GUI_HANDLER_SKILLGAME                              = 30,
	GUI_HANDLER_SPLASH_SCREEN                          = 31,
	GUI_HANDLER_REPLAYCHARACTERSELECT                  = 32,
	GUI_HANDLER_CHOICEGUI                              = 33,
	GUI_HANDLER_SNIPEROVERLAY                          = 34,
	GUI_HANDLER_MAX                                    = 35
};*/

// Enum SFXGame.SFXSFHandler_Save.ESaveGuiMode
/*enum ESaveGuiMode
{
	SaveGuiMode_BrowserWheel                           = 0,
	SaveGuiMode_MainMenu                               = 1,
	SaveGuiMode_GameOver                               = 2,
	SaveGuiMode_MAX                                    = 3
};*/

// Enum SFXGame.SFXSFHandler_Load.ELoadGuiMode
/*enum ELoadGuiMode
{
	LoadGuiMode_Default                                = 0,
	LoadGuiMode_NGPlus                                 = 1,
	LoadGuiMode_Legacy                                 = 2,
	LoadGuiMode_MAX                                    = 3
};*/

// Enum SFXGame.BioSFHandler_NewCharacter.EDataOrigin
/*enum EDataOrigin
{
	DataOrigin_NewGame                                 = 0,
	DataOrigin_ME1                                     = 1,
	DataOrigin_ME2                                     = 2,
	DataOrigin_MAX                                     = 3
};*/

// Enum SFXGame.BioSFHandler_NewCharacter.BioNewCharacterTemplate
/*enum BioNewCharacterTemplate
{
	BNCT_ICONIC                                        = 0,
	BNCT_CUSTOM                                        = 1,
	BNCT_IMPORTED                                      = 2,
	BNCT_MAX                                           = 3
};*/

// Enum SFXGame.BioSFHandler_NewCharacter.NewCharacterLookAtTarget
/*enum NewCharacterLookAtTarget
{
	NCLAT_Ahead                                        = 0,
	NCLAT_Left                                         = 1,
	NCLAT_Right                                        = 2,
	NCLAT_Up                                           = 3,
	NCLAT_Down                                         = 4,
	NCLAT_MAX                                          = 5
};*/

// Enum SFXGame.BioSFHandler_Options.EOptionsGuiMode
/*enum EOptionsGuiMode
{
	GuiMode_BrowserWheel                               = 0,
	GuiMode_MainMenu                                   = 1,
	GuiMode_NewGame                                    = 2,
	GuiMode_MAX                                        = 3
};*/

// Enum SFXGame.BioSFHandler_PartySelection.CharacterSelectState
/*enum CharacterSelectState
{
	CharSel_Unknown                                    = 0,
	CharSel_Discovered                                 = 1,
	CharSel_Available                                  = 2,
	CharSel_InParty                                    = 3,
	CharSel_Forced                                     = 4,
	CharSel_Dead                                       = 5,
	CharSel_FireTeam                                   = 6,
	CharSel_Specialist                                 = 7,
	CharSel_MAX                                        = 8
};*/

// Enum SFXGame.SFXGameModeManager.EGameModes
/*enum EGameModes
{
	GameMode_Default                                   = 0,
	GameMode_PowerWheel                                = 1,
	GameMode_WeaponWheel                               = 2,
	GameMode_Command                                   = 3,
	GameMode_Vehicle                                   = 4,
	GameMode_Conversation                              = 5,
	GameMode_Cinematic                                 = 6,
	GameMode_GUI                                       = 7,
	GameMode_Movie                                     = 8,
	GameMode_Galaxy                                    = 9,
	GameMode_Orbital                                   = 10,
	GameMode_Photo                                     = 11,
	GameMode_CheatMenu                                 = 12,
	GameMode_MAX                                       = 13
};*/

// Enum SFXGame.BioSFHandler_XBoxMessageBox.MessageBoxIcon
/*enum MessageBoxIcon
{
	MBI_None                                           = 0,
	MBI_Error                                          = 1,
	MBI_Warning                                        = 2,
	MBI_Alert                                          = 3,
	MBI_MAX                                            = 4
};*/

// Enum SFXGame.BioSubtitles.ESubtitlesRenderMode
/*enum ESubtitlesRenderMode
{
	SUBTITLE_RENDER_NONE                               = 0,
	SUBTITLE_RENDER_DEFAULT                            = 1,
	SUBTITLE_RENDER_TOP                                = 2,
	SUBTITLE_RENDER_BOTTOM                             = 3,
	SUBTITLE_RENDER_ABOVE_WHEEL                        = 4,
	SUBTITLE_RENDER_LOADSCREEN                         = 5,
	SUBTITLE_RENDER_MAX                                = 6
};*/

// Enum SFXGame.BioVFXTemplate.EBioVFXCost
/*enum EBioVFXCost
{
	EBioVFXCost                                        = 0,
	EBioVFXCost01                                      = 1,
	EBioVFXCost02                                      = 2,
	EBioVFXCost03                                      = 3,
	EBioVFXCost04                                      = 4,
	EBioVFXCost_MAX                                    = 5
};*/

// Enum SFXGame.BioWp_ActionStation.ePoses
/*enum ePoses
{
	Sit                                                = 0,
	Crouch                                             = 1,
	Tele                                               = 2,
	ePoses_MAX                                         = 3
};*/

// Enum SFXGame.SFXAI_Humanoid.EHumanoidBehaviours
/*enum EHumanoidBehaviours
{
	HB_Defensive                                       = 0,
	HB_Aggressive                                      = 1,
	HB_MAX                                             = 2
};*/

// Enum SFXGame.SFXAreaMapData.SFXAreaMapLayout
/*enum SFXAreaMapLayout
{
	AM_Biop_twrhub                                     = 0,
	AM_Biop_cithub                                     = 1,
	AM_Biop_omghub                                     = 2,
	AM_Biop_krohub                                     = 3,
	AM_Biop_nor                                        = 4,
	AM_Biop_nor01                                      = 5,
	AM_Biop_nor02                                      = 6,
	AM_Biop_nor03                                      = 7,
	AM_Biop_MAX                                        = 8
};*/

// Enum SFXGame.SFXGameModeBase.EGameModePriority2
/*enum EGameModePriority2
{
	ModePriority_Base                                  = 0,
	ModePriority_CheatMenu                             = 1,
	ModePriority_Conversation                          = 2,
	ModePriority_Menus                                 = 3,
	ModePriority_Popup                                 = 4,
	ModePriority_MAX                                   = 5
};*/

// Enum SFXGame.SFXGameModeDefault.ECoverCameraPosition
/*enum ECoverCameraPosition
{
	CCP_PeekLeftCrouch                                 = 0,
	CCP_PeekLeftStand                                  = 1,
	CCP_PeekRightCrouch                                = 2,
	CCP_PeekRightStand                                 = 3,
	CCP_Popup                                          = 4,
	CCP_AimBack                                        = 5,
	CCP_Max                                            = 6
};*/

// Enum SFXGame.SFXCustomAction_MawBurrow.EMawBurrowAction
/*enum EMawBurrowAction
{
	EMB_Lower                                          = 0,
	EMB_Raise                                          = 1,
	EMB_MAX                                            = 2
};*/

// Enum SFXGame.SFXDoor.ESFXDoorType
/*enum ESFXDoorType
{
	EDT_Manual                                         = 0,
	EDT_Proximity                                      = 1,
	EDT_AutoEntrance                                   = 2,
	EDT_AutoExit                                       = 3,
	EDT_MAX                                            = 4
};*/

// Enum SFXGame.SFXDoor.ESFXDoorState
/*enum ESFXDoorState
{
	EDS_Closed                                         = 0,
	EDS_Open                                           = 1,
	EDS_Hackable                                       = 2,
	EDS_PlotLocked                                     = 3,
	EDS_Disabled                                       = 4,
	EDS_MAX                                            = 5
};*/

// Enum SFXGame.SFXInterpTrackMovieBase.EMoviePlayState
/*enum EMoviePlayState
{
	EMPS_Play                                          = 0,
	EMPS_Stop                                          = 1,
	EMPS_Pause                                         = 2,
	EMPS_MAX                                           = 3
};*/

// Enum SFXGame.SFXInventoryManager.CREDCurveSet
/*enum CREDCurveSet
{
	CREDCurve_NoReward                                 = 0,
	CREDCurve_Minor                                    = 1,
	CREDCurve_Small                                    = 2,
	CREDCurve_Medium                                   = 3,
	CREDCurve_Large                                    = 4,
	CREDCurve_Major                                    = 5,
	CREDCurve_MAX                                      = 6
};*/

// Enum SFXGame.SFXModule_Locomotion.ESFXLocomotionState
/*enum ESFXLocomotionState
{
	eSFXLocomotionState_Inactive                       = 0,
	eSFXLocomotionState_Moving                         = 1,
	eSFXLocomotionState_Idle                           = 2,
	eSFXLocomotionState_MoveStart                      = 3,
	eSFXLocomotionState_MoveStop                       = 4,
	eSFXLocomotionState_SkidTurn                       = 5,
	eSFXLocomotionState_MAX                            = 6
};*/

// Enum SFXGame.SFXSFHandler_EANetworking.EAGUI_CerberusIntroResult
/*enum EAGUI_CerberusIntroResult
{
	EAG_CI_REDEEM_CODE                                 = 0,
	EAG_CI_BUY_CODE                                    = 1,
	EAG_CI_CANCEL                                      = 2,
	EAG_CI_MAX                                         = 3
};*/

// Enum SFXGame.SFXSFHandler_EANetworking.EAGUI_EmailPswdMismatchResult
/*enum EAGUI_EmailPswdMismatchResult
{
	EAG_EPM_SUBMIT                                     = 0,
	EAG_EPM_EMAIL_PSWD                                 = 1,
	EAG_EPM_CANCEL                                     = 2,
	EAG_EPM_MAX                                        = 3
};*/

// Enum SFXGame.SFXSFHandler_EANetworking.EAGUI_MsgBoxResult
/*enum EAGUI_MsgBoxResult
{
	EAG_MSGBOX_BTN                                     = 0,
	EAG_MSGBOX_BTN01                                   = 1,
	EAG_MSGBOX_BTN02                                   = 2,
	EAG_MSGBOX_BTN_MAX                                 = 3
};*/

// Enum SFXGame.SFXSFHandler_EANetworking.EAGUI_NucleusLoginResult
/*enum EAGUI_NucleusLoginResult
{
	EAG_NL_LOGIN                                       = 0,
	EAG_NL_CREATE                                      = 1,
	EAG_NL_CANCEL                                      = 2,
	EAG_NL_MAX                                         = 3
};*/

// Enum SFXGame.SFXPlanetFeature.ESFXPlanetFeatureEventTransitionPlotAutoSet
/*enum ESFXPlanetFeatureEventTransitionPlotAutoSet
{
	SFXPlanetFeatureEventTransitionPlot_Unset          = 0,
	SFXPlanetFeatureEventTransitionPlot_MAX            = 1
};*/

// Enum SFXGame.SFXPlanetFeature.ESFXPlanetFeatureEventTransitionAutoSet
/*enum ESFXPlanetFeatureEventTransitionAutoSet
{
	SFXPlanetFeatureEventTransition_Unset              = 0,
	SFXPlanetFeatureEventTransition_MAX                = 1
};*/

// Enum SFXGame.SFXSeqAct_ResearchChoiceGUI.EMode
/*enum EMode
{
	MODE_TOPLEVEL                                      = 0,
	MODE_RESEARCH                                      = 1,
	MODE_TECH                                          = 2,
	MODE_MAX                                           = 3
};*/

// Enum SFXGame.SFXSeqAct_ResearchChoiceGUI.EResearchMode
/*enum EResearchMode
{
	MODE_RESEARCH_TOP                                  = 0,
	MODE_RESEARCH_WEAPON                               = 1,
	MODE_RESEARCH_ARMOR                                = 2,
	MODE_RESEARCH_SHIP                                 = 3,
	MODE_RESEARCH_GEAR                                 = 4,
	MODE_RESEARCH_MAX                                  = 5
};*/

// Enum SFXGame.SFXSFHandler_Personalization.ESFXPersonalizationOption
/*enum ESFXPersonalizationOption
{
	SFXPersOpt_Type                                    = 0,
	SFXPersOpt_Helmet                                  = 1,
	SFXPersOpt_Torso                                   = 2,
	SFXPersOpt_Shoulder                                = 3,
	SFXPersOpt_Arm                                     = 4,
	SFXPersOpt_Leg                                     = 5,
	SFXPersOpt_Spec                                    = 6,
	SFXPersOpt_Tint1                                   = 7,
	SFXPersOpt_Tint2                                   = 8,
	SFXPersOpt_Pattern                                 = 9,
	SFXPersOpt_PatternColor                            = 10,
	SFXPersOpt_Casual                                  = 11,
	SFXPersOpt_MAX                                     = 12
};*/

// Enum SFXGame.SFXSFHandler_PowerWheel.SFXPowerWheelMode
/*enum SFXPowerWheelMode
{
	PWM_NONE                                           = 0,
	PWM_Powers                                         = 1,
	PWM_Weapons                                        = 2,
	PWM_PC                                             = 3,
	PWM_MAX                                            = 4
};*/

// Enum SFXGame.SFXSFHandler_PowerWheel.SFXPowerWheelMapButtonIcon
/*enum SFXPowerWheelMapButtonIcon
{
	PWBI_Icon_NONE                                     = 0,
	PWBI_FaceButtonTop                                 = 1,
	PWBI_FaceButtonLeft                                = 2,
	PWBI_DPadLeft                                      = 3,
	PWBI_DPadRight                                     = 4,
	PWBI_ShoulderLeft                                  = 5,
	PWBI_ShoulderRight                                 = 6,
	PWBI_TriggerLeft                                   = 7,
	PWBI_TriggerRight                                  = 8,
	PWBI_ICON_COUNT                                    = 9,
	PWBI_MAX                                           = 10
};*/

// Enum SFXGame.SFXSFHandler_PowerWheel.SFXPowerWheelPawnID
/*enum SFXPowerWheelPawnID
{
	PWPID_Player                                       = 0,
	PWPID_Hench1                                       = 1,
	PWPID_Hench2                                       = 2,
	PWPID_MAX                                          = 3
};*/

// Enum SFXGame.SFXSFHandler_PowerWheel.SFXPowerWheelWeaponState
/*enum SFXPowerWheelWeaponState
{
	PWWS_Normal                                        = 0,
	PWWS_Hover                                         = 1,
	PWWS_Disabled                                      = 2,
	PWWS_Selected                                      = 3,
	PWWS_WEAPSTATE_COUNT                               = 4,
	PWWS_MAX                                           = 5
};*/

// Enum SFXGame.SFXSFHandler_PowerWheel.SFXPowerWheelPowerState
/*enum SFXPowerWheelPowerState
{
	PWPS_Selectable                                    = 0,
	PWPS_Selected                                      = 1,
	PWPS_Inactive                                      = 2,
	PWPS_Activated                                     = 3,
	PWPS_Overload                                      = 4,
	PWPS_EmptySelectable                               = 5,
	PWPS_EmptySelected                                 = 6,
	PWPS_NotSuggested                                  = 7,
	PWPS_STATE_COUNT                                   = 8,
	PWPS_MAX                                           = 9
};*/

// Enum SFXGame.SFXSFHandler_PhotoMode.PhotoModeOptionType
/*enum PhotoModeOptionType
{
	PhotoOption_CameraMode                             = 0,
	PhotoOption_Roll                                   = 1,
	PhotoOption_FocalLength                            = 2,
	PhotoOption_DOF                                    = 3,
	PhotoOption_DOFDistance                            = 4,
	PhotoOption_FStop                                  = 5,
	PhotoOption_DOFIntensity                           = 6,
	PhotoOption_Saturation                             = 7,
	PhotoOption_Brightness                             = 8,
	PhotoOption_Contrast                               = 9,
	PhotoOption_Filters                                = 10,
	PhotoOption_BloomIntensity                         = 11,
	PhotoOption_BloomThreshold                         = 12,
	PhotoOption_FilmGrain                              = 13,
	PhotoOption_FilmGrainStrength                      = 14,
	PhotoOption_Vignette                               = 15,
	PhotoOption_HidePlayer                             = 16,
	PhotoOption_HideParty                              = 17,
	PhotoOption_HideEnemies                            = 18,
	PhotoOption_HideNPCs                               = 19,
	PhotoOption_HideVehicle                            = 20,
	PhotoOption_MAX                                    = 21
};*/

// Enum SFXGame.SFXSFHandler_Reticle.SFXReticleCrosshair
/*enum SFXReticleCrosshair
{
	SFXRC_None                                         = 0,
	SFXRC_Standard                                     = 1,
	SFXRC_HeavyWeapon                                  = 2,
	SFXRC_Sniper                                       = 3,
	SFXRC_COUNT                                        = 4,
	SFXRC_MAX                                          = 5
};*/

// Enum SFXGame.SFXShield_Base.ResistanceType
/*enum ResistanceType
{
	ResistanceType_Shield                              = 0,
	ResistanceType_Armour                              = 1,
	ResistanceType_Biotic                              = 2,
	ResistanceType_MAX                                 = 3
};*/

// Enum SFXGame.SFXTelemetry.ETelemetryGameDataType
/*enum ETelemetryGameDataType
{
	GameDataType_Load                                  = 0,
	GameDataType_Save                                  = 1,
	GameDataType_AutoSave                              = 2,
	GameDataType_ChapterSave                           = 3,
	GameDataType_EndGame                               = 4,
	GameDataType_Unknown                               = 5,
	GameDataType_MAX                                   = 6
};*/

// Enum SFXGame.SFXTelemetry.ETelemetryLogoutReason
/*enum ETelemetryLogoutReason
{
	LogoutStatus_Normal                                = 0,
	LogoutStatus_Error                                 = 1,
	LogoutStatus_OptOutTelemetry                       = 2,
	LogoutStatus_Unknown                               = 3,
	LogoutStatus_MAX                                   = 4
};*/

// Enum SFXGame.SFXTelemetry.ETelemetryLoginStatus
/*enum ETelemetryLoginStatus
{
	LoginStatus_Success                                = 0,
	LoginStatus_Error                                  = 1,
	LoginStatus_Cancel                                 = 2,
	LoginStatus_Unknown                                = 3,
	LoginStatus_MAX                                    = 4
};*/

// Enum SFXGame.SFXTelemetry.EBootEndReason
/*enum EBootEndReason
{
	BootEndReason_Normal                               = 0,
	BootEndReason_Error                                = 1,
	BootEndReason_OptOutTelemetry                      = 2,
	BootEndReason_Unknown                              = 3,
	BootEndReason_MAX                                  = 4
};*/

// Enum SFXGame.SFXTelemetryGameSession.EGameEndReason
/*enum EGameEndReason
{
	GameEndReason_Leave                                = 0,
	GameEndReason_GameEnd                              = 1,
	GameEndReason_Restart                              = 2,
	GameEndReason_Error                                = 3,
	GameEndReason_OptOutTelemetry                      = 4,
	GameEndReason_Unknown                              = 5,
	GameEndReason_MAX                                  = 6
};*/

// Enum SFXGame.SFXTracer.ESFXTracerScaling
/*enum ESFXTracerScaling
{
	eSFXTracerScaling_Idle                             = 0,
	eSFXTracerScaling_Up                               = 1,
	eSFXTracerScaling_Down                             = 2,
	eSFXTracerScaling_MAX                              = 3
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class SFXGame.Bio_Appr_Character_Base_Settings
// 0x0004 (0x0074 - 0x0070)
class UBio_Appr_Character_Base_Settings : public UComponent
{
public:
	unsigned long                                      m_bIsShowingMissingResources : 1;                 		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Character_Body_Settings
// 0x0016 (0x008A - 0x0074)
class UBio_Appr_Character_Body_Settings : public UBio_Appr_Character_Base_Settings
{
public:
	class UBio_Appr_Character_HeadGear_Settings*       m_oHeadGearSettings;                              		// 0x0074 (0x0008) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	int                                                m_nModelVariant;                                  		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nMaterialConfig;                                		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsHeadGearLoaded : 1;                          		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bIsHeadGearHidden : 1;                          		// 0x0084 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      m_eArmorType;                                     		// 0x0088 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eVisualOverride;                                		// 0x0089 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Character_Hair_Settings
// 0x0004 (0x0078 - 0x0074)
class UBio_Appr_Character_Hair_Settings : public UBio_Appr_Character_Base_Settings
{
public:
	int                                                m_nMaterial;                                      		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Character_Head_Settings
// 0x0010 (0x0084 - 0x0074)
class UBio_Appr_Character_Head_Settings : public UBio_Appr_Character_Base_Settings
{
public:
	class UBio_Appr_Character_Hair_Settings*           m_oHairSettings;                                  		// 0x0074 (0x0008) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	int                                                m_nMaterialConfig;                                		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nHairAppearance;                                		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Character_HeadGear_Settings
// 0x0025 (0x0099 - 0x0074)
class UBio_Appr_Character_HeadGear_Settings : public UBio_Appr_Character_Base_Settings
{
public:
	struct FBioHeadGearComponentSettings               m_visor;                                          		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FBioHeadGearComponentSettings               m_facePlate;                                      		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nModelSpec;                                     		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nMaterialConfig;                                		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bUseBodyMaterialConfig : 1;                     		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      m_eVisualOverride;                                		// 0x0098 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Character_Settings
// 0x0018 (0x008C - 0x0074)
class UBio_Appr_Character_Settings : public UBio_Appr_Character_Base_Settings
{
public:
	class UBio_Appr_Character_Body_Settings*           m_oBodySettings;                                  		// 0x0074 (0x0008) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UBio_Appr_Character_Head_Settings*           m_oHeadSettings;                                  		// 0x007C (0x0008) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	int                                                m_nHeadAppearance;                                		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsHeadHidden : 1;                              		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bIsHeadLoaded : 1;                              		// 0x0088 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioDestinationArrow
// 0x000A (0x0294 - 0x028A)
class ABioDestinationArrow : public AActor
{
public:
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x028C (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventSetArrowColor ( unsigned char clr );
};

// Class SFXGame.BioHardLinks
// 0x0010 (0x0070 - 0x0060)
class UBioHardLinks : public UObject
{
public:
	struct TArray<struct FBioHardLinkReference>        References;                                       		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioHintSystemBase
// 0x0100 (0x0160 - 0x0060)
class UBioHintSystemBase : public UObject
{
public:
	struct FSFXNotification                            m_nCurrentlyDisplayedNotification;                		// 0x0060 (0x006C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FHintDefinition>              m_aHints;                                         		// 0x00CC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FSFXNotification>             m_aNotifications;                                 		// 0x00DC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FSFXNotificationData>         m_NotificationData;                               		// 0x00EC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x00FC (0x0048) UNKNOWN PROPERTY: MapProperty SFXGame.BioHintSystemBase.m_mTrackingData
	class UTexture2D*                                  m_DefaultImage;                                   		// 0x0144 (0x0008) [0x0000000000000000]              
	int                                                nNotificationBodyLength;                          		// 0x014C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMinimumTimeBetweenAnyHints;                    		// 0x0150 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fCurrentTime;                                   		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCurrentlyDisplayedHint;                        		// 0x0158 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bEnabled : 1;                                   		// 0x015C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_bDisabledForTutorial : 1;                       		// 0x015C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bNotificationIsPaused : 1;                      		// 0x015C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bNotificationIsVisible : 1;                     		// 0x015C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventTruncateNotificationBody ( struct FString sBody );
	void eventCacheCurrentState ( );
	void Tick ( float TimeDelta );
	float TimeSince ( float fTime );
	float GetPreviousTime ( int nAge, struct FHintTrackingData* oData );
	struct FHintTrackingData GetTrackingData ( struct FName nmEvent, struct FName nmContext );
	void Clear ( );
	void HintEvent ( struct FName nmEvent, struct FName nmContext );
	void ClearNotifications ( );
	void OnNotificationCompleted ( );
	bool eventIsHintsOptionDisabled ( );
	void SetNotificationPaused ( unsigned long bVal );
	void eventJournalUpdate ( int srTitle, int srDescription );
	void eventCodexUpdate ( int srTitle, int srDescription );
	void PopulateNotificationOneParameter ( int nParam1, struct FSFXNotificationData* oNoteData, struct FSFXNotification* oNotification );
	struct FSFXNotificationData GetNotificationData ( struct FName nmNotificationType );
	void ShowNotification ( struct FSFXNotification* oNotification );
	void AddNotification_Custom ( float nDisplayTime, struct FString sTitle, struct FString sSubtitle, struct FString sBody, class UTexture* Image, struct FName nRemoteEvent, struct FName nmType, struct FName nmSound, int Priority, int FlourishID );
	void AddNotification_AchievementUnlocked ( struct FAchievementData* Data, struct FGrinderAchievement* Grinder );
	void AddNotification_AchievementChange ( struct FString sTitle, struct FString sSubtitle, struct FString sBody, int currentCount, int totalCount );
	void AddNotification_AmmoRecovery ( int nAmount );
	void AddNotification_HeavyWeaponAmmoRecovery ( int nAmount );
	void AddNotification_ElementZeroRecovery ( int nAmount );
	void AddNotification_PlatinumRecovery ( int nAmount );
	void AddNotification_PalladiumRecovery ( int nAmount );
	void AddNotification_IridiumRecovery ( int nAmount );
	void AddNotification_RenegadeChange ( int nAmount );
	void AddNotification_ParagonChange ( int nAmount );
	void AddNotification_MedigelRecovery ( int nAmount );
	void AddNotification_CreditRecovery ( int nAmount );
	void AddNotification_CodexChange ( );
	void AddNotification_JournalChange ( );
	void AddNotification ( struct FSFXNotification* oNotification );
};

// Class SFXGame.BioLayers
// 0x0028 (0x0094 - 0x006C)
class UBioLayers : public UBioBaseComponent
{
public:
	float                                              m_aEntry[ 0xA ];                                  		// 0x006C (0x0028) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioLevelUpSystem
// 0x0010 (0x0070 - 0x0060)
class UBioLevelUpSystem : public UObject
{
public:
	class UBio2DA*                                     m_aLevelUp2DA[ 0x2 ];                             		// 0x0060 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventAutoLevelUpPowers ( class ABioPawn* Pawn );
	bool AttemptLevelUp ( class ABioPlayerSquad* Squad );
	bool ExperienceNeededForLevel ( int Level, int* experience );
	bool LevelUpPawn ( class ABioPawn* Pawn, int newLevel );
};

// Class SFXGame.BioLoadingMovie
// 0x001C (0x007C - 0x0060)
class UBioLoadingMovie : public UObject
{
public:
	struct FString                                     MovieName;                                        		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UWwiseEventPairObject*                       LoadingMovieWwisePair;                            		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                LoopBackFrame;                                    		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPhysicsSounds
// 0x0014 (0x0074 - 0x0060)
class UBioPhysicsSounds : public UObject
{
public:
	float                                              m_fMaxMass;                                       		// 0x0060 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMaxSpeed;                                      		// 0x0064 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMinTimeBetweenSoundByActor;                    		// 0x0068 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMinSpeedToPlay;                                		// 0x006C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bEnableLogging : 1;                             		// 0x0070 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetSpeedSpecifier ( class UPrimitiveComponent* oComp, float fSpeedToUse );
	float GetMassSpecifier ( class UPrimitiveComponent* oComp );
	void UpdateLastCollidedActor ( class UPrimitiveComponent* oComp, class AActor* OtherActor );
	void UpdateLastTimePlayed ( class UPrimitiveComponent* oComp );
	bool IsTooSlowToPlay ( class UPrimitiveComponent* oComp );
	bool IsSameCollidedActor ( class UPrimitiveComponent* oComp, class AActor* OtherActor );
	bool IsTooSoonToPlay ( class UPrimitiveComponent* oComp );
	bool CanPlay ( class UPrimitiveComponent* oComp0, class UPrimitiveComponent* oComp1, struct FCollisionImpactData* RigidCollisionData );
	int GetPhysMatWwiseType ( class UPhysicalMaterial* PhysMat );
	class UWwiseEvent* GetWwiseEvent ( class UPhysicalMaterial* PhysMat );
	void eventPlaySoundOnPhysMatAt ( class AGameInfo* Game, class UPhysicalMaterial* PhysMat, class UPhysicalMaterial* PhysMatSweetener, struct FVector pos, struct TArray<struct FString> RTPCNames, struct TArray<float> RTPCValues );
};

// Class SFXGame.BioPlaypenVolume
// 0x0014 (0x02E0 - 0x02CC)
class ABioPlaypenVolume : public AVolume
{
public:
	struct FGuid                                       PlaypenGuid;                                      		// 0x02CC (0x0010) [0x0000000000220003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bSubtractive : 1;                                 		// 0x02DC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPlotTreasure
// 0x0018 (0x0078 - 0x0060)
class UBioPlotTreasure : public UObject
{
public:
	class UBio2DA*                                     oPlotTreasureResources2DA;                        		// 0x0060 (0x0008) [0x0000000000000000]              
	class UBio2DA*                                     oPlotTreasureTreasure2DA;                         		// 0x0068 (0x0008) [0x0000000000000000]              
	class UBio2DA*                                     oPlotTreasureTech2DA;                             		// 0x0070 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool GetMapName ( struct FString* sOutMapName );
	bool GetPlotTreasureTechInt ( struct FName nmTech, struct FName nmNameHeader, struct FName nmHeader, int* nTechValue );
	bool GetPlotTreasureTechName ( struct FName nmTech, struct FName nmHeader, struct FName* nmTechName );
	bool GetPlotTreasureTreasureName ( int nTreasureId, struct FName nmHeader, struct FName* nmPlotTreasureName );
	bool GetPlotTreasureTreasureInt ( int nTreasureId, struct FName nmHeader, int* nPlotTreasureValue );
	bool GetPlotTreasureResourcesInt ( struct FName nmLevel, struct FName nmHeader, int* nPlotTreasureValue );
};

// Class SFXGame.BioProceduralCameraBasic
// 0x0000 (0x0060 - 0x0060)
class UBioProceduralCameraBasic : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void FixedCamera ( struct FActorInfo stActorInfo, unsigned long bInvert, struct FCameraInfo* stCameraInfo );
};

// Class SFXGame.BioRadarMapBoundaries
// 0x000E (0x0298 - 0x028A)
class ABioRadarMapBoundaries : public AActor
{
public:
	struct FVector                                     m_vBoundarySize;                                  		// 0x028C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSFResources
// 0x0044 (0x00A4 - 0x0060)
class UBioSFResources : public UObject
{
public:
	struct TArray<struct FBioSFSoundAssetResource>     Sounds;                                           		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UBioSFScreenTip*>              LoadScreenTips;                                   		// 0x0070 (0x0010) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UGFxMovieInfo*>                Movies;                                           		// 0x0080 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FBioSFScreenTipEntry>         BioScreenTipEntries;                              		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bUsingGamepad : 1;                                		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetUsingGamepad ( unsigned long gamepad );
	void PopulateBioScreenTipEntries ( );
};

// Class SFXGame.BioSocketSupermodel
// 0x0010 (0x0434 - 0x0424)
class UBioSocketSupermodel : public USkeletalMesh
{
public:
	struct TArray<class USkeletalMesh*>                Dependents;                                       		// 0x0424 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioTacticalMoveToIndicator
// 0x0012 (0x029C - 0x028A)
class ABioTacticalMoveToIndicator : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystem;                                   		// 0x028C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_fFadeInTime;                                    		// 0x0294 (0x0004) [0x0000000000000000]              
	float                                              m_fTimePassed;                                    		// 0x0298 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXActorFactoryRigidBody
// 0x0003 (0x00D4 - 0x00D1)
class USFXActorFactoryRigidBody : public UActorFactoryRigidBody
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioActorFactoryPhysicsActor
// 0x0000 (0x00D4 - 0x00D4)
class UBioActorFactoryPhysicsActor : public USFXActorFactoryRigidBody
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType
// 0x0051 (0x0111 - 0x00C0)
class USFXDamageType : public UDamageType
{
public:
	struct TArray<struct FHitReaction>                 HitReactions;                                     		// 0x00C0 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FResistanceInfo                             Resistance;                                       		// 0x00D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      ShieldHitFFWaveform;                              		// 0x00DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             DeathEffect;                                      		// 0x00E4 (0x0008) [0x0000000000000000]              
	class UBioVFXTemplate*                             PlayerFrameBufferEffect;                          		// 0x00EC (0x0008) [0x0000000000000000]              
	float                                              DamageRadius;                                     		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              ShieldBonus;                                      		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ArmorBonus;                                       		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fChanceOfRagdoll;                                 		// 0x0100 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              fPhysicsReactionTimeScale;                        		// 0x0104 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                HeavyWeaponId;                                    		// 0x0108 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bRadiusDamage : 1;                                		// 0x010C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSpawnWeaponImpacts : 1;                          		// 0x010C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNoShieldBreakVFX : 1;                            		// 0x010C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIgnoreShields : 1;                               		// 0x010C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIgnoreShieldHitLimit : 1;                        		// 0x010C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bPartBasedDamageDisabled : 1;                     		// 0x010C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bIgnoreArmor : 1;                                 		// 0x010C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bHealthDamage : 1;                                		// 0x010C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDamagesFriends : 1;                              		// 0x010C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bIgnoresBleedout : 1;                             		// 0x010C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bCausesPhysicsImpact : 1;                         		// 0x010C (0x0004) [0x0000000000004001] [0x00000400] ( CPF_Edit | CPF_Config )
	unsigned long                                      bCausesRagdoll : 1;                               		// 0x010C (0x0004) [0x0000000000004001] [0x00000800] ( CPF_Edit | CPF_Config )
	unsigned long                                      bResearchBonus_SniperArmorDamage : 1;             		// 0x010C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bResearchBonus_HeavyPistolArmorDamage : 1;        		// 0x010C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bResearchBonus_AssaultRifleResistanceDamage : 1;  		// 0x010C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bResearchBonus_AutoPistolResistanceDamage : 1;    		// 0x010C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bResearchBonus_ShotgunResistanceDamage : 1;       		// 0x010C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bResearchBonus_SniperHeadShotBonus : 1;           		// 0x010C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bImmediateDeath : 1;                              		// 0x010C (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bIgnoresCoverDirection : 1;                       		// 0x010C (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned char                                      FalloffType;                                      		// 0x0110 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float eventGetWeaponRange ( class UClass* Weapon, unsigned char Range );
};

// Class SFXGame.SFXDamageType_Suicide
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_Suicide : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDoorMarker
// 0x0010 (0x039C - 0x038C)
class ASFXDoorMarker : public ANavigationPoint
{
public:
	class ASFXDoor*                                    MyDoor;                                           		// 0x038C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                nUnblockCount;                                    		// 0x0394 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bWaitUntilCompletelyOpened : 1;                   		// 0x0398 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInitiallyClosed : 1;                             		// 0x0398 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockedWhenClosed : 1;                           		// 0x0398 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDoorOpen : 1;                                    		// 0x0398 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bTempDisabledCollision : 1;                       		// 0x0398 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	unsigned long                                      bPrevBlockedState : 1;                            		// 0x0398 (0x0004) [0x0000000000002002] [0x00000020] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventSuggestMovePreparation ( class APawn* Other );
	bool ProceedWithMove ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void DoorClosed ( );
	void DoorOpened ( );
	void eventPostBeginPlay ( );
	int RestoreDoorMarkerBlockedState ( );
	int UnblockDoorMarker ( );
};

// Class SFXGame.SFXEngine
// 0x022C (0x0C45 - 0x0A19)
class USFXEngine : public UGameEngine
{
public:
	struct FUniqueNetId                                m_oInitialPlayerID;                               		// 0x0A1C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FUniqueNetId                                m_oProfilePlayerID;                               		// 0x0A24 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FPlayerInfoEx                               DefaultPlayer;                                    		// 0x0A2C (0x0040) [0x0000000000406000]              ( CPF_Transient | CPF_Config | CPF_NeedCtorLink )
	struct FPlayerInfoEx                               NewPlayer;                                        		// 0x0A6C (0x0040) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FBlazeDataStore                             BlazeCache;                                       		// 0x0AAC (0x0028) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FGuid>                        DeadPawnList;                                     		// 0x0AD4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FKismetBoolSaveRecord>        SavedKismetList;                                  		// 0x0AE4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FHenchmanSaveRecord>          HenchmanRecords;                                  		// 0x0AF4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FDoorSaveRecord>              SavedDoorList;                                    		// 0x0B04 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FString>                      CorruptedCareers;                                 		// 0x0B14 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FSFXCareerCacheEntry>         CareerCache;                                      		// 0x0B24 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScriptDelegate                             ResumeGameCompleteDelegate;                       		// 0x0B34 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FDynamicLoadInfo>             DynamicLoadMapping;                               		// 0x0B44 (0x0010) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FPackageRemapInfo>            DynamicLoadPackageRemapping;                      		// 0x0B54 (0x0010) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct TArray<int>                                 AsyncLoadingMapping;                              		// 0x0B64 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __SFXSaveCommandCallback__Delegate;               		// 0x0B74 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnResumeGameComplete__Delegate;                 		// 0x0B84 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       PlayerLoadoutWeapons[ 0x6 ];                      		// 0x0B94 (0x0030) [0x0000000000000000]              
	struct FME1ImportBonusSaveRecord                   ME1ImportBonuses;                                 		// 0x0BC4 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	class USFXSaveGame*                                CurrentSaveGame;                                  		// 0x0BE0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USFXLegacyData*                              ME1ImportData;                                    		// 0x0BE8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USFXSaveGame*                                ME2ImportSaveGame;                                		// 0x0BF0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USFXTelemetry*                               Telemetry;                                        		// 0x0BF8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_DesiredStartPoint;                              		// 0x0C00 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXLoadMovieManager*                        LoadMovieManager;                                 		// 0x0C08 (0x0008) [0x0000000004402009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	float                                              LastSaveTime;                                     		// 0x0C10 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastSecondsPlayed;                                		// 0x0C14 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentUserID;                                    		// 0x0C18 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentDeviceID;                                  		// 0x0C1C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentLoadingTip;                                		// 0x0C20 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AutoSaveInsufficientSpaceTextPS3;                 		// 0x0C24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InsufficentSpaceAcknowledgedText;                 		// 0x0C28 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CorruptCareerWarningText;                         		// 0x0C2C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                ConfirmDeleteCorruptText;                         		// 0x0C30 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CancelDeleteCorruptText;                          		// 0x0C34 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              LastCantContinueTime;                             		// 0x0C38 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                srCantContinueErrorMessage;                       		// 0x0C3C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bCanWriteSaveToStorage : 1;                       		// 0x0C40 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPendingSaveProfile : 1;                          		// 0x0C40 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bPendingDisableAutoSave : 1;                      		// 0x0C40 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bFlushInputRequested : 1;                         		// 0x0C40 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bPlayerNeedsLoad : 1;                             		// 0x0C40 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bPlayerLoadPosition : 1;                          		// 0x0C40 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bRenderingSuspended : 1;                        		// 0x0C40 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bInLoad : 1;                                    		// 0x0C40 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bProfileInitialized : 1;                        		// 0x0C40 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_UseDesiredStartPoint : 1;                       		// 0x0C40 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bNewPlayer : 1;                                   		// 0x0C40 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bStartedGame : 1;                                 		// 0x0C40 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      IsDebuggingCharactionCreation : 1;                		// 0x0C40 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      DebugCharacterIsMale : 1;                         		// 0x0C40 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      DebugUseIconicShepard : 1;                        		// 0x0C40 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned char                                      PendingModeToRemove;                              		// 0x0C44 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventClearInitialTelemetryHandler ( );
	void eventAddInitialTelemetryHandler ( );
	void SendTelemetryOnProfileReadComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void FlushIOHandles ( );
	void BioShowDebugMessageBox ( struct FString sMessage );
	bool FindCurrentSaveDevice ( );
	bool IsCurrentDeviceValid ( );
	void ForceGUIUpdate ( );
	float GetCurrentTime ( );
	float GetPlayTimeSeconds ( );
	void LoadPlayer ( );
	int GetCurrentDevice ( );
	void UpdateCurrentDevice ( int DeviceID );
	void SlowResumeGameCallback ( struct FSFXSaveGameCommandEventArgs Args );
	void FastResumeGameCallback ( struct FSFXSaveGameCommandEventArgs Args );
	void ResumeGame ( struct FScriptDelegate Callback );
	class USFXProfileSettings* GetProfileSettings ( );
	class UMassEffectGuiManager* GetScaleFormManager ( );
	void HandleNoFreeSpacePS3Callback ( unsigned long bAPressed, int context );
	void HandleNoFreeSpacePS3 ( unsigned char Type, int AdditionalFreeBytesNeeded );
	void SetCurrentSaveGame ( struct FSFXSaveDescriptor Descriptor );
	void SaveGameCallback ( struct FSFXSaveGameCommandEventArgs Args );
	void UpdateCurrentSaveGame ( struct FSFXSaveDescriptor SaveDescriptor );
	void SaveGameEx ( struct FSFXSaveDescriptor SaveDescriptor );
	void CheckForCorruptCareers ( );
	bool RemoveCachedCareer ( struct FString Career );
	void ResumeRendering ( );
	void SuspendRendering ( );
	void Callback_ConfirmDeleteCorruptCareers ( unsigned long bAPressed, int context );
	void ClearSaveCache ( );
	struct FString ValidCharsFilter ( struct FString Sin, unsigned long bFilterAccentedChars );
	void CacheProfileData ( class USFXProfileSettings* Profile );
	void LoadSaveGame ( class USFXSaveGame* SaveGame );
	bool IsPerformingSaveAction ( unsigned char eAction );
	bool IsSaving ( );
	void ScanSaveDataComplete ( struct FSFXSaveGameCommandEventArgs Args );
	void ScanSaveData ( );
	bool TryGetCachedCareer ( struct FString Career, struct FSFXCareerCacheEntry* OutEntry );
	void UpdateCareerCache ( struct FSFXSaveDescriptor SaveDescriptor, class USFXSaveGame* SaveGame );
	void ImportME2Character ( class USFXSaveGame* SaveGame );
	void ImportME1Character ( class USFXSaveGame* SaveGame );
	void ResumeSaveGameCommandExecution ( );
	void QueueSaveGameCommand ( unsigned char Action, struct FSFXSaveDescriptor SaveDescriptor, struct FScriptDelegate Callback );
	void ClearCurrentSaveDescriptor ( );
	struct FSFXSaveDescriptor GetCurrentSaveDescriptor ( );
	bool ParseCareer ( struct FString Career, struct FString* FirstName, struct FString* ClassName, unsigned char* Origin, unsigned char* Notoriety, int* Year, int* Month, int* Day, int* MSSinceMidnight );
	void GenerateCareer ( struct FString FirstName, struct FString ClassName, unsigned char Origin, unsigned char Notoriety, int Year, int Month, int Day, int MSSinceMidnight, struct FString* OutCareer, struct FString* OutDisplayName );
	void CreateCareerInternal ( struct FString FirstName, struct FString ClassName, unsigned char Origin, unsigned char Notoriety, int Year, int Month, int Day, int MSSinceMidnight );
	void CreateCareer ( struct FString FirstName, int srClass, unsigned char Origin, unsigned char Notoriety );
	void OnResumeGameComplete ( unsigned long bWasSuccessful );
	void SFXSaveCommandCallback ( struct FSFXSaveGameCommandEventArgs Args );
	float CurrentSystemTimeSeconds ( );
	void ReleaseSeekFreeObject ( struct FString ObjectName );
	class UObject* LoadSeekFreeObjectAsync ( struct FString Object, class UClass* ObjectClass, unsigned char* Status );
	class UObject* LoadSeekFreeObject ( struct FString ObjectName, class UClass* ObjectClass );
	bool IsSeekFreeObjectSupported ( struct FString ObjectName );
	void LaunchUnreaperWithDiscCheck ( );
	void LaunchUnreaper ( );
	void ReLaunchExecutable ( );
	void SkipMovie ( );
	void ResetForcedInactiveParticleSystems ( );
	class USFXEngine* GetEngine ( );
	struct FPlayerInfoEx CurrentPlayerInfo ( );
};

// Class SFXGame.SFXGalaxyMapObject
// 0x003E (0x009E - 0x0060)
class USFXGalaxyMapObject : public UObject
{
public:
	struct FString                                     Tag;                                              		// 0x0060 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                PosX;                                             		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                PosY;                                             		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                TableID;                                          		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DisplayName;                                      		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Scale;                                            		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nPreviouslySelectedIndex;                         		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                VisibleConditional;                               		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                VisibleParameter;                                 		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                UsableConditional;                                		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                UsableParameter;                                  		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      VisibleConditionalRegion;                         		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      VisibleConditionalPlot;                           		// 0x0099 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      VisibleConditionalName;                           		// 0x009A (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UsableConditionalRegion;                          		// 0x009B (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UsableConditionalPlot;                            		// 0x009C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UsableConditionalName;                            		// 0x009D (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventEnumerateChildren ( );
	void eventGetChildren ( struct TArray<class USFXGalaxyMapObject*>* Children );
	void eventRemoveChild ( class USFXGalaxyMapObject* Child );
	class USFXGalaxyMapObject* eventAddChild ( );
};

// Class SFXGame.BioPlanet
// 0x011E (0x01BC - 0x009E)
class UBioPlanet : public USFXGalaxyMapObject
{
public:
	struct TArray<struct FPlanetSun>                   Suns;                                             		// 0x00A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class USFXPlanetFeature*>            Features;                                         		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MapName;                                          		// 0x00C0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ImageBackground;                                  		// 0x00D0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     PlanetEvent;                                      		// 0x00E0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FLinearColor                                RingColor;                                        		// 0x00F0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CloudColor;                                       		// 0x0100 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CoronaColor;                                      		// 0x0110 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UGFxMovieInfo*                               PreviewImageResource;                             		// 0x0120 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   PlanetMaterial;                                   		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   CloudMaterial;                                    		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPrefab*                                     ScenePrefab;                                      		// 0x0138 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  TextureParam;                                     		// 0x0140 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                Description;                                      		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ButtonLabel;                                      		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MissionBriefing;                                  		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ResourceRichness;                                 		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlanetRotation;                                   		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Opacity;                                          		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FringeBloom;                                      		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RelativeSize;                                     		// 0x0164 (0x0004) [0x0000000000000000]              
	float                                              DefaultDisplaySize;                               		// 0x0168 (0x0004) [0x0000000000000000]              
	float                                              TerrainDepthFactor;                               		// 0x016C (0x0004) [0x0000000000000000]              
	float                                              UnscaledMineralsSum;                              		// 0x0170 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PlacedMineralsPool;                               		// 0x0174 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RandomMineralsBase;                               		// 0x0178 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EezoMineralsBase;                                 		// 0x017C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ScanBarMaxMineralSize;                            		// 0x0180 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                PlanetLandCondition;                              		// 0x0184 (0x0004) [0x0000000000000000]              
	int                                                PlanetEventCondition;                             		// 0x0188 (0x0004) [0x0000000000000000]              
	int                                                PlanetEventParameter;                             		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PlanetEventTransition;                            		// 0x0190 (0x0004) [0x0000000000000000]              
	int                                                PlanetEventTransitionParameter;                   		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PlanetEventMessage;                               		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PlanetPlotLabel;                                  		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PlanetPlotLabelCondition;                         		// 0x01A0 (0x0004) [0x0000000000000000]              
	int                                                ActiveWorld;                                      		// 0x01A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      AlreadyExplored : 1;                              		// 0x01A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInitialized : 1;                                 		// 0x01A8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned char                                      PlanetType;                                       		// 0x01AC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      OrbitRing;                                        		// 0x01AD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SystemLevelType;                                  		// 0x01AE (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetLevelType;                                  		// 0x01AF (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetLandConditionRegion;                        		// 0x01B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetLandConditionPlot;                          		// 0x01B1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetLandConditionName;                          		// 0x01B2 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetEventConditionRegion;                       		// 0x01B3 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetEventConditionPlot;                         		// 0x01B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetEventConditionName;                         		// 0x01B5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetEventTransitionRegion;                      		// 0x01B6 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetEventTransitionPlot;                        		// 0x01B7 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetEventTransitionName;                        		// 0x01B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetPlotLabelConditionRegion;                   		// 0x01B9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetPlotLabelConditionPlot;                     		// 0x01BA (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlanetPlotLabelConditionName;                     		// 0x01BB (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventEnumerateChildren ( );
	int eventGetScaledResourceAmount ( unsigned char MineralType, float UnscaledAmount );
	void RemoveChild ( class USFXGalaxyMapObject* Child );
	void GetChildren ( struct TArray<class USFXGalaxyMapObject*>* Children );
	class USFXGalaxyMapObject* AddChild ( );
	struct FVector SphereToPlanePos ( struct FVector vSphere, float SphereRadius );
	struct FVector PlanePosToSphere ( struct FVector vPosition2D, float SphereRadius );
	float GetPlanetSize ( );
	void LoadPlanetData ( class AInterpActor* Planet, struct TArray<class UParticleSystemComponent*>* TemporaryComponents );
	void LoadProbeImpacts ( struct TArray<struct FVector>* vImpacts );
	void SaveProbeImpact ( struct FVector vImpact );
	void SetVisited ( unsigned long bVisited );
	bool IsVisited ( );
	void SetupMinerals ( );
};

// Class SFXGame.SFXCluster
// 0x005E (0x00FC - 0x009E)
class USFXCluster : public USFXGalaxyMapObject
{
public:
	struct TArray<class USFXSystem*>                   Systems;                                          		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class USFXCluster*>                  RelayConnections;                                 		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FLinearColor                                StarColor;                                        		// 0x00C0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                StarColor2;                                       		// 0x00D0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  ClusterTexture;                                   		// 0x00E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              NebularDensity;                                   		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CloudTile;                                        		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereIntensity;                                  		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereSize;                                       		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ExploredCluster : 1;                              		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RemoveChild ( class USFXGalaxyMapObject* Child );
	void GetChildren ( struct TArray<class USFXGalaxyMapObject*>* Children );
	class USFXGalaxyMapObject* AddChild ( );
};

// Class SFXGame.SFXGalaxy
// 0x0012 (0x00B0 - 0x009E)
class USFXGalaxy : public USFXGalaxyMapObject
{
public:
	struct TArray<class USFXCluster*>                  Clusters;                                         		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void GetChildren ( struct TArray<class USFXGalaxyMapObject*>* Children );
	void RemoveChild ( class USFXGalaxyMapObject* Child );
	class USFXGalaxyMapObject* AddChild ( );
};

// Class SFXGame.SFXPlanetFeature
// 0x004B (0x00E9 - 0x009E)
class USFXPlanetFeature : public USFXGalaxyMapObject
{
public:
	struct FString                                     RTPCName;                                         		// 0x00A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     Position;                                         		// 0x00B0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseBaseSoundObject*                       StartEvent;                                       		// 0x00BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       StopEvent;                                        		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    ParticleComponent;                                		// 0x00CC (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              Amount;                                           		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FeatureTransition;                                		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                FeatureTransitionParameter;                       		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ScaledAmount;                                     		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      FeatureType;                                      		// 0x00E4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MineralType;                                      		// 0x00E5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FeatureTransitionRegion;                          		// 0x00E6 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FeatureTransitionPlot;                            		// 0x00E7 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FeatureTransitionName;                            		// 0x00E8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSystem
// 0x0046 (0x00E4 - 0x009E)
class USFXSystem : public USFXGalaxyMapObject
{
public:
	struct TArray<class UBioPlanet*>                   Planets;                                          		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FLinearColor                                SunColor;                                         		// 0x00B0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                StarColor;                                        		// 0x00C0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                FlareTint;                                        		// 0x00D0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bHasMassRelay : 1;                              		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bShowNebula : 1;                                		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RemoveChild ( class USFXGalaxyMapObject* Child );
	void GetChildren ( struct TArray<class USFXGalaxyMapObject*>* Children );
	class USFXGalaxyMapObject* AddChild ( );
};

// Class SFXGame.SFXGame
// 0x00DC (0x0594 - 0x04B8)
class ASFXGame : public AGameInfo
{
public:
	struct FString                                     MaleActorType;                                    		// 0x04B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FemaleActorType;                                  		// 0x04C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MaleCustomHead;                                   		// 0x04D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FemaleCustomHead;                                 		// 0x04E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FHenchPackageMap>             HenchmanPackageMap;                               		// 0x04F8 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FTimeDilationStruct>          TimeDilationCurves;                               		// 0x0508 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FName>                        NGPlusPlotVariables;                              		// 0x0518 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      Difficulty;                                       		// 0x0528 (0x0008) [0x0000000000000000]              
	class USFXGameConfig*                              gameconfig;                                       		// 0x0530 (0x0008) [0x0000000000000000]              
	class ASFXObjectPool*                              ObjectPool;                                       		// 0x0538 (0x0008) [0x0000000000000000]              
	class ASFXVocalizationManager*                     VocManager;                                       		// 0x0540 (0x0008) [0x0000000000000000]              
	class USFXOnlineSubsystem*                         SFXOnlineSubsystem;                               		// 0x0548 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioPlayerSquad*                             PlayerSquad;                                      		// 0x0550 (0x0008) [0x0000000000000000]              
	class UWwiseEvent*                                 StartSlowEvent;                                   		// 0x0558 (0x0008) [0x0000000000000000]              
	class UWwiseEvent*                                 StopSlowEvent;                                    		// 0x0560 (0x0008) [0x0000000000000000]              
	class USFXBonusList*                               BonusList;                                        		// 0x0568 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              PhysicsDamageMultiplier;                          		// 0x0570 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StormStamina;                                     		// 0x0574 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StormRegen;                                       		// 0x0578 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StormStaminaNonCombat;                            		// 0x057C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StormRegenNonCombat;                              		// 0x0580 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              HackCrouchCoverOffset;                            		// 0x0584 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fAutoUnlitDownsizeThreshold;                      		// 0x0588 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              TimeDilationOverride;                             		// 0x058C (0x0004) [0x0000000000000000]              
	unsigned long                                      EnableDamage : 1;                                 		// 0x0590 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bMin1Health : 1;                                  		// 0x0590 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bInCombat : 1;                                    		// 0x0590 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bForceCombat : 1;                                 		// 0x0590 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bAutoUnlitDownsizeInCombat : 1;                   		// 0x0590 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bGenerateTutorialEvents : 1;                      		// 0x0590 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bShowSquadScreenMessageBoxes : 1;                 		// 0x0590 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RestartPlayer ( class AController* NewPlayer );
	void PulseFullAmmoMessage ( );
	void StartMatch ( );
	void SetNGPlusPlotStates ( );
	void EnumeratePersonalizationVars ( struct TArray<int>* Vars );
	void AddCustomElementListPlotVars ( struct TArray<struct FCustomizableElement>* Elements, struct TArray<int>* Vars );
	void OnGameCompleted ( int nEndID );
	void SetRenegadePoints ( int nPoints );
	int GetRenegadePoints ( );
	void SetParagonPoints ( int nPoints );
	int GetParagonPoints ( );
	struct FImpactInfo CalcWeaponFire ( class AWeapon* W, struct FVector* StartTrace, struct FVector* EndTrace, struct TArray<struct FImpactInfo>* ImpactList );
	void OnPlayerSquadDeath ( );
	bool CheckGameOver ( );
	void SignalEndGame ( int GameOverString );
	void eventSwitchTarget ( class AController* InstigatorController, class AActor* Target );
	bool IsCurrentTarget ( class AController* InstigatorController, class AActor* Target );
	void ScoreHeadshot ( class AController* InstigatorController, class UClass* DamageType );
	void ScoreDamage ( class AController* InstigatorController, class AController* Damaged, float RawDamageDealt, float ActualDamageDealt, class UClass* DamageType );
	void ScoreKill ( class AController* Killer, class AController* Other );
	void ScoreFlamethrowerTankKill ( class AController* Killer, class AController* Other );
	void DestroySFXOnlineSubsystem ( );
	void eventPreExit ( );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	bool eventGrantScaledCredits ( int nSize, unsigned long bTickResource );
	void PlayTransientSound ( class UWwiseBaseSoundObject* InWwiseEvent, struct FVector SoundLocation, struct TArray<struct FString> RTPCName, struct TArray<float> RTPCValue );
	class ASFXInventoryManager* GetPlayerResourcesManager ( );
	void StartFirstUsePowerDelay ( );
	void ToggleCombatOverride ( unsigned long bCombatOverride );
	void CombatEnded ( );
	void CombatStarted ( );
	void ProbeOnCombatEnd ( );
	void ProbeOnCombatBegin ( );
	void OnCombatEnd ( );
	void OnCombatStart ( );
	bool eventInCombat ( );
	bool PreventPermanentDeath ( class ABioPawn* KilledPawn );
	bool PreventDeath ( class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType );
	void ModifyDamage ( class UClass* DamageType, class AActor* injured, class AController* InstigatedBy, class AActor* DamageCauser, float* Damage, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum );
	void eventTriggerVocalizationEvent ( unsigned char VocalizationID, class ABioPawn* InstigatedBy, class ABioPawn* Recipient, float Delay, float fChanceToPlayModifier );
	void OnTimeDilationChange ( float NewTimeDilation );
	void Tick ( float TimeDelta );
	float UpdateTimeDilationArray ( float TimeDelta );
	void CancelTimeDilation ( struct FName Identifier );
	void RequestTimeDilation ( struct FInterpCurveFloat Curve, float TotalTime, struct FName Identifier );
	void LoadPackage ( struct FString PackageName );
	void UpdatePlotStateRTPCs ( class UBioGlobalVariableTable* VarTable, class ASFXPawn_Player* Player );
	void UpdatePlotVariables ( class ASFXPawn_Player* Player );
	class APawn* SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot );
	class UClass* GetCharacterClassByName ( struct FString ClassName );
	unsigned char GetIDByClass ( class UClass* PlayerClass );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	void SetPlayerDefaults ( class APawn* PlayerPawn );
	bool GetChallengeLevel ( int Idx, int* ChallengeLevel );
	void GetChallengeModifier ( int Idx, float* ChallengeModifier, float* LevelModifier, float* TechModifier );
	bool eventGetPlayerData ( int ControllerId, struct FString* PlayerName, int* PlayerClass );
	bool eventGetPlayerLevel ( int ControllerId, int* PlayerLevel );
	class ASFXPawn_Player* GetPlayer ( int ControllerId );
	void UpdateDamage ( int Damage );
	void SortActorsByAngle ( struct FVector RefLocation, struct FRotator RefRotation, unsigned long bPreferBioPawns, struct TArray<class AActor*>* List );
	struct FString GetSimpleString ( int StrRef, unsigned long bParse );
	void eventPostBeginPlay ( );
	void ReCalculate ( struct FScaledFloat* F );
};

// Class SFXGame.BioSPGame
// 0x0004 (0x0598 - 0x0594)
class ABioSPGame : public ASFXGame
{
public:
	int                                                srGameOverString;                                 		// 0x0594 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SpawnGameOverGUI ( );
	void Reset ( );
	void SetupPartyMemberAttributes ( class UBioPawnBehavior* Behavior, class UClass* attributesClass );
	void StartMatch ( );
};

// Class SFXGame.BioBasePlayerController
// 0x0002 (0x07AC - 0x07AA)
class ABioBasePlayerController : public APlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPlayerController
// 0x03DA (0x0B86 - 0x07AC)
class ABioPlayerController : public ABioBasePlayerController
{
public:
	struct FMap_Mirror                                 m_RadarDataMap;                                   		// 0x07AC (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 m_DamageIndicatorDataMap;                         		// 0x07F4 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FInterpCurveFloat                           PhotoModeSpeedCurve;                              		// 0x083C (0x0014) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<class UClass*>                       CustomActionClasses;                              		// 0x0850 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UBioCustomAction*>             CustomActions;                                    		// 0x0860 (0x0010) [0x0000000004422001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FLocalEnemy>                  EnemyList;                                        		// 0x0870 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     StormRTPCName;                                    		// 0x0880 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class ABioPawn*>                     m_AchievementTargets;                             		// 0x0890 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class ABioPawn*>                     m_TrilogyAchievementTargets;                      		// 0x08A0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<int>                                 m_anRecoveredRadarIndexes;                        		// 0x08B0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<int>                                 m_anDestroyedPawnIndexesToRecover;                		// 0x08C0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class AActor*>                       m_aoPotentialRadarObjects;                        		// 0x08D0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class ABioRadarMapBoundaries*>       m_aoMapBoundaryObjects;                           		// 0x08E0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class APawn*>                        m_aoDamageCausers;                                		// 0x08F0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FPostProcessInfo>             PostProcessPresets;                               		// 0x0900 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FBioPPSettingsCallbackData>   m_aPPCallbacks;                                   		// 0x0910 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FCameraRotationLog>           RotLog;                                           		// 0x0920 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWeaponHit__Delegate;                          		// 0x0930 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXHotKeyDefinition                        m_aHotKeyDefines[ 0x8 ];                          		// 0x0940 (0x0060) [0x0000000000000000]              
	struct FPlayerOrder                                m_currentOrder;                                   		// 0x09A0 (0x003C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vCoverBreakAccel;                               		// 0x09DC (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FRotator                                    PrePhotoModeRotation;                             		// 0x09E8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vLocationRadarArrowPointsTo;                    		// 0x09F4 (0x000C) [0x0000000000000000]              
	struct FVector                                     AimDirection;                                     		// 0x0A00 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vNavAssistPoint;                                		// 0x0A0C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USFXProfileSettings*                         ProfileSettings;                                  		// 0x0A18 (0x0008) [0x0000000000000000]              
	class USFXTrilogyProfileSettings*                  TrilogyProfileSettings;                           		// 0x0A20 (0x0008) [0x0000000000000000]              
	class UBioCameraZoom*                              ZoomData;                                         		// 0x0A28 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseEvent*                                 StormStartWwiseEvent_M;                           		// 0x0A30 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 StormPeakWwiseEvent_M;                            		// 0x0A38 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 StormStartWwiseEvent_F;                           		// 0x0A40 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 StormPeakWwiseEvent_F;                            		// 0x0A48 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 StormEndWwiseEvent;                               		// 0x0A50 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UCylinderComponent*                          PhotoCollision;                                   		// 0x0A58 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ABioRadarMapBoundaries*                      m_oRadarMapBoundary;                              		// 0x0A60 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXGameModeManager*                         GameModeManager2;                                 		// 0x0A68 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXModule_AimAssist*                        AimAssist;                                        		// 0x0A70 (0x0008) [0x1000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioHintSystemBase*                          HintSystem;                                       		// 0x0A78 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioPlayerSelection*                         m_oPlayerSelection;                               		// 0x0A80 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              MoveStickIdleThreshold;                           		// 0x0A88 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MoveStickWalkThreshold;                           		// 0x0A8C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MoveStickRunThreshold;                            		// 0x0A90 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DeadZoneThreshold;                                		// 0x0A94 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              m_fCoverBreakAccelTime;                           		// 0x0A98 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fCoverBreakForwardAccelDelay;                   		// 0x0A9C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fCoverExitTimer;                                		// 0x0AA0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PlayerCoverTransitionTime;                        		// 0x0AA4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CoverTransitionCountHold;                         		// 0x0AA8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CoverBreakTimeThreshold;                          		// 0x0AAC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CoverBreakTimer;                                  		// 0x0AB0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxCoverEnterDist;                                		// 0x0AB4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AcquireCoverFOV;                                  		// 0x0AB8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CoverFOV;                                         		// 0x0ABC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CoverSnapScale;                                   		// 0x0AC0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CoverUpdateDelay;                                 		// 0x0AC4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              StormAcquireCoverFOV;                             		// 0x0AC8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              StormCoverFOV;                                    		// 0x0ACC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              StormMaxCoverEnterDist;                           		// 0x0AD0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              StormCoverUpdateDelay;                            		// 0x0AD4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              m_fClimbMantleFaceAngleThreshold;                 		// 0x0AD8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fClimbMantleDistanceThreshold;                  		// 0x0ADC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RemappedJoyRight;                                 		// 0x0AE0 (0x0004) [0x0000000000000000]              
	float                                              RemappedJoyUp;                                    		// 0x0AE4 (0x0004) [0x0000000000000000]              
	float                                              RotationSensitivityLow;                           		// 0x0AE8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RotationSensitivityMedium;                        		// 0x0AEC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RotationSensitivityHigh;                          		// 0x0AF0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                NextEnemyToCheckLOS;                              		// 0x0AF4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentStormStamina;                              		// 0x0AF8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StormCooldownTime;                                		// 0x0AFC (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              PhotoModeTetherDistance;                          		// 0x0B00 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              VehiclePhotoModeTetherDistance;                   		// 0x0B04 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PhotoModeCameraSpeed;                             		// 0x0B08 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              VehiclePhotoModeCameraSpeed;                      		// 0x0B0C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CurrentPhotoModeMoveSpeed;                        		// 0x0B10 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                KismetNoSaveReason;                               		// 0x0B14 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ProfileChangedText;                               		// 0x0B18 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ProfileSignOutText;                               		// 0x0B1C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ConfirmSignOutText;                               		// 0x0B20 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                StorageDeviceRemovedText;                         		// 0x0B24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RestartGame;                                      		// 0x0B28 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ControllerRemoved;                                		// 0x0B2C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              m_fLeaveConvPitch;                                		// 0x0B30 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fMoveToDropDistance;                            		// 0x0B34 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMaxZDifference;                                		// 0x0B38 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRelativeZUpLimit;                              		// 0x0B3C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRelativeZDownLimit;                            		// 0x0B40 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fLastRadarPassTime;                             		// 0x0B44 (0x0004) [0x0000000000000000]              
	float                                              m_fLastRadarRange;                                		// 0x0B48 (0x0004) [0x0000000000000000]              
	float                                              m_fRadarRange;                                    		// 0x0B4C (0x0004) [0x0000000000000000]              
	float                                              m_fRadarFOV;                                      		// 0x0B50 (0x0004) [0x0000000000000000]              
	float                                              m_fLastRadarFOV;                                  		// 0x0B54 (0x0004) [0x0000000000000000]              
	int                                                m_nMaxRadarIndex;                                 		// 0x0B58 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nNavAssistMaxNodeLimit;                         		// 0x0B5C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fDamageIndicatorDisplayTime;                    		// 0x0B60 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_srVehicleExitFailureMsg;                        		// 0x0B64 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srVehicleExitAButtonMsg;                        		// 0x0B68 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fAttackOrderFarAngle;                           		// 0x0B6C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fAttackOrderCloseAngle;                         		// 0x0B70 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fAttackOrderCloseDistance;                      		// 0x0B74 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                RotLogCursor;                                     		// 0x0B78 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bDisableSquadCommandExit : 1;                   		// 0x0B7C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDebugCover : 1;                                  		// 0x0B7C (0x0004) [0x0000000000004001] [0x00000002] ( CPF_Edit | CPF_Config )
	unsigned long                                      bBreakFromCover : 1;                              		// 0x0B7C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bDoCoverExitAccel : 1;                          		// 0x0B7C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bPreferLeanOverPopup : 1;                         		// 0x0B7C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bEnableStormToCover : 1;                        		// 0x0B7C (0x0004) [0x0000000000004001] [0x00000020] ( CPF_Edit | CPF_Config )
	unsigned long                                      CoverRespectsRotation : 1;                        		// 0x0B7C (0x0004) [0x0000000000004001] [0x00000040] ( CPF_Edit | CPF_Config )
	unsigned long                                      m_bCanMantleOutsideOfCover : 1;                   		// 0x0B7C (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bStorming : 1;                                    		// 0x0B7C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bTiredStorming : 1;                               		// 0x0B7C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bStormCoolingDown : 1;                            		// 0x0B7C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bPhotoModeCameraUnlocked : 1;                     		// 0x0B7C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bProfileSettingsUpdated : 1;                      		// 0x0B7C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bKismetNoSave : 1;                                		// 0x0B7C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      m_bIsStoppedForConv : 1;                          		// 0x0B7C (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      m_bDEBUGFlyUpPressed : 1;                         		// 0x0B7C (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      m_bDEBUGFlyDownPressed : 1;                       		// 0x0B7C (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      m_bRadarArrow : 1;                                		// 0x0B7C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      m_bRadarIsJammed : 1;                             		// 0x0B7C (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      m_bPermanentWalk : 1;                             		// 0x0B7C (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bSkipPhysicsForOneFrame : 1;                      		// 0x0B7C (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bEnableRotLog : 1;                                		// 0x0B7C (0x0004) [0x0000000000004000] [0x00200000] ( CPF_Config )
	unsigned char                                      m_CoverBreakCoverAction;                          		// 0x0B80 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bWantsToStorm;                                    		// 0x0B81 (0x0001) [0x0000000000002004]              ( CPF_Input | CPF_Transient )
	unsigned char                                      bBoost;                                           		// 0x0B82 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bJump;                                            		// 0x0B83 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bAlternateCamera;                                 		// 0x0B84 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bMine;                                            		// 0x0B85 (0x0001) [0x0000000000000004]              ( CPF_Input )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetRichPresence ( );
	void ClientSetOnlineStatus ( );
	void OnExternalUIChanged ( unsigned long bIsOpening );
	float GetRadarFOV ( );
	float GetRadarRange ( );
	class ABioPawn* GetBioPawn ( );
	unsigned char GetLoginStatus ( );
	void HandleWalking ( );
	void PostControllerIdChange ( );
	bool IsLookInputIgnored ( );
	void UpdateInputConfiguration ( );
	void LoadPCInputConfiguration ( );
	void SavePCInputConfiguration ( class USFXProfileSettings* Profile );
	void UpdateUIProfileSettings ( class USFXProfileSettings* oProfileSettings );
	void eventUpdateLocalProfileSettingsCache ( );
	bool CanRestartPlayer ( );
	void RestoreMotionBlur ( );
	void DisableMotionBlur ( );
	bool eventHasCompletedAchievement ( unsigned char AchievementId );
	void eventUpdateAchievementProgression ( unsigned char AchievementId, class ABioPawn* oTarget );
	void eventUpdateTrilogyUniqueStatProgression ( int ProfileSettingId );
	void eventUpdateTrilogyGrinderStatProgression ( int ProfileSettingId, int Amount, class ABioPawn* oTarget );
	bool GetTrilogyGrinderData ( unsigned char AchievementId, struct FTrilogyGrinderAchievementData* Data );
	void eventUnlockAchievement ( unsigned char AchievementId );
	void NotifyReadAchievementsComplete ( int TitleId );
	bool QueueLauncherResume ( );
	void UpdateProfileData ( );
	void NotifyProfileReadComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void eventCheckThatGameCanContinue ( );
	void StorageDeviceChanged ( );
	bool DownloadableContentWasRemoved ( );
	void ClearOnlineDelegates ( );
	void RegisterOnlineDelegates ( );
	void NotifyLoginChange ( unsigned char LocalUserNum );
	void eventSaveProfile ( );
	void SaveGameEx ( struct FSFXSaveDescriptor SaveDescriptor );
	void OverwriteGame ( int DeleteIndex, int SaveIndex );
	void SaveGame ( int SaveIndex );
	void ResumeGame ( struct FScriptDelegate Callback );
	void QuickLoad ( );
	void QuickSave ( );
	bool eventCanSave ( struct FString* Reason );
	void SetDeviceID ( int nID );
	void eventPreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	float GetSensitivityScaling ( );
	void SetCinematicMode ( unsigned long bInCinematicMode, unsigned long bHidePlayer, unsigned long bAffectsHUD, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsButtons );
	void GenerateTutorialEvent ( unsigned char eTutHook );
	void QueueDamageIndicator ( class APawn* oPawn );
	void DebugDraw_CoverCheck ( class ABioHUD* HUD );
	void CheckStormToCover ( );
	float GetMaxCoverEnterDist ( );
	float GetCoverFOV ( );
	float GetAcquireCoverFOV ( );
	void PlayLocationBasedForceFeedback ( struct FVector ImpactLocation, class UForceFeedbackWaveform* ForceFeedback, float MinShakeDistance, float MinShakeMultiplier );
	void PlayLocationBasedCameraShake ( struct FVector ImpactLocation, struct FScreenShakeStruct CameraShake, float MinShakeDistance, float MinShakeMultiplier );
	void CameraShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency );
	bool IsReloading ( );
	void eventSetZoomed ( unsigned long bZoomState );
	bool IsZoomed ( );
	bool eventIsPlayerPerformingBlockingAction ( );
	void eventCancelLastOrderedPower ( class APawn* oOrderedPawn, struct FName nmPower );
	bool CanRunQueuedOrder ( );
	void ClearPlayerOrder ( );
	void eventSwitchWeapon ( class ASFXWeapon_NativeBase* oWpn );
	bool CanStartImmediateOrder ( );
	bool CanQueueOrder ( );
	void OrderWeaponSwitch ( class APawn* oOrderedPawn, class ASFXWeapon* Wpn );
	void GiveHenchmanOrder ( class APawn* oHenchman, unsigned char eOrder, class AActor* oTargetActor, struct FVector vTargetLocation, struct FName nmPower, class ASFXWeapon* oWpn, int nQueue );
	void eventHenchmanOrderHoldPosition ( class APawn* oHenchman, struct FVector vLocation );
	void eventHenchmanOrderFollow ( class APawn* oHenchman );
	void eventHenchmanOrderAttackTarget ( class APawn* oHenchman, class AActor* oTargetActor );
	void eventHenchmanOrderUsePower ( class APawn* oHenchman, class AActor* oTargetActor, struct FVector vTargetLocation, struct FName nmPower, int nQueue );
	bool eventGetHenchmanAttackOrderPower ( class APawn* oHenchman, class AActor* oTarget, struct FName* nmPowerName );
	void OnControllerChanged ( int ControllerId, unsigned long bIsConnected );
	void eventProxyOnControllerChanged ( int ControllerId, unsigned long bIsConnected );
	void ResetStormCooldown ( );
	void OnTeleportCameraSync ( class USeqAct_Teleport* Action );
	void eventSpawnPlayerCamera ( );
	void InitializeGammaCorrectionSettings ( );
	void SetPostProcessValues ( unsigned char Preset );
	void GrantXP ( float XP, unsigned long bSkipNotify );
	void eventUnPossess ( );
	void Possess ( class APawn* aPawn, unsigned long bVehicleTransition );
	void DisablePhotoModeCameraCollision ( );
	void EnablePhotoModeCameraCollision ( );
	void ToggleFlyCamControl ( );
	void ToggleSlowFlyCam ( );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void UpdateCover ( );
	void UpdateEnemyList ( );
	bool IsUsingPower ( );
	bool eventCanDoCustomAction ( unsigned char CAction );
	bool eventGetCurrentCustomAction ( class UBioCustomAction** Action );
	void AcquireCover ( struct FCovPosInfo CovInfo );
	bool CanPerformMantle ( struct FCovPosInfo* CoverInfo );
	bool CanPerformClimb ( struct FCovPosInfo* CoverInfo );
	bool CanPerformEnterCover ( );
	bool ValidatePotentialCover ( struct FVector SourceLoc, struct FVector Direction, unsigned long OnlyIfBetter, float* OutMinDotFOV, float* OutMaxDistanceSquared, struct FCovPosInfo* OutCovPosInfo );
	void FillCoverPosInfo ( class ACoverLink* Link, int SlotIdx, struct FVector SourceLoc, struct FVector Direction, float MaxDistance, struct FCovPosInfo* out_CovPosInfo );
	bool FindPlayerCover ( unsigned long bUseRotation, struct FCovPosInfo* out_CovPosInfo );
	bool TryAcquireCover ( );
	void NotifyCoverDisabled ( class ACoverLink* Link, int SlotIdx, unsigned long bAdjacentIdx );
	void NotifyReachedCoverSlot ( int SlotIdx, int OldSlotIdx );
	void SetIsInStationaryCover ( unsigned long bIsInStationaryCover );
	unsigned char GetPawnCoverType ( );
	void SetPawnCoverType ( unsigned char NewCoverType );
	unsigned char GetPawnCoverAction ( );
	void SetPawnCoverAction ( unsigned char NewCoverAction );
	unsigned char GetCoverDirection ( );
	void SetCoverDirection ( unsigned char NewCoverDirection );
	void LeaveCover ( );
	void CoverLog ( struct FString msg, struct FString Function );
	bool IsInCoverState ( );
	void EnableTransitions ( );
	void BreakFromCover ( );
	bool IsCameraAlignedWithCoverSlot ( float fThreshold );
	void DetermineLeanDirection ( class ABioPawn* BioPawn, struct FCoverSlot* CurrentSlot, unsigned char* out_PawnCA, unsigned char* out_PawnCD );
	void PawnLanded ( );
	void PawnFalling ( );
	void PawnDied ( class APawn* inPawn );
	void eventApplyTacticalOrders ( );
	bool CanStorm ( );
	bool IsExploreTargetable ( class AActor* A );
	bool IsCombatTargetable ( class AActor* A );
	void RefreshRadarData ( );
	void eventPostBeginPlay ( );
	bool UpdateMoveToIndicator ( class APawn* pSquadPawn, struct FVector vMoveToPosition );
	class UDOFEffect* FindUberDOFEffect ( );
	void OnExitedCover ( );
	void OnEnteredCover ( );
	bool GetInputDisabled ( );
	void SetInputDisabled ( unsigned long bVal );
	void eventActivateMelee ( );
	bool eventGetZoomSnapWeaponInfo ( class AWeapon* Weapon, int Idx, unsigned char* AimNode, float* OuterSnapAngle, float* InnerSnapAngle, float* OffsetMag );
	class APawn* GetZoomSnapTarget ( float MinDistance, float MaxDistance, struct FVector* AimLocation );
	class APawn* GetAimAssistTarget ( float MaxDistance, struct FVector* CamLoc, struct FRotator* CamRot, struct FVector* TargetLoc, float* Margin );
	float ScoreZoomSnapTarget ( class APawn* TestPawn, float MaxDistance, struct FVector* CamLoc, struct FRotator* CamRot, struct FVector* AimLocation );
	int LerpMovementStickAngle ( int RotDesired, int RotBase, float RotationSpeed, float DeltaSeconds );
	void ComputeMovementStickAngle ( float* Mag, float* AngleStick, struct FRotator* RotWorld );
	bool GetCameraRelativeRotation ( struct FVector* vDirection );
	void eventOnActionStateChanged ( );
	void BioOnPawnActionStateChanged ( );
	void ResetGoalPriorities ( class ASFXNav_GoalPoint* oGoal );
	class ASFXNav_GoalPoint* GetBestGoalPoint ( );
	void SquadOrderEquipWeapon ( unsigned char nWeapon, class APawn* pPawn );
	void SquadOrderUsePower ( struct FName nmPower, class APawn* pPawn, int nQueue, unsigned long bShowIndicator, class AActor* pDesiredTarget );
	bool ShouldLockOnTarget ( class AActor* pTarget );
	bool QuickCommandMoveTo ( int nSquadIndex );
	bool QuickCommandAttackTarget ( int nSquadIndex );
	bool QuickCommandFollowPlayer ( int nSquadIndex );
	void PlayerSquadSetActionState ( unsigned char eState );
	void Destroyed ( );
	void UpdateBinkAudioVolume ( );
	void DisableDOF ( );
	void RecoverForPlayerPawnActionState ( );
	void RecoverSelectionForPawnActionState ( );
	void RecoverCameraForPawnActionState ( );
	void RecoverCameraPostCinematic ( );
	bool CoverReachable ( class APawn* PlayerPawn, struct FCovPosInfo* out_CovPosInfo );
	void DrawSelectionReticle ( struct FVector vLocation );
	void DrawCircle ( struct FVector vLocation, struct FVector vNormal, float fRadius, struct FColor CircleColor );
	void UnregisterPlayerDataStores ( );
	void RegisterCustomPlayerDataStores ( );
	void OnWeaponHit ( unsigned long bIsHeadshot );
	void DumpWhipLog ( int Index );
	bool SetRotation ( struct FRotator NewRotation );
};

// Class SFXGame.SFXGameModeBase
// 0x006D (0x00CD - 0x0060)
class USFXGameModeBase : public UObject
{
public:
	struct FMultiMap_Mirror                            CollectedBindMapping;                             		// 0x0060 (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<struct FKeyBind>                     Bindings;                                         		// 0x00A8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FKeyBind>                     LocalizedBindings;                                		// 0x00B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bBindingsCollected : 1;                           		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsActive : 1;                                    		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bShowHUD : 1;                                     		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowSelection : 1;                               		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowDamageIndicators : 1;                        		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowRadar : 1;                                   		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowRotationUpdate : 1;                         		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowMovement : 1;                               		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowCamera : 1;                                 		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowCameraMods : 1;                             		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowSave : 1;                                   		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowLookAt : 1;                                 		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowPauseMenu : 1;                              		// 0x00C8 (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowSubtitle : 1;                                		// 0x00C8 (0x0004) [0x0000000000000003] [0x00002000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasMouseAuthority : 1;                           		// 0x00C8 (0x0004) [0x0000000000000003] [0x00004000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMouseVisible : 1;                                		// 0x00C8 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bMergeNotifications : 1;                          		// 0x00C8 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bQueueAndSuppressNotifications : 1;               		// 0x00C8 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bShowReticles : 1;                                		// 0x00C8 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bPlayVocalizations : 1;                           		// 0x00C8 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bEnforce16x9Subtitiles : 1;                       		// 0x00C8 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bAllowMessageUI : 1;                              		// 0x00C8 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned char                                      Priority;                                         		// 0x00CC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void TurnObjectiveRadarDisplayOff ( );
	void TurnObjectiveRadarDisplayOn ( );
	void ToggleObjectiveRadarDisplay ( unsigned long bTurnOn );
	void PulseRadarDisplay ( float fPulseTime );
	void UnpauseTimeDilationEffects ( );
	void PauseTimeDilationEffects ( );
	void RemoveTimeDilationEffects ( );
	void GuiKey ( unsigned char Event );
	void LeaveWorld ( );
	void StartIngamePropertyEditor ( );
	void SquadCommand_Move2 ( );
	void SquadCommand_Move1 ( );
	void SquadCommand_Follow ( );
	void SquadCommand_Attack ( );
	void TurnOffStormForPause ( );
	void ShowMenu ( );
	void StopFiringWeapon ( );
	void SwapWeaponIfEmpty ( );
	void FireWeapon ( );
	void SetSystemFilmgrainEnabled ( unsigned long bValue );
	bool IsSystemFilmgrainEnabled ( );
	void CollectBindings ( );
	void eventInitialize ( );
	void DeactivateSpecifier ( struct FName ModeSpecifier );
	void ActivateSpecifier ( struct FName ModeSpecifier );
	void Deactivated ( );
	void Activated ( );
	void ClearTimer ( struct FName inTimerFunc, class UObject* inObj );
	void SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj );
	class USFXCameraMode* eventHACK_GetCameraMode ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

// Class SFXGame.SFXGameModeManager
// 0x0059 (0x00B9 - 0x0060)
class USFXGameModeManager : public UObject
{
public:
	struct TArray<class UClass*>                       SupportedModes;                                   		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class USFXGameModeBase*>             GameModes;                                        		// 0x0070 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FLocalizedKeyName>            KeyNames;                                         		// 0x0080 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FTutorialCommandsDetails>     lstTutorialParseStrings;                          		// 0x0090 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     sAudioGameModeRTPCName;                           		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              KEY_BINDING_VERSION;                              		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srUnboundKeyString;                               		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      CurrentMode;                                      		// 0x00B8 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString GetLocalizedNameForKey ( struct FName Key, unsigned long Control, unsigned long Shift, unsigned long Alt );
	void UpdateAllBindMappingCollections ( );
	void ResetKeyPresses ( );
	struct FString ParseStringForPCCommands ( struct FString sMessage );
	void ResetBindings ( );
	bool ShouldAllowMessageUI ( );
	bool ShouldEnforce16x9Subtitiles ( );
	bool ShouldPlayVocalizations ( );
	bool ShouldShowReticles ( );
	bool ShouldQueueAndSuppressNotifications ( );
	bool ShouldMergeNotifications ( );
	bool GetMouseVisible ( );
	bool HasMouseAuthority ( );
	bool ShouldShowSubtitles ( );
	bool AllowsLookAt ( );
	bool AllowsSaving ( );
	bool AllowsCameraMods ( );
	bool AllowRotationUpdates ( );
	bool ShouldShowRadar ( );
	bool ShouldShowDamageIndicators ( );
	bool ShouldShowSelection ( );
	bool ShouldShowHUD ( );
	bool IsActive ( unsigned char Mode );
	void UpdateCurrentMode ( );
	void Initialize ( );
	class USFXGameModePhoto* GetPhotoMode ( );
	class USFXCameraMode* HACK_GetCameraMode ( unsigned char GalaxyOrConversationMode );
	void eventHACK_BeginExitGalaxyMap ( unsigned long resize );
	bool eventHACK_CanExitGalaxyMode ( );
	class USFXGameModeBase* HACK_GetOrbitalMode ( );
	void UpdateControllerButtonBindings ( unsigned long bSwapCrossCircle );
	void UpdateControllerTriggerBindings ( unsigned char ConfigOption );
	void UpdateControllerStickBindings ( unsigned char ConfigOption );
	void Helper_ResetStaticPCBindings ( );
	void Helper_SetStaticPCBinding ( struct FName Key, struct FString Command );
	void ResetControllerBindings ( );
	void Helper_ResetStaticConsoleBindings ( );
	void Helper_SetStaticConsoleBinding ( struct FName Key, struct FString Command );
	void Helper_SwapStaticConsoleSticks ( );
	void Helper_SwapStaticConsoleBindings ( struct FName SourceKey, struct FName TargetKey );
	void Helper_SwapBindings ( class USFXGameModeBase* TargetMode, struct FName SourceKey, struct FName TargetKey, unsigned long bSwapBindings, struct FString OverrideSourceCommand, struct FString OverrideTargetCommand, unsigned long bUseDefaultBindings );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	void TurnOffStormForPause ( );
	bool CanPause ( );
	void eventDisableMode ( unsigned char Mode, struct FName ModeSpecifier );
	void eventEnableMode ( unsigned char Mode, struct FName ModeSpecifier );
};

// Class SFXGame.SFXGameViewportClient
// 0x0000 (0x01D4 - 0x01D4)
class USFXGameViewportClient : public UGFxGameViewportClient
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool CreateInitialPlayer ( struct FString* OutError );
	bool CreateInitialPlayerWithLauncherOverride ( struct FString* OutError );
};

// Class SFXGame.SFXGUIInteraction
// 0x0034 (0x00DC - 0x00A8)
class USFXGUIInteraction : public UGFxInteraction
{
public:
	struct TArray<struct FSFXSFControlToken>           ControlTokens;                                    		// 0x00A8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FSFXControlTokenAlias>        ControlTokenAliases;                              		// 0x00B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FSFXStringMap>                StringMappings;                                   		// 0x00C8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      ReplaceRegisteredTMWithFullHeightChar : 1;        		// 0x00D8 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void NotifyGameSessionEnded ( );
};

// Class SFXGame.SFXLoadMovieManager
// 0x0049 (0x00A9 - 0x0060)
class USFXLoadMovieManager : public UObject
{
public:
	struct FString                                     LoadingMovieName;                                 		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UWwiseEventPairObject*                       MovieSound;                                       		// 0x0070 (0x0008) [0x0000000000000000]              
	class UBioLoadingMovie*                            DefaultLoadingMovie;                              		// 0x0078 (0x0008) [0x0000000000000000]              
	struct FName                                       WWiseGlobalEvent_LoadMute;                        		// 0x0080 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       WWiseGlobalEvent_LoadUnMute;                      		// 0x0088 (0x0008) [0x0000000000004000]              ( CPF_Config )
	class UBioSFResources*                             m_oSFResources;                                   		// 0x0090 (0x0008) [0x0000000000000000]              
	int                                                nLoopBackFrame;                                   		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                srLevelLoadTipStrRef;                             		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                nCurrentTipIndex;                                 		// 0x00A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPlayToCompletion : 1;                            		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bRequireExplicitStop : 1;                         		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bResetToDefaultOnPlayLoadMovie : 1;               		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bShowLevelLoadTip : 1;                            		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bStreamFromDisc : 1;                              		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned char                                      PlaybackState;                                    		// 0x00A8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsLoadingMoviePlaying ( );
	bool StopLoadingMovie ( unsigned long bDelayStopUntilGameHasRendered );
	bool PlayLoadingMovie ( struct FString LevelName );
	void InitLoadScreenTip ( );
	void SetupLoadingMovie ( class UBioLoadingMovie* Movie, class UBioSFScreenTip* ScreenTip, unsigned long HideLoadingTip, unsigned long RequiresExplicitStop, unsigned long PlayToCompletion, unsigned long StreamFromDisc );
	void ResetToDefaultLoadMovie ( );
};

// Class SFXGame.SFXLoadoutData
// 0x0080 (0x00E0 - 0x0060)
class USFXLoadoutData : public UObject
{
public:
	struct TArray<class UClass*>                       Weapons;                                          		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FShieldLoadout>               ShieldLoadouts;                                   		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UClass*>                       Powers;                                           		// 0x0080 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FPowerLevelUp>                PowerLevelUpInfo;                                 		// 0x0090 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      Armor;                                            		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ShieldOffset;                                     		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   WeaponLevelRange;                                 		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   ArmorLevelRange;                                  		// 0x00BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   MaxHealth;                                        		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   HealthLevelRange;                                 		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShieldScale;                                      		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TechResistance;                                   		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BioticResistance;                                 		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXPlayerSquadLoadoutData
// 0x00E4 (0x01C4 - 0x00E0)
class USFXPlayerSquadLoadoutData : public USFXLoadoutData
{
public:
	struct TArray<struct FLoadoutWeaponInfo>           AssaultRifles;                                    		// 0x00E0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FLoadoutWeaponInfo>           Shotguns;                                         		// 0x00F0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FLoadoutWeaponInfo>           SniperRifles;                                     		// 0x0100 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FLoadoutWeaponInfo>           AutoPistols;                                      		// 0x0110 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FLoadoutWeaponInfo>           HeavyPistols;                                     		// 0x0120 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FLoadoutWeaponInfo>           HeavyWeapons;                                     		// 0x0130 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FPlotWeapon>                  PlotWeapons;                                      		// 0x0140 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<unsigned char>                       StandardWeapons;                                  		// 0x0150 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FUnlockableWeaponClass>       UnlockableStandardWeapons;                        		// 0x0160 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FLoadoutInfo>                 PlayerLoadoutInfo;                                		// 0x0170 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FLoadoutInfo>                 HenchLoadoutInfo;                                 		// 0x0180 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FBonusWeaponInfo>             PlayerBonusWeapons;                               		// 0x0190 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FSpecialWeaponInfo>           PlayerSpecialWeapons;                             		// 0x01A0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FSpecialWeaponInfo>           HenchmenSpecialWeapons;                           		// 0x01B0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                MaxWeapons;                                       		// 0x01C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool CanHenchmanUseWeaponClass2 ( struct FName HenchTag, struct FName WeaponClassName );
	bool CanHenchmanUseWeaponClass ( struct FName HenchTag, class UClass* Weapon );
	bool CanPlayerUseWeaponClass ( class UClass* WeaponClass );
	bool CanHenchmanUseWeaponGroup ( struct FName HenchTag, unsigned char WeaponGroup );
	struct FName GetHenchmanClassname ( struct FName HenchTag );
	bool CanPlayerUseWeaponGroup ( unsigned char WeaponGroup );
	int GetPluralPrettyName ( int Idx );
	class UClass* FindWeaponClass ( struct FName WeaponClassName );
	void GetWeaponCategoryByName ( struct FName WClassName, int* GroupIdx, int* EntryIdx );
	void GetWeaponCategory ( class UClass* WClass, int* GroupIdx, int* EntryIdx );
	struct TArray<struct FLoadoutWeaponInfo> GetWeaponGroup ( int Idx );
};

// Class SFXGame.SFXModule_Radar
// 0x0005 (0x0071 - 0x006C)
class USFXModule_Radar : public USFXModule
{
public:
	unsigned long                                      bRadarDisabled : 1;                               		// 0x006C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      RadarType;                                        		// 0x0070 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PostBeginPlay ( );
};

// Class SFXGame.SFXMovementData
// 0x0034 (0x0094 - 0x0060)
class USFXMovementData : public UObject
{
public:
	float                                              WalkSpeed;                                        		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundSpeed;                                      		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnSpeed;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CombatWalkSpeed;                                  		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CombatGroundSpeed;                                		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeathCrawlSpeed;                                  		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoverGroundSpeed;                                 		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoverCrouchGroundSpeed;                           		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CrouchGroundSpeed;                                		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StormSpeed;                                       		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StormTurnSpeed;                                   		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AirSpeed;                                         		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AccelRate;                                        		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXNav_ForcedPathNode
// 0x0008 (0x0394 - 0x038C)
class ASFXNav_ForcedPathNode : public ANavigationPoint
{
public:
	float                                              m_fForcedRadius;                                  		// 0x038C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fForcedHeight;                                  		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXNav_GoalPoint
// 0x000C (0x0398 - 0x038C)
class ASFXNav_GoalPoint : public ANavigationPoint
{
public:
	int                                                m_nPriority;                                      		// 0x038C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nOverridePriority;                              		// 0x0390 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsFinalGoal : 1;                               		// 0x0394 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int GetPriority ( );
	void ResetPriority ( );
	void OverridePriority ( int nNewPriority );
};

// Class SFXGame.SFXObjectPool
// 0x0126 (0x03B0 - 0x028A)
class ASFXObjectPool : public AActor
{
public:
	struct TArray<struct FSFXObjectPoolTracers>        TracerPool;                                       		// 0x028C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FSFXObjectPoolProjectiles>    ProjectilePool;                                   		// 0x029C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FSFXObjectPoolDroppedAmmos>   DroppedPool;                                      		// 0x02AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FSFXObjectPoolImpactPSCs>     ImpactPSCPool;                                    		// 0x02BC (0x0010) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct TArray<struct FSFXObjectPoolPSCs>           GenericPSCPool;                                   		// 0x02CC (0x0010) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct TArray<struct FSFXObjectPoolEmitters>       EmitterPool;                                      		// 0x02DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FSFXObjectPoolPathConstraintCaches> PathConstraintCache;                              		// 0x02EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UPathGoalEvaluator*>           PathGoalEvaluatorCache;                           		// 0x02FC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UWwiseAudioComponent*                        WwiseACPool[ 0x14 ];                              		// 0x030C (0x00A0) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                WwiseNextIdx;                                     		// 0x03AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DumpPools ( );
	class UPathGoalEvaluator* eventGetPathGoalEvaluatorFromCache ( class UClass* GoalEvalClass, class APawn* Requestor );
	class UPathConstraint* eventGetPathConstraintFromCache ( class UClass* ConstraintClass, class APawn* Requestor );
	void eventCleanupPathConstraints ( );
	void eventCreatePathConstraintCache ( );
	class UWwiseAudioComponent* GetWwiseAudioComponent ( );
	class AEmitter* GetImpactEmitter ( class UParticleSystem* Template, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	void PrecacheImpactEmitter ( class UParticleSystem* Template );
	void eventReusePooledEmitter ( class AEmitter* Emit );
	class AEmitter* eventCreatePooledEmitter ( class UParticleSystem* Template );
	class UParticleSystemComponent* GetGenericParticleSystemComponent ( class UParticleSystem* Template );
	void PrecacheGenericParticleSystemComponent ( class UParticleSystem* Template );
	class UParticleSystemComponent* GetImpactParticleSystemComponent ( class UParticleSystem* Template );
	void PrecacheImpactParticleSystemComponent ( class UParticleSystem* Template );
	class ADroppedPickup* GetDroppedAmmo ( class UClass* DroppedAmmoClass, struct FVector SpawnLocation );
	void eventReusePooledDroppedAmmo ( class ADroppedPickup* Dropped );
	class ADroppedPickup* eventCreatePooledDroppedAmmo ( class UClass* DroppedAmmoClass, struct FVector SpawnLocation );
	class AProjectile* GetProjectile ( class UClass* ProjectileClass, class AActor* ProjOwner, class APawn* ProjInstigator, struct FVector ProjLocation, struct FRotator ProjRotation );
	void eventReusePooledProjectile ( class AProjectile* Proj );
	class AProjectile* eventCreatePooledProjectile ( class UClass* ProjClass, struct FVector SpawnLocation );
	class AProjectile* GetTracer ( class UStaticMesh* Mesh, class UParticleSystem* Template );
	void PrecacheTracer ( class UStaticMesh* Mesh, class UParticleSystem* Template );
	void eventReusePooledTracer ( class AProjectile* Proj );
	class AProjectile* eventCreatePooledTracer ( class UStaticMesh* Mesh, class UParticleSystem* Template, struct FVector SpawnLocation );
	void ApplyBloodColor ( class UParticleSystemComponent* PSC, class AActor* HitActor );
	void ApplyLODLevel ( class UParticleSystemComponent* PSC, struct FVector EffectLocation );
	void AttachParticleSystemComponent ( class UParticleSystemComponent* PSC, class AActor* HitActor, class UPrimitiveComponent* HitComponent, struct FName HitBone, struct FVector HitLocation, struct FVector HitNormal, unsigned long bStaticLocation );
};

// Class SFXGame.SFXObjectSerializerMT
// 0x001C (0x007C - 0x0060)
class USFXObjectSerializerMT : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x1C ];                            		// 0x0060 (0x001C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXPointOfInterest
// 0x0002 (0x028C - 0x028A)
class ASFXPointOfInterest : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnCastAt ( class APawn* oAttacker, class USFXPower* Power );
	void OnAttacked ( class APawn* oAttacker, struct FName WeaponName );
	void PostBeginPlay ( );
};

// Class SFXGame.SFXPRI_NativeBase
// 0x000C (0x0372 - 0x0366)
class ASFXPRI_NativeBase : public APlayerReplicationInfo
{
public:
	unsigned long                                      bSquadUsesPowers : 1;                             		// 0x0368 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bAutoSave : 1;                                    		// 0x0368 (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bAutoLogin : 1;                                   		// 0x0368 (0x0004) [0x0000000000002001] [0x00000004] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bSwapCrossCircle : 1;                             		// 0x0368 (0x0004) [0x0000000000002001] [0x00000008] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bSwapTriggersShoulders : 1;                       		// 0x0368 (0x0004) [0x0000000000002001] [0x00000010] ( CPF_Edit | CPF_Transient )
	unsigned char                                      ControllerSensitivityConfig;                      		// 0x036C (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      TriggerConfig;                                    		// 0x036D (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      StickConfig;                                      		// 0x036E (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      AimAssistConfig;                                  		// 0x036F (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      DifficultyOption;                                 		// 0x0370 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      AutoLevelUp;                                      		// 0x0371 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXProfileSettings
// 0x0030 (0x00F8 - 0x00C8)
class USFXProfileSettings : public UOnlineProfileSettings
{
public:
	struct TArray<struct FAchievementReward>           Rewards;                                          		// 0x00C8 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FAchievementData>             StaticAchievementData;                            		// 0x00D8 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FGrinderAchievement>          GrinderAchievementSettings;                       		// 0x00E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyDisplaySettings ( );
	void ApplyAudioSettings ( );
	void ApplySettings ( );
	bool GetSwappedTriggersShoulders ( );
	bool GetSwappedCrossCircle ( );
	void SetToDefaultsEx ( struct TArray<unsigned char>* lstProfileSettingsToReset );
	bool GetChoseMorinthNotSamara ( );
	void SetChoseMorinthNotSamara ( unsigned long ChoseMorinth );
	void UpdateAchievements ( struct TArray<struct FAchievementDetails> AchievementsList, class ABioPlayerController* PC );
	bool UnlockReward ( unsigned char AchievementId, class ABioPlayerController* PC );
	int GetAchievementStatus ( unsigned char AchievementId );
	int GetAchievementRequirement ( unsigned char AchievementId );
	bool HasCompletedAchievement ( unsigned char AchievementId );
	bool SetAchievementCompleted ( unsigned char AchievementId, class ABioPlayerController* PC, unsigned long bSaveProfile );
	void ResetAchievementStatus ( class ABioPlayerController* PC );
	bool SetAchievementUncompleted ( unsigned char AchievementId, class ABioPlayerController* PC, unsigned long bSaveProfile );
	int GetAchievementSettingField ( unsigned char AchievementId );
	struct FString GetFinishedGameCareerName ( );
	int GetNumCodex ( );
	int GetNumN7MissionsCompleted ( );
	int GetNumArmourIncinerated ( );
	int GetNumBarriersWarped ( );
	int GetNumShieldsDisrupted ( );
	int GetNumScreams ( );
	int GetNumPowerCombos ( );
	int GetNumHeadshots ( );
	void SetCurrentCareerName ( struct FString CareerName );
	struct FString GetCurrentCareerName ( );
	void SetCurrentDeviceID ( int DeviceID, class ABioPlayerController* PC );
	int GetCurrentDeviceID ( );
	bool GetFilmgrainConfigOption ( );
	bool GetMotionBlurConfigOption ( );
	int eventGetDialogVolume ( );
	int eventGetFXVolume ( );
	int eventGetMusicVolume ( );
	float GetDisplayGamma ( );
	void SetShowHints ( unsigned long bEnabled );
	bool AreHintsEnabled ( );
	void SetTelemetryCollection ( unsigned long bEnabled );
	bool IsTelemetryCollectionEnabled ( );
	bool GetAutoLoginConfigOption ( );
	void SetAutoSaveConfigOption ( unsigned long bAutoSave );
	bool GetAutoSaveConfigOption ( );
	bool GetSquadPowerConfigOption ( );
	unsigned char GetAutoLevelConfigOption ( );
	unsigned char GetDifficultyConfigOption ( );
	unsigned char GetAimAssistValue ( );
	bool GetSubtitleConfigOption ( );
	unsigned char eventGetTriggerConfigOption ( );
	unsigned char GetStickConfigOption ( );
	unsigned char GetControllerSensitivityValue ( );
	bool GetInvertYOption ( );
	bool GetControllerVibrationOption ( );
	bool GrinderAchievementIncrement ( unsigned char AchievementId, class ABioPlayerController* PC );
	void GrinderAchievementReset ( unsigned char AchievementId, class ABioPlayerController* PC );
	bool GetGrinderAchievement ( unsigned char AchievementId, struct FGrinderAchievement* G );
	bool GetAchievementData ( unsigned char AchievementId, struct FAchievementData* AD );
};

// Class SFXGame.SFXSaveGame
// 0x049D (0x04FD - 0x0060)
class USFXSaveGame : public UObject
{
public:
	struct FPlayerSaveRecord                           PlayerRecord;                                     		// 0x0060 (0x02DC) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FPlotTableSaveRecord                        PlotRecord;                                       		// 0x033C (0x0074) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FME1PlotTableRecord                         ME1PlotRecord;                                    		// 0x03B0 (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FDependentDLCRecord>          DependentDLC;                                     		// 0x03E0 (0x0010) [0x0000000000500001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Filename;                                         		// 0x03F0 (0x0010) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     DebugName;                                        		// 0x0400 (0x0010) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     DisplayName;                                      		// 0x0410 (0x0010) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     characterID;                                      		// 0x0420 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FLevelSaveRecord>             LevelRecords;                                     		// 0x0430 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FStreamingStateSaveRecord>    StreamingRecords;                                 		// 0x0440 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FKismetBoolSaveRecord>        KismetRecords;                                    		// 0x0450 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FDoorSaveRecord>              DoorRecords;                                      		// 0x0460 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FGuid>                        PawnRecords;                                      		// 0x0470 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FHenchmanSaveRecord>          HenchmanRecords;                                  		// 0x0480 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FGalaxyMapSaveRecord                        GalaxyMapRecord;                                  		// 0x0490 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FSaveTimeStamp                              TimeStamp;                                        		// 0x04A0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FSaveTimeStamp                              CreatedDate;                                      		// 0x04B0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SaveLocation;                                     		// 0x04C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    SaveRotation;                                     		// 0x04CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BaseLevelName;                                    		// 0x04D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                SerializedSize;                                   		// 0x04E0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                FileVersion;                                      		// 0x04E4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              SecondsPlayed;                                    		// 0x04E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Disc;                                             		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EndGameState;                                     		// 0x04F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentLoadingTip;                                		// 0x04F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsValid : 1;                                     		// 0x04F8 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bIsGamerProfile : 1;                              		// 0x04F8 (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )
	unsigned char                                      Difficulty;                                       		// 0x04FC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UClass* LoadPower ( struct FString PowerClassName );
	void LoadHotKeys ( class ABioPlayerController* PC, struct TArray<struct FHotKeySaveRecord>* Records );
	void LoadWeapons ( class ASFXPawn_Player* Player, struct TArray<struct FWeaponSaveRecord>* Records );
	void LoadPowers ( class ASFXPawn* Pawn, struct TArray<struct FPowerSaveRecord>* Records );
	class UBioMorphFace* LoadMorphHead ( struct FPlayerSaveRecord* ThePlayerRecord );
	void LoadAppearance ( class ASFXPawn_Player* Player, struct FPlayerSaveRecord* Record );
	void eventLoadHenchman ( class ASFXPawn_Henchman* Hench );
	void eventLoadPlayer ( int PlayerID );
	void GetSpawnData ( int* IsFemale, class UClass** CharacterClass, struct FString* FirstName, unsigned char* Origin, unsigned char* Notoriety );
	void SaveHotKeys ( class ABioPlayerController* PC, struct TArray<struct FHotKeySaveRecord>* Records );
	void SaveWeapons ( class ASFXPawn_Player* Player, struct TArray<struct FWeaponSaveRecord>* Records );
	void SavePowers ( class ASFXPawn* Pawn, struct TArray<struct FPowerSaveRecord>* Records );
	bool SaveMorphHead ( class UBioMorphFace* Morph, struct FMorphHeadSaveRecord* Record );
	void SaveAppearance ( class ASFXPawn_Player* Player, struct FAppearanceSaveRecord* Record );
	void eventSaveHenchmen ( int PlayerID );
	void EnsureHenchmanRecordExists ( class ASFXPawn_Henchman* Hench );
	void eventSavePlayer ( int PlayerID );
	bool GetPlayerRecord ( struct FPlayerSaveRecord* Record );
};

// Class SFXGame.SFXSelectionLensFlareComponent
// 0x0000 (0x0274 - 0x0274)
class USFXSelectionLensFlareComponent : public ULensFlareComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSelectionModule
// 0x003C (0x00A8 - 0x006C)
class USFXSelectionModule : public USFXModule
{
public:
	struct FVector                                     m_TargetOffset;                                   		// 0x006C (0x000C) [0x0000000004000009]              ( CPF_Edit | CPF_ExportObject | CPF_EditInline )
	class USFXSelectionLensFlareComponent*             LensFlareComp;                                    		// 0x0078 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULensFlare*                                  LensFlareTemplate;                                		// 0x0080 (0x0008) [0x0000000000000000]              
	class USeqVar_Bool*                                TargetSaveBool;                                   		// 0x0088 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USeqVar_Bool*                                CombatTargetSaveBool;                             		// 0x0090 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_srTargetTipText;                                		// 0x0098 (0x0004) [0x0000000004000009]              ( CPF_Edit | CPF_ExportObject | CPF_EditInline )
	int                                                m_srGameName;                                     		// 0x009C (0x0004) [0x0000000004000009]              ( CPF_Edit | CPF_ExportObject | CPF_EditInline )
	float                                              m_fSelectionRadius;                               		// 0x00A0 (0x0004) [0x0000000004000009]              ( CPF_Edit | CPF_ExportObject | CPF_EditInline )
	unsigned long                                      m_bTargetable : 1;                                		// 0x00A4 (0x0004) [0x0000000004000009] [0x00000001] ( CPF_Edit | CPF_ExportObject | CPF_EditInline )
	unsigned long                                      m_bCombatTargetable : 1;                          		// 0x00A4 (0x0004) [0x0000000004000009] [0x00000002] ( CPF_Edit | CPF_ExportObject | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PostBeginPlay ( );
	void SetCombatTargetable ( unsigned long bTargetable );
	void SetTargetable ( unsigned long bTargetable );
	struct FVector GetSelectionPoint ( );
};

// Class SFXGame.SFXSimpleUseModule
// 0x0014 (0x00BC - 0x00A8)
class USFXSimpleUseModule : public USFXSelectionModule
{
public:
	struct FScriptDelegate                             __OnUsed__Delegate;                               		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              fUseRange;                                        		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsDefaultActionPossible ( );
	void OnUsed ( class AActor* User );
};

// Class SFXGame.SFXVersionDependentSelectionModule
// 0x0004 (0x00AC - 0x00A8)
class USFXVersionDependentSelectionModule : public USFXSelectionModule
{
public:
	unsigned long                                      selectable : 1;                                   		// 0x00A8 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PostBeginPlay ( );
	bool IsEnglishBuild ( );
};

// Class SFXGame.SFXTrilogyProfileSettings
// 0x0010 (0x00D8 - 0x00C8)
class USFXTrilogyProfileSettings : public UOnlineProfileSettings
{
public:
	struct TArray<struct FTrilogyGrinderAchievementData> StaticTrilogyGrinderAchievementData;              		// 0x00C8 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsComplete ( class ABioPlayerController* PC, unsigned char AchievementId );
	void UnlockAchievement ( class ABioPlayerController* PC, unsigned char AchievementId );
	void ResetTrilogyData ( class ABioPlayerController* PC );
	void GrinderStatReset ( int ProfileSettingId, class ABioPlayerController* PC );
	void UniqueStatIncrement ( int ProfileSettingId, class ABioPlayerController* PC );
	void GrinderStatIncrement ( int ProfileSettingId, int Amount, class ABioPlayerController* PC );
};

// Class SFXGame.SFXVocalizationBank
// 0x0020 (0x0080 - 0x0060)
class USFXVocalizationBank : public UObject
{
public:
	struct TArray<struct FSFXVocalizationRole>         Vocalizations;                                    		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FSFXVocalizationEventV2>      VocalizationsV2;                                  		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventMakeEntry ( struct FName Role, struct FName Event, struct FName Type, struct FName Variation, class UWwiseEvent* Sound );
	void ImportBadOldType ( struct FName* Type, struct FName* Variation );
	void EnsureArrays ( int I, int J );
};

// Class SFXGame.SFXVocalizationManagerNativeBase
// 0x0042 (0x02CC - 0x028A)
class ASFXVocalizationManagerNativeBase : public AActor
{
public:
	struct TArray<class ABioPawn*>                     m_aIgnorePawn;                                    		// 0x028C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FSFXVocalizationEventProperties> EventProperties;                                  		// 0x029C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FSFXVocalizationEvent>        QueuedEvents;                                     		// 0x02AC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USFXVocalizationBank*                        OverridesAllIfSet;                                		// 0x02BC (0x0008) [0x0000000000000000]              
	int                                                DebugCounter;                                     		// 0x02C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bDebugging : 1;                                   		// 0x02C8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bAlwaysPlay : 1;                                  		// 0x02C8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTickEvents ( float DeltaTime );
	struct FString eventDebugOutput ( int Type, int Value );
	bool SpecificNameMatches ( unsigned char Type, class ABioPawn* Pawn );
	bool SpecificChallengeMatches ( unsigned char Type, class ABioPawn* Pawn );
	bool SpecificWeaponMatches ( unsigned char Type, class ABioPawn* Pawn );
	bool SpecificGenderMatches ( unsigned char Type, class ABioPawn* Pawn );
	bool SpecificAffiliationMatches ( int Idx, class ABioPawn* Pawn );
	bool SpecificCharacterTypeMatches ( unsigned char Type, class ABioPawn* Pawn );
	bool SpecificLocationMatches ( unsigned char Type, class ABioPawn* BP, class ABioPawn* Speaker );
	bool HandleSFXVocalizationEvent ( struct FSFXVocalizationEvent* Event );
	void RemoveFromIgnoreList ( class ABioPawn* oPawn );
	void AddToIgnoreList ( class ABioPawn* oPawn );
	class USFXVocalizationBank* eventGetPawnVocalizationBank ( class ABioPawn* P );
	bool eventPlaySFXVocalizationSLineInternal ( class ABioPawn* Speaker, float DelaySec, struct FSFXVocalizationEvent* Event, struct FSFXVocalizationLine* LineToPlay );
};

// Class SFXGame.SFXVocalizationTypes
// 0x0010 (0x0070 - 0x0060)
class USFXVocalizationTypes : public UObject
{
public:
	struct TArray<class UObject*>                      EnumForType;                                      		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio2DA
// 0x0108 (0x0168 - 0x0060)
class UBio2DA : public UObject
{
public:
	struct FMap_Mirror                                 m_CellDataMap;                                    		// 0x0060 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 m_MasterRowNameToIndex;                           		// 0x00A8 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 m_ColumnIndex;                                    		// 0x00F0 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct TArray<struct FBio2DACellData>              m_CellData;                                       		// 0x0138 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FBio2daMasterRowIndexRec>     m_MasterRowIndex;                                 		// 0x0148 (0x0010) [0x0000000000001000]              ( CPF_Native )
	struct TArray<struct FName>                        m_sRowLabel;                                      		// 0x0158 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int GetRowNumber ( int nRowIndex );
	struct TArray<struct FName> GetRowNames ( );
	struct FName GetRowName ( int nRowIndex );
	int GetNumberedRowIndex ( int nRowID );
	int GetRowIndex ( struct FName nmRowLabel );
	struct TArray<struct FName> GetColumnNames ( );
	struct FName GetColumnName ( int nColumn );
	int GetColumnIndex ( struct FName nmColumnLabel );
	bool GetFloatEntryNumN ( int nRowID, struct FName sColumn, float* fEntry );
	bool GetFloatEntryNumI ( int nRowID, int nColumn, float* fEntry );
	bool GetFloatEntryNN ( struct FName sRow, struct FName sColumn, float* fEntry );
	bool GetFloatEntryNI ( struct FName sRow, int nColumn, float* fEntry );
	bool GetFloatEntryIN ( int nRow, struct FName sColumn, float* fEntry );
	bool GetFloatEntryII ( int nRow, int nColumn, float* fEntry );
	bool GetIntEntryNumN ( int nRowID, struct FName sColumn, int* nEntry );
	bool GetIntEntryNumI ( int nRowID, int nColumn, int* nEntry );
	bool GetIntEntryNN ( struct FName sRow, struct FName sColumn, int* nEntry );
	bool GetIntEntryNI ( struct FName sRow, int nColumn, int* nEntry );
	bool GetIntEntryIN ( int nRow, struct FName sColumn, int* nEntry );
	bool GetIntEntryII ( int nRow, int nColumn, int* nEntry );
	bool GetNameEntryNumN ( int nRowID, struct FName sColumn, struct FName* nEntry );
	bool GetNameEntryNumI ( int nRowID, int nColumn, struct FName* nEntry );
	bool GetNameEntryNN ( struct FName sRow, struct FName sColumn, struct FName* nEntry );
	bool GetNameEntryNI ( struct FName sRow, int nColumn, struct FName* nEntry );
	bool GetNameEntryIN ( int nRow, struct FName sColumn, struct FName* nEntry );
	bool GetNameEntryII ( int nRow, int nColumn, struct FName* nEntry );
	bool GetStringEntryNumN ( int nRowID, struct FName sColumn, struct FString* sEntry );
	bool GetStringEntryNumI ( int nRowID, int nColumn, struct FString* sEntry );
	bool GetStringEntryNN ( struct FName sRow, struct FName sColumn, struct FString* sEntry );
	bool GetStringEntryNI ( struct FName sRow, int nColumn, struct FString* sEntry );
	bool GetStringEntryIN ( int nRow, struct FName sColumn, struct FString* sEntry );
	bool GetStringEntryII ( int nRow, int nColumn, struct FString* sEntry );
	int GetNumRows ( );
	int GetNumColumns ( );
};

// Class SFXGame.Bio2DANumberedRows
// 0x0068 (0x01D0 - 0x0168)
class UBio2DANumberedRows : public UBio2DA
{
public:
	struct FMap_Mirror                                 m_MasterRowNumberToArrayIndex;                    		// 0x0168 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct TArray<struct FBio2daMasterRowIndexRec>     m_MasterNumberedRowIndex;                         		// 0x01B0 (0x0010) [0x0000000000001000]              ( CPF_Native )
	struct TArray<int>                                 m_lstRowNumbers;                                  		// 0x01C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAFComponent
// 0x0010 (0x0070 - 0x0060)
class UBioAFComponent : public UObject
{
public:
	class AActor*                                      Owner;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	class AActor*                                      Instigator;                                       		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioActive
// 0x0005 (0x0075 - 0x0070)
class UBioActive : public UBioAFComponent
{
public:
	unsigned long                                      m_bBeingShutdown : 1;                             		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bUpdateOnShutdown : 1;                          		// 0x0070 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      m_InitalizationEventType;                         		// 0x0074 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool StartActiveFromScript ( );
	bool EndActive ( );
	struct FName eventGetEventTypeName ( );
	void Initialize ( class AActor* oOwner );
	void InitializeInternal ( );
};

// Class SFXGame.BioActivePower
// 0x007D (0x00F2 - 0x0075)
class UBioActivePower : public UBioActive
{
public:
	struct FVector                                     m_vOriginalCameraLocation;                        		// 0x0078 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_rOriginalCameraRotation;                        		// 0x0084 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vLocationToAimAt;                               		// 0x0090 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UBioPower*                                   m_oPower;                                         		// 0x009C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       m_oCaster;                                        		// 0x00A4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    m_oCasterAsBioPawn;                               		// 0x00AC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioEpicPawnBehavior*                        m_oCasterBehavior;                                		// 0x00B4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioPlayerController*                        m_oCasterAsPlayerController;                      		// 0x00BC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UAnimSet*                                    m_oAnimSet;                                       		// 0x00C4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_oTargetToAimAt;                                 		// 0x00CC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nReservationID;                                 		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPowerStateElapsed;                             		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxWaitTimeForAnimation;                       		// 0x00DC (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fCurrentWaitTimeForAnimation;                   		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCastingBeamTime;                               		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nTag;                                           		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bCasterIsHenchman : 1;                          		// 0x00EC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bSkipPowerCooldown : 1;                         		// 0x00EC (0x0004) [0x0000000000006000] [0x00000002] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bManualIgnoreCooldown : 1;                      		// 0x00EC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bUsePowerReservation : 1;                       		// 0x00EC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bInstantPowerUse : 1;                           		// 0x00EC (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bPlayAnimations : 1;                            		// 0x00EC (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bAnimationReadyForPowerRelease : 1;             		// 0x00EC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bReleaseAnimEnded : 1;                          		// 0x00EC (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bWaitingForAnimationToStart : 1;                		// 0x00EC (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bShowPowerAiming : 1;                           		// 0x00EC (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bEnablePowerCooldown : 1;                       		// 0x00EC (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      m_bShowPowerImpactText : 1;                       		// 0x00EC (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      m_bDisplayingCastingBeam : 1;                     		// 0x00EC (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      m_bPlayerOrderedPowerUse : 1;                     		// 0x00EC (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      m_bIgnoreSuppression : 1;                         		// 0x00EC (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned char                                      m_ePowerState;                                    		// 0x00F0 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_ePreviousCoverAction;                           		// 0x00F1 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ClearPreviousCoverAction ( );
	void eventOnCastAt ( class AActor* Target, class AActor* Caster, class UBioPower* Power );
	void eventReleasedOnActor ( );
	void eventTriggerPowerVocalization ( );
	class AProjectile* eventSpawnProjectile ( );
	bool eventAimProjectilePower ( );
	void OnAnimReleaseEnd ( );
	void OnAnimReleaseBegin ( );
	void OnAnimCastingEnd ( );
	void OnAnimCastingBegin ( );
	void UpdatePowerOrder ( unsigned long bOrderedByPlayer, unsigned long bIgnoreSuppression );
	void SetTargetLocation ( struct FVector vLocation );
	void SetTargetActor ( class AActor* oTarget );
	bool CancelPower ( unsigned long bOnlyCancelIfCasting );
	void AnimationReadyForPowerRelease ( );
};

// Class SFXGame.BioActiveUseArtPlaceable
// 0x0013 (0x0088 - 0x0075)
class UBioActiveUseArtPlaceable : public UBioActive
{
public:
	class UBioReactiveUseArtPlaceable*                 Reactive;                                         		// 0x0078 (0x0008) [0x0000000000000000]              
	float                                              m_fDelay;                                         		// 0x0080 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDone : 1;                                      		// 0x0084 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetProgress ( );
	void InitializeInternal ( );
};

// Class SFXGame.BioReactive
// 0x0004 (0x0074 - 0x0070)
class UBioReactive : public UBioAFComponent
{
public:
	unsigned long                                      m_bActivated : 1;                                 		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDataInitialized : 1;                           		// 0x0070 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Initialize ( class AActor* oOwner, class AActor* oInstigator );
	void InitializeInternal ( );
};

// Class SFXGame.BioReactiveUseArtPlaceable
// 0x0014 (0x0088 - 0x0074)
class UBioReactiveUseArtPlaceable : public UBioReactive
{
public:
	class UBioActiveUseArtPlaceable*                   Active;                                           		// 0x0074 (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmSkillToGoto;                                  		// 0x007C (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bTransitionIntialized : 1;                      		// 0x0084 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDone : 1;                                        		// 0x0084 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioActorFactory
// 0x0039 (0x00C5 - 0x008C)
class UBioActorFactory : public UActorFactory
{
public:
	struct TArray<class UObject*>                      ActorResourceCollection;                          		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     InitialVelocity;                                  		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UBioActorType*                               ActorType;                                        		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UDistributionVector*                         AdditionalVelocity;                               		// 0x00B0 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDistributionVector*                         InitialAngularVelocity;                           		// 0x00B8 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bEnableInitialVelocity : 1;                       		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLocalSpaceInitialVelocity : 1;                   		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      BakeActorResources : 1;                           		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      RBChannel;                                        		// 0x00C4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioActorType
// 0x004C (0x00B8 - 0x006C)
class UBioActorType : public UBioBaseComponent
{
public:
	struct FString                                     ActorGameName;                                    		// 0x006C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      m_clsActor;                                       		// 0x007C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class USFXVocalizationBank*                        VocalizationBank;                                 		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                ActorGameNameStrRef;                              		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsDamageRelativeVelocityThreshold;        		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsDamageScalar;                           		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsDamageImpulseScalar;                    		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsDamageMinThreshold;                     		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsDamageMaxAllowedPerHit;                 		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nPhysicsLevel;                                  		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fUseRange;                                      		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nRequiredScanLevel;                             		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nTargetTipText;                                 		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bMin1Health : 1;                                		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bTargetable : 1;                                		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bCombatTargetable : 1;                          		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bDefaultActionPossibleOverridden : 1;           		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bPlotProtected : 1;                             		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bSuppressDisintegration : 1;                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsDisintegrationSuppressed ( );
	bool IsPlotProtected ( );
};

// Class SFXGame.BioInteractiveActorType
// 0x0000 (0x00B8 - 0x00B8)
class UBioInteractiveActorType : public UBioActorType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioArtPlaceableType
// 0x004B (0x0103 - 0x00B8)
class UBioArtPlaceableType : public UBioInteractiveActorType
{
public:
	class UBioBaseAppearancePlaceable*                 m_oApperance;                                     		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmDestroyedState;                               		// 0x00C0 (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmDamagedState;                                 		// 0x00C8 (0x0008) [0x0000000000000000]              
	struct FName                                       DefaultStartingState;                             		// 0x00D0 (0x0008) [0x0000000000000000]              
	struct FName                                       OnUseSucceed;                                     		// 0x00D8 (0x0008) [0x0000000000000000]              
	struct FName                                       OnUseFail;                                        		// 0x00E0 (0x0008) [0x0000000000000000]              
	struct FName                                       DefaultInertState;                                		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioArtPlaceableRoles*                       m_RoleData;                                       		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bPhysicsAffectable : 1;                         		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bPhysicsAffectableOnDestroyed : 1;              		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bPhysicsFixedAnimated : 1;                      		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bIsContainer : 1;                               		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bAllowRoleCustomization : 1;                    		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bIsStatic : 1;                                  		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      m_bIsMovable : 1;                                 		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      m_bIsDeletable : 1;                               		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned char                                      m_eUseCase;                                       		// 0x00FC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_StartingState;                                  		// 0x00FD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_InertState;                                     		// 0x00FE (0x0001) [0x0000000000000000]              
	unsigned char                                      m_State0;                                         		// 0x00FF (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_State1;                                         		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_SkillDifficulty;                                		// 0x0101 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eRole;                                          		// 0x0102 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyRoleToBehavior ( class UBioArtPlaceableBehavior* oBehave );
	void AllowRoleCustomization ( unsigned long bYes );
	void ApplyRole ( int nNewRole, class UBioArtPlaceableBehavior* oBehave );
};

// Class SFXGame.BioPawnType
// 0x00EC (0x01A4 - 0x00B8)
class UBioPawnType : public UBioInteractiveActorType
{
public:
	class UClass*                                      PawnClass;                                        		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      AIController;                                     		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      CharacterBloodColor[ 0x17 ];                      		// 0x00C8 (0x005C) [0x0000000000000000]              
	struct FName                                       m_nmDefaultAIBehaviour;                           		// 0x0124 (0x0008) [0x0000000000000000]              
	class USFXLoadoutData*                             Loadout;                                          		// 0x012C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             EliteCrust;                                       		// 0x0134 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             DeathCrust;                                       		// 0x013C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBio_Appr_Character*                         m_oAppearance;                                    		// 0x0144 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBio_Appr_Character_Settings*                m_oAppearanceSettings;                            		// 0x014C (0x0008) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UBioMorphFace*                               m_oMorphFace;                                     		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UFaceFXAnimSet*                              m_pSndSetFaceFXPkg;                               		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       m_oRollingIdle;                                   		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       m_oRollingStartMoving;                            		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioMaterialOverride*                        m_oMaterialOverrides;                             		// 0x0174 (0x0008) [0x0000000004420009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	float                                              m_fPowerUsePercent;                               		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nMinAutoLODLevel;                               		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsRecoverSpeedThreshold;                  		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsSettleDownTime;                         		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDeathAnimationMagnitudeThreshold;              		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsThreshold;                              		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsThresholdRegenerationRate;              		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsFemale : 1;                                    		// 0x0198 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bIsArmorOverridden : 1;                         		// 0x0198 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bCanBeBumped : 1;                               		// 0x0198 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bTerminateRagdollOnDeath : 1;                   		// 0x0198 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bCanBePhysicsImpacted : 1;                      		// 0x0198 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      m_eDefaultAIBehaviour;                            		// 0x019C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eReportMethod;                                  		// 0x019D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eDefaultClassification;                         		// 0x019E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eUseRollingInPhysicsMode;                       		// 0x019F (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RaceType;                                         		// 0x01A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CharacterType;                                    		// 0x01A1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AffiliationType;                                  		// 0x01A2 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ChallengeType;                                    		// 0x01A3 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioStageType
// 0x0018 (0x00D0 - 0x00B8)
class UBioStageType : public UBioActorType
{
public:
	struct TArray<struct FBioStageCamera>              m_CameraList;                                     		// 0x00B8 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	class USkeletalMesh*                               m_Mesh;                                           		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioArtPlaceableRoles
// 0x0030 (0x0090 - 0x0060)
class UBioArtPlaceableRoles : public UObject
{
public:
	struct FArtPlaceableRole                           oDefaults;                                        		// 0x0060 (0x0020) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FArtPlaceableRole>            aRoles;                                           		// 0x0080 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnim_TurnInPlace_Rotator
// 0x0013 (0x0110 - 0x00FD)
class UBioAnim_TurnInPlace_Rotator : public UAnimNodeBlendBase
{
public:
	class ABioPawn*                                    BioPawnOwner;                                     		// 0x0100 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UBioAnimNodeBlend_TurnInPlace*               TurnInPlaceNode;                                  		// 0x0108 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimCheckBlendOut
// 0x0020 (0x0080 - 0x0060)
class UBioAnimCheckBlendOut : public UObject
{
public:
	struct FBioAnimCheckBlendOutPath                   PathsLL;                                          		// 0x0060 (0x0018) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UAnimNode*                                   Parent;                                           		// 0x0078 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimMovementSync
// 0x0014 (0x0074 - 0x0060)
class UBioAnimMovementSync : public UObject
{
public:
	struct TArray<struct FBioAnimMovementSyncNode>     MovementNodes;                                    		// 0x0060 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bInitialized : 1;                                 		// 0x0070 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlend_TurnInPlace
// 0x0048 (0x0164 - 0x011C)
class UBioAnimNodeBlend_TurnInPlace : public UAnimNodeBlendList
{
public:
	struct TArray<struct FRotTransitionInfo>           RotTransitions;                                   		// 0x011C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ABioPawn*                                    BioPawnOwner;                                     		// 0x012C (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                LastPawnYaw;                                      		// 0x0134 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              PawnRotationRate;                                 		// 0x0138 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                LastRootBoneYaw;                                  		// 0x013C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                YawOffset;                                        		// 0x0140 (0x0004) [0x0000000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )
	float                                              TransitionBlendInTime;                            		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TransitionBlendOutTime;                           		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentTransitionIndex;                           		// 0x014C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TransitionThresholdAngle;                         		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRotationResetRate;                               		// 0x0154 (0x0004) [0x0000000000000000]              
	float                                              AbortThresholdPercentage;                         		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AbortTransitionBlendTime;                         		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInitialized : 1;                                 		// 0x0160 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bRootRotInitialized : 1;                          		// 0x0160 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDelayBlendOutToPlayAnim : 1;                     		// 0x0160 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPlayingTurnTransition : 1;                       		// 0x0160 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bTransitioningToIdle : 1;                         		// 0x0160 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendBase
// 0x001F (0x011C - 0x00FD)
class UBioAnimNodeBlendBase : public UAnimNodeBlendBase
{
public:
	float                                              m_fBlendTime;                                     		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              m_fRemainingTime;                                 		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              m_fTotalBlendTime;                                		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              m_fTargetWeight;                                  		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                m_nLastChild;                                     		// 0x0110 (0x0004) [0x0000000000000000]              
	int                                                m_nTargetChild;                                   		// 0x0114 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsBlending : 1;                                		// 0x0118 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bTriggerTimeBlend : 1;                          		// 0x0118 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bBlendDirect : 1;                               		// 0x0118 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bShowSlider : 1;                                		// 0x0118 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetChildAnimTime ( class UAnimNode* oChild, float fTime );
};

// Class SFXGame.BioAnimNodeBlendAdditive
// 0x0000 (0x011C - 0x011C)
class UBioAnimNodeBlendAdditive : public UBioAnimNodeBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendAdditiveCover
// 0x0008 (0x0124 - 0x011C)
class UBioAnimNodeBlendAdditiveCover : public UBioAnimNodeBlendAdditive
{
public:
	float                                              BlendInDuration;                                  		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutDuration;                                 		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendAdditiveDamage
// 0x001C (0x0138 - 0x011C)
class UBioAnimNodeBlendAdditiveDamage : public UBioAnimNodeBlendAdditive
{
public:
	struct FVector                                     m_vDamageDir;                                     		// 0x011C (0x000C) [0x0000000000000000]              
	int                                                DamageNodeIndex;                                  		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDamageThreshold;                               		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nDamageIndex;                                   		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bLastDamageNode : 1;                              		// 0x0134 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProcessDamage : 1;                               		// 0x0134 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeCameraShake
// 0x001C (0x0138 - 0x011C)
class UBioAnimNodeCameraShake : public UBioAnimNodeBlendAdditive
{
public:
	class UBioCameraShake*                             m_cameraShake;                                    		// 0x011C (0x0008) [0x0000000000000000]              
	float                                              m_intensity;                                      		// 0x0124 (0x0004) [0x0000000000000000]              
	float                                              m_time;                                           		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              m_fadeInTime;                                     		// 0x012C (0x0004) [0x0000000000000000]              
	float                                              m_fadeOutTime;                                    		// 0x0130 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_IsPlaying : 1;                                  		// 0x0134 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_isLoopingForever : 1;                           		// 0x0134 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_isFadingIn : 1;                                 		// 0x0134 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_hasFadeOut : 1;                                 		// 0x0134 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_isFadingOut : 1;                                		// 0x0134 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByDeath
// 0x0050 (0x016C - 0x011C)
class UBioAnimNodeBlendByDeath : public UBioAnimNodeBlendBase
{
public:
	struct FName                                       Head;                                             		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LeftArm;                                          		// 0x0124 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RightArm;                                         		// 0x012C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LeftLeg;                                          		// 0x0134 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RightLeg;                                         		// 0x013C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DeathEventName;                                   		// 0x0144 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nHeadRoot;                                      		// 0x014C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nLeftArmRoot;                                   		// 0x0150 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nRightArmRoot;                                  		// 0x0154 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nLeftLegRoot;                                   		// 0x0158 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nRightLegRoot;                                  		// 0x015C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fTimeToRagdoll;                                 		// 0x0160 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentTime;                                   		// 0x0164 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bEventTriggered : 1;                            		// 0x0168 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByIncline
// 0x0014 (0x0130 - 0x011C)
class UBioAnimNodeBlendByIncline : public UBioAnimNodeBlendBase
{
public:
	float                                              BlendDuration;                                    		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInclineUpAngle;                                		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInclineDownAngle;                              		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInclineAngle;                                  		// 0x0128 (0x0004) [0x0000000000000000]              
	unsigned long                                      bForceLevelReferenceAngle : 1;                    		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByLean
// 0x0018 (0x0134 - 0x011C)
class UBioAnimNodeBlendByLean : public UBioAnimNodeBlendBase
{
public:
	float                                              BlendDuration;                                    		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendAcrossDuration;                              		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxLeanAngle;                                     		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLeanAngle;                                     		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              m_fLastLeanAngle;                                 		// 0x012C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bSwitchingLean : 1;                             		// 0x0130 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendDirectional
// 0x0014 (0x0130 - 0x011C)
class UBioAnimNodeBlendDirectional : public UBioAnimNodeBlendBase
{
public:
	float                                              DirDegreesPerSecond;                              		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForeBackBlendTime;                                		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationDeadzone;                                 		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDirAngle;                                      		// 0x0128 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bForward : 1;                                   		// 0x012C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bWasMoving : 1;                                 		// 0x012C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendDirStart
// 0x0010 (0x012C - 0x011C)
class UBioAnimNodeBlendDirStart : public UBioAnimNodeBlendBase
{
public:
	float                                              m_fStartHeading;                                  		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              LeftStartTime;                                    		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RightStartTime;                                   		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsStarting : 1;                                		// 0x0128 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendGetUp
// 0x0000 (0x011C - 0x011C)
class UBioAnimNodeBlendGetUp : public UBioAnimNodeBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendMoveStop
// 0x0000 (0x011C - 0x011C)
class UBioAnimNodeBlendMoveStop : public UBioAnimNodeBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendMultiAdditive
// 0x004C (0x0168 - 0x011C)
class UBioAnimNodeBlendMultiAdditive : public UBioAnimNodeBlendBase
{
public:
	struct FMap_Mirror                                 m_mapActivateTimes;                               		// 0x011C (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                m_nNumAdditiveChildren;                           		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendPoseAndGestures
// 0x0024 (0x018C - 0x0168)
class UBioAnimNodeBlendPoseAndGestures : public UBioAnimNodeBlendMultiAdditive
{
public:
	struct TArray<struct FName>                        m_aChildAnimsets;                                 		// 0x0168 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FBioChildPinData>             m_aChildPinData;                                  		// 0x0178 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bGesturePlaying : 1;                            		// 0x0188 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendPose
// 0x001C (0x0138 - 0x011C)
class UBioAnimNodeBlendPose : public UBioAnimNodeBlendBase
{
public:
	struct TArray<struct FName>                        m_aChildAnimsets;                                 		// 0x011C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fTransEndTime;                                  		// 0x012C (0x0004) [0x0000000000000000]              
	float                                              m_fEndBlendDuration;                              		// 0x0130 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bTransitioning : 1;                             		// 0x0134 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendScalar
// 0x0058 (0x0174 - 0x011C)
class UBioAnimNodeBlendScalar : public UBioAnimNodeBlendBase
{
public:
	struct TArray<struct FBioScalarBlendParams>        m_aChildBlendParams;                              		// 0x011C (0x0010) [0x0000000004420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	struct FString                                     m_sDescription;                                   		// 0x012C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FBioScalarPrecomputedValues>  m_aChildPrecomputes;                              		// 0x013C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioAnimNodeBlendScalarBehavior*             m_oBehavior;                                      		// 0x014C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              m_fBlendPctPerSecond;                             		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fBlendSpanTime;                                 		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRangeMin;                                      		// 0x015C (0x0004) [0x0000000000000000]              
	float                                              m_fRangeMax;                                      		// 0x0160 (0x0004) [0x0000000000000000]              
	float                                              m_fUnitsPerSecond;                                		// 0x0164 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentScalar;                                 		// 0x0168 (0x0004) [0x0000000000000000]              
	float                                              m_fTargetScalar;                                  		// 0x016C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bBlendInstant : 1;                              		// 0x0170 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bUseBlendSpanTime : 1;                          		// 0x0170 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendSkidTurn
// 0x0020 (0x013C - 0x011C)
class UBioAnimNodeBlendSkidTurn : public UBioAnimNodeBlendBase
{
public:
	float                                              m_fSkidHeading;                                   		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              RightNearAngle;                                   		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RightFarAngle;                                    		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeftNearAngle;                                    		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeftFarAngle;                                     		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeftStartTime;                                    		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RightStartTime;                                   		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsSkidding : 1;                                		// 0x0138 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bFinishSkidStarted : 1;                         		// 0x0138 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendSpeed
// 0x002D (0x0149 - 0x011C)
class UBioAnimNodeBlendSpeed : public UBioAnimNodeBlendBase
{
public:
	float                                              BlendTimeToIdle;                                  		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTimeFromIdle;                                		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTimeMoving;                                  		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WalkSpeed;                                        		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RunSpeed;                                         		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WalkRateScaled;                                   		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RunRateScaled;                                    		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fStartSpeed;                                    		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentSpeed;                                  		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              m_fStartCheckTime;                                		// 0x0140 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsStarting : 1;                                		// 0x0144 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bIsStarted : 1;                                 		// 0x0144 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      SpeedType;                                        		// 0x0148 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendState
// 0x0024 (0x0140 - 0x011C)
class UBioAnimNodeBlendState : public UBioAnimNodeBlendBase
{
public:
	struct TArray<struct FBioAnimBlendParams>          m_aChildBlendParams;                              		// 0x011C (0x0010) [0x0000000004420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	class UBioAnimCheckBlendOut*                       m_oBlendOut;                                      		// 0x012C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioAnimNodeBlendStateBehavior*              m_oBehavior;                                      		// 0x0134 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_nActiveChild;                                   		// 0x013C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeCombatMode
// 0x0015 (0x0131 - 0x011C)
class UBioAnimNodeCombatMode : public UBioAnimNodeBlendBase
{
public:
	float                                              m_blendIntoTransitionDuration;                    		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_blendOutOfTransitionDuration;                   		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_blendFromNonCombatToCombatDuration;             		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_blendFromCombatToNonCombatDuration;             		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_isInitialStateDetermined : 1;                   		// 0x012C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      m_currentState;                                   		// 0x0130 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByAction
// 0x03CD (0x04E9 - 0x011C)
class UBioAnimNodeBlendByAction : public UAnimNodeBlendList
{
public:
	struct FBlendTime                                  m_aBlendTimeFromPostureNode[ 0xB ];               		// 0x011C (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromMountNode[ 0xB ];                 		// 0x0174 (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromHesitateNode[ 0xB ];              		// 0x01CC (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromFallNode[ 0xB ];                  		// 0x0224 (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromBioticNode[ 0xB ];                		// 0x027C (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromDeathNode[ 0xB ];                 		// 0x02D4 (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromDieNode[ 0xB ];                   		// 0x032C (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromTechNode[ 0xB ];                  		// 0x0384 (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromMatineeNode[ 0xB ];               		// 0x03DC (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromGetUpNode[ 0xB ];                 		// 0x0434 (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromGestures[ 0xB ];                  		// 0x048C (0x0058) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bHesitateAvailable : 1;                         		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bFallingAvailable : 1;                          		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned char                                      m_eCurrentAnimNode;                               		// 0x04E8 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByAim
// 0x0043 (0x0140 - 0x00FD)
class UBioAnimNodeBlendByAim : public UAnimNodeBlendBase
{
public:
	struct FBioAnimNodeBlendByAimLimits                LimitsDefault;                                    		// 0x0100 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBioAnimNodeBlendByAimLimits                LimitsMirrored;                                   		// 0x0110 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x0120 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              AimBlendOutDuration;                              		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              YawRate;                                          		// 0x012C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Yaw;                                              		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Pitch;                                            		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RemainingBlendDuration;                           		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUseMirrored : 1;                                 		// 0x013C (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByCustomAnim
// 0x0000 (0x0110 - 0x0110)
class UBioAnimNodeBlendByCustomAnim : public UAnimNodeBlend
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByDamage
// 0x0008 (0x0124 - 0x011C)
class UBioAnimNodeBlendByDamage : public UAnimNodeBlendList
{
public:
	int                                                m_nLastDamageIndex;                               		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAdditiveMode : 1;                                		// 0x0120 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByFireSequence
// 0x003C (0x0158 - 0x011C)
class UBioAnimNodeBlendByFireSequence : public UAnimNodeBlendList
{
public:
	struct TArray<class UAnimNodeSequence*>            CachedAnimSeqLoop;                                		// 0x011C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UAnimNodeSequence*>            CachedAnimSeqEnd;                                 		// 0x012C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     FlashLocation;                                    		// 0x013C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendDuration;                                    		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                QueuedTransition;                                 		// 0x014C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                FlashCount;                                       		// 0x0150 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      CacheUpdated : 1;                                 		// 0x0154 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float eventGetPlayRate ( class UAnimNodeSequence* Seq );
	void eventNotifyWeaponAnimationPlaying ( unsigned long Playing );
};

// Class SFXGame.BioAnimNodeBlendByPosture
// 0x0004 (0x0114 - 0x0110)
class UBioAnimNodeBlendByPosture : public UAnimNodeBlend
{
public:
	float                                              BlendDuration;                                    		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByPower
// 0x0005 (0x0121 - 0x011C)
class UBioAnimNodeBlendByPower : public UAnimNodeBlendList
{
public:
	int                                                LastTag;                                          		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      NotifyActive;                                     		// 0x0120 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SendPowerNotification ( );
};

// Class SFXGame.BioAnimNodeBlendByReload
// 0x0000 (0x011C - 0x011C)
class UBioAnimNodeBlendByReload : public UAnimNodeBlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float eventGetReloadDuration ( );
};

// Class SFXGame.BioAnimNodeBlendByStorm
// 0x0010 (0x012C - 0x011C)
class UBioAnimNodeBlendByStorm : public UAnimNodeBlendList
{
public:
	class UBioAnimMovementSync*                        MovementSync;                                     		// 0x011C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              Idle2StormBlendDuration;                          		// 0x0124 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Storm2IdleBlendDuration;                          		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByWeaponAction
// 0x0000 (0x011C - 0x011C)
class UBioAnimNodeBlendByWeaponAction : public UAnimNodeBlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventResetForcedReplayFlag ( );
	void eventResetInstantChangeFlag ( );
};

// Class SFXGame.BioAnimNodeBlendByWeaponEquip
// 0x0014 (0x0130 - 0x011C)
class UBioAnimNodeBlendByWeaponEquip : public UAnimNodeBlendList
{
public:
	float                                              IdleToDrawBlendDuration;                          		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IdleToHolsterBlendDuration;                       		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HolsterToDrawBlendDuration;                       		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HolsterToIdleBlendDuration;                       		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisabledIK : 1;                                  		// 0x012C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDrawAnimEnd ( );
	void eventHolsterAnimEnd ( );
};

// Class SFXGame.BioAnimNodeBlendFall
// 0x000C (0x0128 - 0x011C)
class UBioAnimNodeBlendFall : public UAnimNodeBlendList
{
public:
	float                                              BlendIntoFallingTime;                             		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendIntoLandingTime;                             		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRootMotionOverridden : 1;                        		// 0x0124 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendMovement
// 0x005C (0x0178 - 0x011C)
class UBioAnimNodeBlendMovement : public UAnimNodeBlendList
{
public:
	struct FName                                       WalkSynchGroupName;                               		// 0x011C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       RunSynchGroupName;                                		// 0x0124 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IdleSpeed;                                        		// 0x012C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinWalkSpeed;                                     		// 0x0130 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MidWalkSpeed;                                     		// 0x0134 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxWalkSpeed;                                     		// 0x0138 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinRunSpeed;                                      		// 0x013C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MidRunSpeed;                                      		// 0x0140 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxRunSpeed;                                      		// 0x0144 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IdleTimeout;                                      		// 0x0148 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendTimeIdle2Walk;                               		// 0x014C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendTimeIdle2Run;                                		// 0x0150 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendTimeWalk2Idle;                               		// 0x0154 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendTimeWalk2Run;                                		// 0x0158 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendTimeRun2Idle;                                		// 0x015C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendTimeRun2Walk;                                		// 0x0160 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IdleTimer;                                        		// 0x0164 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentSpeed;                                     		// 0x0168 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentAcceleration;                              		// 0x016C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentWalkRate;                                  		// 0x0170 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentRunRate;                                   		// 0x0174 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendPerBone
// 0x0029 (0x016D - 0x0144)
class UBioAnimNodeBlendPerBone : public UAnimNodeBlendPerBone
{
public:
	struct TArray<struct FName>                        BioBranchStartBoneName;                           		// 0x0144 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       BlendName;                                        		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverblendFactor;                                  		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeInTime;                                       		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutTime;                                      		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bNotifiedBlendComplete : 1;                     		// 0x0168 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bBoneSwitchOn : 1;                              		// 0x0168 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      BoneBlendType;                                    		// 0x016C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendScalarBehavior
// 0x0010 (0x0070 - 0x0060)
class UBioAnimNodeBlendScalarBehavior : public UObject
{
public:
	struct TArray<struct FBioAnimScalarNodeBehaviorDef> m_aNodeDefinitions;                               		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendScalarMovementBehavior
// 0x0008 (0x0078 - 0x0070)
class UBioAnimNodeBlendScalarMovementBehavior : public UBioAnimNodeBlendScalarBehavior
{
public:
	unsigned long                                      bUseSprint : 1;                                   		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSnapshotSpeed : 1;                            		// 0x0070 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseSnapshotStartSpeed : 1;                       		// 0x0070 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseLocalSpace : 1;                               		// 0x0070 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      MovementBehavior;                                 		// 0x0074 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MoveAxis;                                         		// 0x0075 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AxisDir;                                          		// 0x0076 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AxisDirMode;                                      		// 0x0077 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendStateBehavior
// 0x0014 (0x0074 - 0x0060)
class UBioAnimNodeBlendStateBehavior : public UObject
{
public:
	struct TArray<struct FBioAnimStateNodeBehaviorDef> m_aNodeDefinitions;                               		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fQueryPlayTime;                                 		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendStateActionBehavior
// 0x0005 (0x0079 - 0x0074)
class UBioAnimNodeBlendStateActionBehavior : public UBioAnimNodeBlendStateBehavior
{
public:
	unsigned long                                      m_bPlayedRecoverAnim : 1;                         		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      ActionBehavior;                                   		// 0x0078 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendStateCombatBehavior
// 0x0005 (0x0079 - 0x0074)
class UBioAnimNodeBlendStateCombatBehavior : public UBioAnimNodeBlendStateBehavior
{
public:
	unsigned long                                      bUseCoverAnimState : 1;                           		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOnlyDuringWeaponSwitch : 1;                      		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnlyDuringNoOffensiveAction : 1;                 		// 0x0074 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      CombatBehavior;                                   		// 0x0078 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendStateMovementBehavior
// 0x0023 (0x0097 - 0x0074)
class UBioAnimNodeBlendStateMovementBehavior : public UBioAnimNodeBlendStateBehavior
{
public:
	float                                              BlendDownPerc;                                    		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleByValue;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WalkRate;                                         		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RunRate;                                          		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendResetWeight;                                 		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fStartCheckTime;                                		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                m_nLastPhys;                                      		// 0x008C (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseSprint : 1;                                   		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSnapshotSpeed : 1;                            		// 0x0090 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseSnapshotStartSpeed : 1;                       		// 0x0090 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseDirStartControl : 1;                          		// 0x0090 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bIsStarted : 1;                                 		// 0x0090 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bInTakeoff : 1;                                 		// 0x0090 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bInLanding : 1;                                 		// 0x0090 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bPlayedAnim : 1;                                		// 0x0090 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bRootMotionOn : 1;                              		// 0x0090 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned char                                      MovementBehavior;                                 		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AxisDir;                                          		// 0x0095 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AxisDirMode;                                      		// 0x0096 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendStrafe
// 0x0023 (0x0120 - 0x00FD)
class UBioAnimNodeBlendStrafe : public UAnimNodeBlendBase
{
public:
	struct FName                                       SynchGroupName;                                   		// 0x0100 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBioAnimMovementSync*                        MovementSync;                                     		// 0x0108 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendSpeed;                                       		// 0x0110 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IdleRelativePos;                                  		// 0x0114 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IdleAngle;                                        		// 0x0118 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DirAngle;                                         		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendTurn
// 0x0010 (0x012C - 0x011C)
class UBioAnimNodeBlendTurn : public UAnimNodeBlendList
{
public:
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x011C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendTime;                                        		// 0x0124 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              YawTurnTriggerDegrees;                            		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeCover2Actions
// 0x0020 (0x013C - 0x011C)
class UBioAnimNodeCover2Actions : public UAnimNodeBlendList
{
public:
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x011C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              Default2LeanBlendDuration;                        		// 0x0124 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Lean2DefaultBlendDuration;                        		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Default2PopupBlendDuration;                       		// 0x012C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Popup2DefaultBlendDuration;                       		// 0x0130 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Default2PeekBlendDuration;                        		// 0x0134 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Peek2DefaultBlendDuration;                        		// 0x0138 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeCover2ChangeDirection
// 0x000E (0x012A - 0x011C)
class UBioAnimNodeCover2ChangeDirection : public UAnimNodeBlendList
{
public:
	float                                              IdleToTransitionBlendDuration;                    		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TransitionToIdleBlendDuration;                    		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bBlocking : 1;                                    		// 0x0124 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      CurrentCoverDirection;                            		// 0x0128 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      PendingCoverDirection;                            		// 0x0129 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeCover2Move
// 0x0010 (0x012C - 0x011C)
class UBioAnimNodeCover2Move : public UAnimNodeBlendList
{
public:
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x011C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              Idle2MoveBlendDuration;                           		// 0x0124 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Move2IdleBlendDuration;                           		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeCover2Neutral
// 0x0004 (0x0120 - 0x011C)
class UBioAnimNodeCover2Neutral : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeCover2Transition
// 0x0023 (0x013F - 0x011C)
class UBioAnimNodeCover2Transition : public UAnimNodeBlendList
{
public:
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x011C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              Intro2BodyBlendDuration;                          		// 0x0124 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Body2OutroBlendDuration;                          		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Intro2OutroBlendDuration;                         		// 0x012C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Outro2IntroBlendDuration;                         		// 0x0130 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      IntroIsBlocking : 1;                              		// 0x0134 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      OutroIsBlocking : 1;                              		// 0x0134 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bStopInputOnBlockingTransitions : 1;              		// 0x0134 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRequestedBlendOut : 1;                           		// 0x0134 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bCanceledBlendOut : 1;                            		// 0x0134 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bSkipIntro : 1;                                   		// 0x0134 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bBlocking : 1;                                    		// 0x0134 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned char                                      IntroRootMotionMode;                              		// 0x0138 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      IntroRootRotationMode;                            		// 0x0139 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      OutroRootMotionMode;                              		// 0x013A (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      OutroRootRotationMode;                            		// 0x013B (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      CurrentState;                                     		// 0x013C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      RootMotionMode;                                   		// 0x013D (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      RootRotationMode;                                 		// 0x013E (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventIgnorePlayerInput ( class ABioPawn* pPawn, unsigned long bIgnore );
};

// Class SFXGame.BioAnimNodeCover2Type
// 0x0001 (0x011D - 0x011C)
class UBioAnimNodeCover2Type : public UAnimNodeBlendList
{
public:
	unsigned char                                      LastCoverAction;                                  		// 0x011C (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeFrame
// 0x0017 (0x00FC - 0x00E5)
class UBioAnimNodeFrame : public UAnimNode
{
public:
	struct TArray<struct FBoneAtom>                    m_FrameBoneData;                                  		// 0x00E8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      m_bIsFrameDataValid : 1;                          		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bCaptureOnRelevant : 1;                         		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void CaptureAnimFrame ( );
};

// Class SFXGame.BioAnimNodeLocomotion
// 0x001C (0x0138 - 0x011C)
class UBioAnimNodeLocomotion : public UAnimNodeBlendList
{
public:
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x011C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              ToIdleBlendDuration;                              		// 0x0124 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ToMovingBlendDuration;                            		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ToStopBlendDuration;                              		// 0x012C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              IdleToStartBlendDuration;                         		// 0x0130 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StopToStartBlendDuration;                         		// 0x0134 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeLocomotionMoving
// 0x0043 (0x0140 - 0x00FD)
class UBioAnimNodeLocomotionMoving : public UAnimNodeBlendBase
{
public:
	struct FName                                       SynchGroupName;                                   		// 0x0100 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBioAnimMovementSync*                        MovementSync;                                     		// 0x0108 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendSpeed;                                       		// 0x0110 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendSpeedLeanIn;                                 		// 0x0114 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlendSpeedLeanOut;                                		// 0x0118 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngleLeanLeft;                                    		// 0x011C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngleLeanRight;                                   		// 0x0120 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngleAscend;                                      		// 0x0124 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngleDescend;                                     		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinSpeed;                                         		// 0x012C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MidSpeed;                                         		// 0x0130 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxSpeed;                                         		// 0x0134 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Lean;                                             		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Incline;                                          		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeLocomotionSpeed
// 0x0014 (0x0130 - 0x011C)
class UBioAnimNodeLocomotionSpeed : public UAnimNodeBlendList
{
public:
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x011C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendTime;                                        		// 0x0124 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RunSpeed;                                         		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              WalkSpeed;                                        		// 0x012C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeLocomotionStart
// 0x005F (0x015C - 0x00FD)
class UBioAnimNodeLocomotionStart : public UAnimNodeBlendBase
{
public:
	float                                              BlendOutRelPos[ 0x6 ];                            		// 0x0100 (0x0018) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FreeRotationRelPos[ 0x6 ];                        		// 0x0118 (0x0018) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SynchGroupName;                                   		// 0x0130 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LeftFootNormalizedRange[ 0x2 ];                   		// 0x0138 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBioAnimMovementSync*                        MovementSync;                                     		// 0x0140 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x0148 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendAngle;                                       		// 0x0150 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                StateTag;                                         		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bBlendingOut : 1;                                 		// 0x0158 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bOverrideRMM : 1;                                 		// 0x0158 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bOverrideRMR : 1;                                 		// 0x0158 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeLocomotionStop
// 0x0020 (0x013C - 0x011C)
class UBioAnimNodeLocomotionStop : public UAnimNodeBlendList
{
public:
	float                                              LeftFootNormalizedRange[ 0x2 ];                   		// 0x011C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x0124 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioAnimMovementSync*                        MovementSync;                                     		// 0x012C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendOutTime;                                     		// 0x0134 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bOverrideRootMotion : 1;                          		// 0x0138 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeRandom
// 0x0008 (0x0140 - 0x0138)
class UBioAnimNodeRandom : public UAnimNodeRandom
{
public:
	int                                                nChildOnActive;                                   		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceChildOnActive : 1;                          		// 0x013C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeSequence
// 0x0042 (0x017C - 0x013A)
class UBioAnimNodeSequence : public UAnimNodeSequence
{
public:
	struct FPointer                                    m_pDFCurTimeProp;                                 		// 0x013C (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pDFRateProp;                                    		// 0x0144 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    m_pDFSeqLenProp;                                  		// 0x014C (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     m_vTotalTranslation;                              		// 0x0154 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       DF_CurrentTime;                                   		// 0x0160 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DF_Rate;                                          		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DF_SequenceLength;                                		// 0x0170 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRandomizeStartTime : 1;                          		// 0x0178 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeSequenceByBoneRotation
// 0x001B (0x0155 - 0x013A)
class UBioAnimNodeSequenceByBoneRotation : public UAnimNodeSequence
{
public:
	struct TArray<struct FAnimByRotation>              AnimList;                                         		// 0x013C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       BoneName;                                         		// 0x014C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneAxis;                                         		// 0x0154 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeSequenceMirror
// 0x0026 (0x0160 - 0x013A)
class UBioAnimNodeSequenceMirror : public UAnimNodeSequence
{
public:
	struct FName                                       MirroredAnimSeqName;                              		// 0x013C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAnimSequence*                               MirroredAnimSeq;                                  		// 0x0144 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UAnimSequence*                               DefaultAnimSeq;                                   		// 0x014C (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                MirroredAnimLinkupIndex;                          		// 0x0154 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                DefaultAnimLinkupIndex;                           		// 0x0158 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bUseMirrored : 1;                                 		// 0x015C (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNotifyEvent
// 0x000C (0x006C - 0x0060)
class UBioAnimNotifyEvent : public UAnimNotify
{
public:
	struct FName                                       EventName;                                        		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      IsGlobal : 1;                                     		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNotifyVFX
// 0x0008 (0x0068 - 0x0060)
class UBioAnimNotifyVFX : public UAnimNotify
{
public:
	struct FName                                       m_nmVisualEffectLabel;                            		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioArtPlaceableBlendByTransition
// 0x0014 (0x0124 - 0x0110)
class UBioArtPlaceableBlendByTransition : public UAnimNodeBlend
{
public:
	class UAnimNodeSequence*                           aTransition;                                      		// 0x0110 (0x0008) [0x0000000000000000]              
	class UAnimNodeSequence*                           aState;                                           		// 0x0118 (0x0008) [0x0000000000000000]              
	unsigned long                                      bTransitioning : 1;                               		// 0x0120 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTransitionAllowed : 1;                           		// 0x0120 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void GotoToState ( struct FName LoopAnim );
	void TransitionToState ( struct FName TransAnim, struct FName LoopAnim );
};

// Class SFXGame.BioSkelControl_TurretConstrained
// 0x0032 (0x0134 - 0x0102)
class UBioSkelControl_TurretConstrained : public USkelControlSingleBone
{
public:
	struct FTurretConstraintData                       MaxAngle;                                         		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FTurretConstraintData                       MinAngle;                                         		// 0x0110 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    DesiredBoneRotation;                              		// 0x011C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              LagDegreesPerSecond;                              		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLagScale;                                      		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bConstrainPitch : 1;                              		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bConstrainYaw : 1;                                		// 0x0130 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bConstrainRoll : 1;                               		// 0x0130 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bInvertPitch : 1;                                 		// 0x0130 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bInvertYaw : 1;                                   		// 0x0130 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bInvertRoll : 1;                                  		// 0x0130 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSkelControlAdditiveLookAt
// 0x0008 (0x0150 - 0x0148)
class UBioSkelControlAdditiveLookAt : public USkelControlLookAt
{
public:
	float                                              MaxAngleUpDown;                                   		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSeparateUpDownLimit : 1;                         		// 0x014C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPawnLookAtController
// 0x0072 (0x01C2 - 0x0150)
class UBioPawnLookAtController : public UBioSkelControlAdditiveLookAt
{
public:
	struct FMatrix                                     m_mControlledRefPose;                             		// 0x0150 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    mc_pDefinition;                                   		// 0x0190 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class AActor*                                      m_pTargetActor;                                   		// 0x0198 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      m_pTargetMesh;                                    		// 0x01A0 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                m_nTargetBoneIndex;                               		// 0x01A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fDelayTimer;                                    		// 0x01AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nRootAnimBoneIndex;                             		// 0x01B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPrevAngVelocity;                               		// 0x01B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLimitZoneAngle;                                		// 0x01B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bDoAdditive : 1;                                		// 0x01BC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bAnimFirst : 1;                                 		// 0x01BC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bResetTargetLocation : 1;                       		// 0x01BC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bDisabling : 1;                                 		// 0x01BC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_RootAnimBoneLookAtInverted : 1;                 		// 0x01BC (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_RootAnimBoneUpInverted : 1;                     		// 0x01BC (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bTargetReached : 1;                             		// 0x01BC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bRootBoneYawOnly : 1;                           		// 0x01BC (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned char                                      m_RootAnimBoneLookAtAxis;                         		// 0x01C0 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_RootAnimBoneUpAxis;                             		// 0x01C1 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXAnimNodeSequenceEyeFixup
// 0x004A (0x0184 - 0x013A)
class USFXAnimNodeSequenceEyeFixup : public UAnimNodeSequence
{
public:
	struct TArray<struct FBoneAtom>                    EyeBoneDeltas;                                    		// 0x013C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<unsigned char>                       EyeBoneIndices;                                   		// 0x014C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FName>                        EyeBoneNames;                                     		// 0x015C (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct TArray<float>                               DebugDeltas;                                      		// 0x016C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              EyeRotationThreshold;                             		// 0x017C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bEnableEyeFixup : 1;                              		// 0x0180 (0x0004) [0x0000000000024000] [0x00000001] ( CPF_Config | CPF_EditConst )
	unsigned long                                      bPoseCached : 1;                                  		// 0x0180 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetPosition ( float NewTime, unsigned long bFireNotifies );
	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float InRate, float StartTime );
	void SetAnim ( struct FName Sequence );
};

// Class SFXGame.SFXDoor
// 0x00FB (0x03D3 - 0x02D8)
class ASFXDoor : public ASkeletalMeshActor
{
public:
	struct TArray<class ASFXDoorMarker*>               m_aDoorMarker;                                    		// 0x02D8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     m_sVarName;                                       		// 0x02E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sRefName;                                       		// 0x02F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FName>                        m_aIconSocket;                                    		// 0x0308 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class ABioVisualEffect*>             m_aCurrentIconVFX;                                		// 0x0318 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FGuid                                       MyGuid;                                           		// 0x0328 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       m_TransitionOpen;                                 		// 0x0338 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_TransitionClose;                                		// 0x0340 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             m_IconTemplateClosed;                             		// 0x0348 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             m_IconTemplateHackable;                           		// 0x0350 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             m_IconTemplatePlotLocked;                         		// 0x0358 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             m_IconTemplateOpenTransition;                     		// 0x0360 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_Transition_Open;                          		// 0x0368 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_Transition_Close;                         		// 0x0370 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_GUI_Success_Opening;                      		// 0x0378 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_GUI_Failure_PlotLocked;                   		// 0x0380 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_GUI_Failure_HackLocked;                   		// 0x0388 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_GUI_Kismet_Locked;                        		// 0x0390 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_GUI_Kismet_UnLocked;                      		// 0x0398 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_GUI_Kismet_Enabled;                       		// 0x03A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 m_Wwise_GUI_Kismet_Disabled;                      		// 0x03A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nIndex;                                         		// 0x03B0 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevRegionIndex;                               		// 0x03B4 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevPlotIndex;                                 		// 0x03B8 (0x0004) [0x0000000000000000]              
	int                                                m_srTargetTipTextClosed;                          		// 0x03BC (0x0004) [0x0000000004000009]              ( CPF_Edit | CPF_ExportObject | CPF_EditInline )
	int                                                m_srTargetTipTextHackLocked;                      		// 0x03C0 (0x0004) [0x0000000004000009]              ( CPF_Edit | CPF_ExportObject | CPF_EditInline )
	int                                                m_srTargetTipTextPlotLocked;                      		// 0x03C4 (0x0004) [0x0000000004000009]              ( CPF_Edit | CPF_ExportObject | CPF_EditInline )
	unsigned long                                      m_bOpenWhenInteractedWhileUnlocked : 1;           		// 0x03C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bIsTransitioning : 1;                           		// 0x03C8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_ProcessPendingState : 1;                        		// 0x03C8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bSaveMe : 1;                                      		// 0x03C8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      m_CurrentDoorState;                               		// 0x03CC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_PreviousDoorState;                              		// 0x03CD (0x0001) [0x0000000000000000]              
	unsigned char                                      m_DoorType;                                       		// 0x03CE (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Region;                                           		// 0x03CF (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x03D0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Int;                                              		// 0x03D1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_PendingDoorState;                               		// 0x03D2 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventRestoreDoorStates ( );
	void SaveDoorStates ( );
	void PlayWiseEvent ( class UWwiseEvent* oWwiseEvent );
	void SetDoorMarkerState ( unsigned long bOpen );
	void eventOnTransitionEnd ( );
	void eventSetDoorIcon ( class UBioVFXTemplate* oVFXTemplate );
	void TriggerInteraction ( class AActor* EventInstigator );
	void TriggerStateChange ( class AActor* EventInstigator );
	void PostBeginPlay ( );
	bool CloseDoor ( unsigned long bInstant );
	bool OpenDoor ( unsigned long bInstant );
	void eventSetDoorState ( unsigned char ToState, class AActor* User, unsigned long bInstantTransition );
	void PlayAnim ( struct FName InAnimSeqName, unsigned long bSkipToEnd );
	void OnUse ( class AActor* User );
};

// Class SFXGame.SFXGoreActor
// 0x0000 (0x02D8 - 0x02D8)
class ASFXGoreActor : public ASkeletalMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void CreateGoreActor ( class APawn* Pawn, struct FName BoneName );
	void SwitchBodiesBelow ( struct FName ParentBoneName, class USkeletalMeshComponent* FromSkelComp, class USkeletalMeshComponent* ToSkelComp, class UPhysicsAssetInstance* FromInst, class UPhysicsAssetInstance* ToInst );
	void CopyBindPose ( class ABioPawn* Pawn );
};

// Class SFXGame.SFXSkeletalMeshActor
// 0x004C (0x0324 - 0x02D8)
class ASFXSkeletalMeshActor : public ASkeletalMeshActor
{
public:
	struct TArray<struct FSMAVectorParameter>          VectorParameters;                                 		// 0x02D8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FSMAScalarParameter>          ScalarParameters;                                 		// 0x02E8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FSMATextureParameter>         TextureParameters;                                		// 0x02F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      HeadMesh;                                         		// 0x0308 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      HairMesh;                                         		// 0x0310 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioMorphFace*                               MorphHead;                                        		// 0x0318 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UpdateSkelWhenNotRendered : 1;                    		// 0x0320 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHasWrinkles : 1;                                 		// 0x0320 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSkeletalMeshActorMAT
// 0x004C (0x0334 - 0x02E8)
class ASFXSkeletalMeshActorMAT : public ASkeletalMeshActorMAT
{
public:
	struct TArray<struct FSMAVectorParameter>          VectorParameters;                                 		// 0x02E8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FSMAScalarParameter>          ScalarParameters;                                 		// 0x02F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FSMATextureParameter>         TextureParameters;                                		// 0x0308 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      HeadMesh;                                         		// 0x0318 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      HairMesh;                                         		// 0x0320 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioMorphFace*                               MorphHead;                                        		// 0x0328 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UpdateSkelWhenNotRendered : 1;                    		// 0x0330 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHasWrinkles : 1;                                 		// 0x0330 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioBaseAppearance
// 0x000D (0x0079 - 0x006C)
class UBioBaseAppearance : public UBioBaseComponent
{
public:
	struct FName                                       m_nmPhysicsImpactBone;                            		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fVFXScale;                                      		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eReportMethod;                                  		// 0x0078 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class USkeletalMesh* GetModelByName ( struct FString S );
};

// Class SFXGame.Bio_Appr_Character
// 0x00B8 (0x0131 - 0x0079)
class UBio_Appr_Character : public UBioBaseAppearance
{
public:
	struct TArray<class UBio_Appr_Character_Head*>     Head;                                             		// 0x007C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FLookAtBoneDef>               m_aLookBoneDefs;                                  		// 0x008C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     vProceduralCameraPosition;                        		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    rProceduralCameraRotation;                        		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vCameraFocusPoint;                                		// 0x00B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UBio_Appr_Character_Settings*                m_oSettings;                                      		// 0x00C0 (0x0008) [0x00000000040A2009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UBio_Appr_Character_Body*                    Body;                                             		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BloodColor;                                       		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             LifetimeCrust;                                    		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             DeathCrust;                                       		// 0x00E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CreatureSpeed;                                    		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USFXMovementData*                            MovementInfo;                                     		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioLookAtDefinition*                        m_LookAtDefinition;                               		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmDefaultGesturesPoseAnim;                      		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioDynamicAnimSet*                          m_pCookedDefGestPoseSet;                          		// 0x0108 (0x0008) [0x0000000000000000]              
	class UFaceFXAsset*                                DefaultFaceFXAsset;                               		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LifetimeMaterialFadeDuration;                     		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFov;                                             		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fNearClip;                                        		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDOFFocusInnerRadius;                             		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDOFFocusDistance;                                		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      HideEquipedItems : 1;                             		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      CanStrafe : 1;                                    		// 0x012C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      ModelType;                                        		// 0x0130 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Character_Body
// 0x0105 (0x017E - 0x0079)
class UBio_Appr_Character_Body : public UBioBaseAppearance
{
public:
	struct TArray<struct FArmorTypes>                  Armor;                                            		// 0x007C (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     AppearancePrefix;                                 		// 0x008C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UAnimSet*>                     AnimSets;                                         		// 0x009C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FWeaponAnimSpec>              WeaponAnimSpecs;                                  		// 0x00AC (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FOverrideAnimTreeTemplate                   AnimTreeTemplates[ 0x7 ];                         		// 0x00BC (0x0054) [0x0000000000000001]              ( CPF_Edit )
	class UBio2DA*                                     m_oMaterialVariationTranslationTable;             		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBio_Appr_Character_HeadGear*                m_oHeadGearAppearance;                            		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBio_Appr_Character_Body_Settings*           m_oSettings;                                      		// 0x0120 (0x0008) [0x00000000040A2009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_EditConst | CPF_Component | CPF_EditInline )
	struct FName                                       RagdollRecoverBone;                               		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RagdollRecoverDirSwapBone;                        		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionHeight;                                  		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionRadius;                                  		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionCrouchHeight;                            		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionReadyHeight;                             		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Scale;                                            		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InclineUpMoveMod;                                 		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InclineDownMoveMod;                               		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SkidTurnThreshold;                                		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PawnMoveStopDecelTime;                            		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtRotationMinHoldTime;                        		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtRotationMaxHoldTime;                        		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtRotationMaxHoldAngle;                       		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtSpeedDEBUG;                                 		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RagdollRecoverPhysBlendTime;                      		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeshAdjRate;                                      		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManualMeshAdj;                                    		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableStartAnims : 1;                            		// 0x0178 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableSkidAnims : 1;                             		// 0x0178 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableStopAnims : 1;                             		// 0x0178 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAllowStartAnimInCombat : 1;                      		// 0x0178 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAllowSkidAnimInCombat : 1;                       		// 0x0178 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAllowStopAnimInCombat : 1;                       		// 0x0178 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bEnableMountRootMotion : 1;                       		// 0x0178 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bEnableStartRootMotion : 1;                       		// 0x0178 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bEnableStopRootMotion : 1;                        		// 0x0178 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bEnableLookAtTargeting : 1;                       		// 0x0178 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bUseWallSlideSpeedAdjust : 1;                     		// 0x0178 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bEnableRagdollRecovery : 1;                       		// 0x0178 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bInvertRagdollRecoverBoneAxis : 1;                		// 0x0178 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bRecoverDirSwap : 1;                              		// 0x0178 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bInvertRagdollRecoverDirSwapBoneAxis : 1;         		// 0x0178 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bEnableMeshAdj : 1;                               		// 0x0178 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bUseManualAdj : 1;                                		// 0x0178 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      m_bCanPortArms : 1;                               		// 0x0178 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      m_bCanCrouch : 1;                                 		// 0x0178 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      m_bCanWalk : 1;                                   		// 0x0178 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      m_bCanFly : 1;                                    		// 0x0178 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      m_bCanLand : 1;                                   		// 0x0178 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      m_bSuppressPitch : 1;                             		// 0x0178 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned char                                      RagdollRecoverBoneAxis;                           		// 0x017C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RagdollRecoverDirSwapBoneAxis;                    		// 0x017D (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool GetMaterial ( int ArmorType, int ModelVar, int MaterialVar, struct TArray<class UMaterialInterface*>* Materials );
	bool IsValidVariation ( int ArmorType, int ModelVar, int MaterialVar );
	class UPhysicsAsset* GetPhysics ( int ArmorType, int ModelVar );
	struct FString GetPhysics_Name ( int ArmorType, int ModelVar );
	class USkeletalMesh* GetModel ( int ArmorType, int ModelVar );
};

// Class SFXGame.Bio_Appr_Character_Hair
// 0x0023 (0x009C - 0x0079)
class UBio_Appr_Character_Hair : public UBioBaseAppearance
{
public:
	struct TArray<class UMaterialInterface*>           m_aMaterials;                                     		// 0x007C (0x0010) [0x0000000000400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink )
	class UBio_Appr_Character_Hair_Settings*           m_oSettings;                                      		// 0x008C (0x0008) [0x00000000040A2009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_EditConst | CPF_Component | CPF_EditInline )
	class USkeletalMesh*                               m_oModelMesh;                                     		// 0x0094 (0x0008) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class USkeletalMesh* GetModel ( );
};

// Class SFXGame.Bio_Appr_Character_Head
// 0x0097 (0x0110 - 0x0079)
class UBio_Appr_Character_Head : public UBioBaseAppearance
{
public:
	struct TArray<struct FBioCharacterHeadAppearanceMaterialConfig> m_aMaterialConfig;                                		// 0x007C (0x0010) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FString                                     MorphConstraints;                                 		// 0x008C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UAnimSet*>                     AnimSets;                                         		// 0x009C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UBio_Appr_Character_Hair*>     m_aHairAppearance;                                		// 0x00AC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FBioWrinkleConfig>            TextureOverrides;                                 		// 0x00BC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UBio_Appr_Character_Head_Settings*           m_oSettings;                                      		// 0x00CC (0x0008) [0x00000000040A2009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  WrinkleNormalMap;                                 		// 0x00DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  WrinkleNormalMask;                                		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  WrinkleNormalMask01;                              		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UFaceFXAsset*                                DefaultFaceFXAsset;                               		// 0x00F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          m_oPortraitMaterial;                              		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               m_oModelMesh;                                     		// 0x0104 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      HeadTrack : 1;                                    		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseWrinkles : 1;                                  		// 0x010C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class USkeletalMesh* GetModel ( );
};

// Class SFXGame.Bio_Appr_Character_HeadGear
// 0x00E0 (0x0159 - 0x0079)
class UBio_Appr_Character_HeadGear : public UBioBaseAppearance
{
public:
	struct FBioHeadGearAppearanceArmorSpec             m_aArmorSpec[ 0x5 ];                              		// 0x007C (0x008C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FBioFacePlateMeshSpec>        m_aFacePlateMeshSpec;                             		// 0x0108 (0x0010) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UMaterialInterface*>           m_apFacePlateMaterial;                            		// 0x0118 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class USkeletalMesh*>                m_apVisorMesh;                                    		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UMaterialInterface*>           m_apVisorMaterial;                                		// 0x0138 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       m_nmPrefix;                                       		// 0x0148 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBio_Appr_Character_HeadGear_Settings*       m_oSettings;                                      		// 0x0150 (0x0008) [0x00000000040A2009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned char                                      m_eArmorType;                                     		// 0x0158 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAppearanceItemWeapon
// 0x002F (0x00A8 - 0x0079)
class UBioAppearanceItemWeapon : public UBioBaseAppearance
{
public:
	struct TArray<struct FBioAppearanceItemWeaponVFXSpec> m_vfxSpecs;                                       		// 0x007C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FBioAppearanceItemSophisticatedVariant> m_variants;                                       		// 0x008C (0x0010) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UAnimSet*                                    m_oPawnWeaponAnimations;                          		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_previewVariantLabel;                            		// 0x00A4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UPhysicsAsset* GetPhysicsAsset ( int Variant );
	class UAnimTree* GetAnimationTree ( int Variant );
	class UAnimSet* GetAnimationSet ( int Variant );
	void ApplyMaterials ( int Variant, class USkeletalMeshComponent* SkeletalMeshComponent );
	class USkeletalMesh* GetSkeletalMesh ( int Variant );
};

// Class SFXGame.BioBaseAppearancePlaceable
// 0x00D7 (0x0150 - 0x0079)
class UBioBaseAppearancePlaceable : public UBioBaseAppearance
{
public:
	struct TArray<struct FName>                        MaterialVariationList;                            		// 0x007C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UAnimSet*>                     AnimSets;                                         		// 0x008C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FVisualEffectAttachment>      VisualEffects;                                    		// 0x009C (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FVisualEffectAttachment>      VFXOnInstigator;                                  		// 0x00AC (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct FString                                     sThumbnailLabel;                                  		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     sMenuLabel;                                       		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      pNewActorClass;                                   		// 0x00DC (0x0008) [0x0000000000000000]              
	struct FVector                                     m_vTargetLocationOffset;                          		// 0x00E4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       PackageName;                                      		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       PlaceablePrefix;                                  		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsAsset*                               DestroyedPhysicsAsset;                            		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioFSM*                                     FSM;                                              		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 m_oStaticMesh;                                    		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 m_oDestroyedStaticMesh;                           		// 0x0120 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               m_oSkeletalMesh;                                  		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               m_oDestroyedSkeletalMesh;                         		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimTree*                                   AnimationTree;                                    		// 0x0138 (0x0008) [0x0000000000000000]              
	int                                                MaterialPerVariation;                             		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nInstigatorVFXOffset;                             		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              Scale;                                            		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOneAnimFrameStates : 1;                          		// 0x014C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Container
// 0x0000 (0x0150 - 0x0150)
class UBio_Appr_Container : public UBioBaseAppearancePlaceable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Door
// 0x0000 (0x0150 - 0x0150)
class UBio_Appr_Door : public UBioBaseAppearancePlaceable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Inert
// 0x0000 (0x0150 - 0x0150)
class UBio_Appr_Inert : public UBioBaseAppearancePlaceable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Useable
// 0x0000 (0x0150 - 0x0150)
class UBio_Appr_Useable : public UBioBaseAppearancePlaceable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioBaseInterface
// 0x0008 (0x0068 - 0x0060)
class UBioBaseInterface : public UObject
{
public:
	class UBioActorBehavior*                           m_pBioActorBehavior;                              		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioInterface_Appearance
// 0x0008 (0x0070 - 0x0068)
class UBioInterface_Appearance : public UBioBaseInterface
{
public:
	class AActor*                                      pActor;                                           		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ResetToDefaults ( );
	bool UpdateAppearance ( unsigned long bForceUpdate );
};

// Class SFXGame.BioInterface_Appearance_ArtPlaceable
// 0x0000 (0x0070 - 0x0070)
class UBioInterface_Appearance_ArtPlaceable : public UBioInterface_Appearance
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool UpdateAppearance ( unsigned long bForceUpdate );
};

// Class SFXGame.BioInterface_Appearance_Pawn
// 0x0088 (0x00F8 - 0x0070)
class UBioInterface_Appearance_Pawn : public UBioInterface_Appearance
{
public:
	struct FBioPawnHeadGearVisibility                  m_headGearVisibilityOverride;                     		// 0x0070 (0x001C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBioPawnHeadGearVisibility                  m_headGearVisibilityRunTimeOverride;              		// 0x008C (0x001C) [0x0000000000000000]              
	struct FBioPawnHeadGearVisibility                  m_cachedHeadGearVisibility;                       		// 0x00A8 (0x001C) [0x0000000000000000]              
	class UBio_Appr_Character_Settings*                m_oSettings;                                      		// 0x00C4 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       CreatureSpeedOverride;                            		// 0x00CC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       m_nmCreatureSpeed;                                		// 0x00D4 (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmBloodColor;                                   		// 0x00DC (0x0008) [0x0000000000000000]              
	class UBio2DA*                                     m_oCreatureSpeedsTable;                           		// 0x00E4 (0x0008) [0x0000000000000000]              
	class UBioMaterialOverride*                        m_pMaterialParameters;                            		// 0x00EC (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      m_bHeadGearVisiblePreference : 1;                 		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetDefaultCollisionReadyHeight ( );
	float GetDefaultCollisionCrouchHeight ( );
	float GetDefaultCollisionRadius ( );
	float GetDefaultCollisionHeight ( );
	void GetCreatureSpeeds ( struct FCreatureSpeeds* SpeedsRecord );
	bool UpdateAppearance ( unsigned long bForceUpdate );
	void ExtractResources ( class ABioPawn* Pawn, class UBio_Appr_Character* Appearance );
	void SetHeadGearVisiblePreference ( unsigned long B );
};

// Class SFXGame.BioArtPlaceable
// 0x0102 (0x038C - 0x028A)
class ABioArtPlaceable : public AActor
{
public:
	struct FMap_Mirror                                 m_mAttachedNavPoints;                             		// 0x028C (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FMultiMap_Mirror                            m_maoBlockedReachSpecs;                           		// 0x02D4 (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<class ABioVisualEffect*>             VisualEffects;                                    		// 0x031C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UBioArtPlaceableBehavior*                    m_oBehavior;                                      		// 0x032C (0x0008) [0x0000000000020000]              ( CPF_EditConst )
	class UMeshComponent*                              DestroyedMesh;                                    		// 0x0334 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMeshComponent*                              PlaceableMesh;                                    		// 0x033C (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ABioPawn*                                    m_oLastInstigator;                                		// 0x0344 (0x0008) [0x0000000000000000]              
	class ULightEnvironmentComponent*                  m_pLightEnvComponent;                             		// 0x034C (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       m_nmMatineeNodeName;                              		// 0x0354 (0x0008) [0x0000000000000000]              
	class ABioArtPlaceable*                            NextPlaceable;                                    		// 0x035C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UBioFSMComponent*                            FSM;                                              		// 0x0364 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_nNumParticipants;                               		// 0x036C (0x0004) [0x0000000000000000]              
	float                                              m_fCorpseCleanupFirstAttemptTime;                 		// 0x0370 (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	float                                              m_fCorpseCleanupAttemptRetryTime;                 		// 0x0374 (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	int                                                m_nMaxCorpseVisibilityCleanupAttempts;            		// 0x0378 (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	float                                              m_fMaxCorpseCleanupDistanceThreshold;             		// 0x037C (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	float                                              m_fMaxCorpseCleanupScreenSizeThreshold;           		// 0x0380 (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	int                                                m_nCorpseCleanupAttempts;                         		// 0x0384 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bCanCleanupCorpse : 1;                          		// 0x0388 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsFrozen : 1;                                    		// 0x0388 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ReactToDeath ( float Damage, float fDeathDamage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* clsDamageType, struct FTraceHitInfo HitInfo, class USFXDamageType* pDamage );
	void eventDestroyedCleanupTimer ( );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimWeights ( struct TArray<struct FAnimSlotInfo> SlotInfos );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventOnSkillGameCanceled ( class ABioPawn* oUsingPawn );
	void eventOnSkillGameSucceeded ( class ABioPawn* oUsingPawn );
	void eventOnSkillGameFailed ( class ABioPawn* oUsingPawn );
	void eventAbortReactive ( struct FName nmToState );
	void eventRanInto ( class AActor* Other );
	bool IsDestroyed ( );
	void OnCastAt ( class APawn* oAttacker, class USFXPower* Power );
	void OnAttacked ( class APawn* oAttacker, struct FName WeaponName );
	void CreateSelection ( );
	void PostBeginPlay ( );
	void UnfreezeAnimation ( );
	void FreezeAnimation ( );
	void MAT_FinishAnimControl ( );
	void MAT_SetAnimWeights ( struct TArray<struct FAnimSlotInfo> SlotInfos );
	void MAT_SetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void MAT_BeginAnimControl ( struct TArray<class UAnimSet*> InAnimSets );
	void OverrideUseCase ( unsigned char UseCase );
	void AddProximityTimer ( );
	bool BioDoProximityCheck ( );
	void TermRagdoll ( );
	void InitRagdoll ( );
	void UpdateWpPointPosition ( );
	void SetActionStationWP ( class ANavigationPoint* oWP, struct FName nmSocket );
};

// Class SFXGame.BioDoor
// 0x0010 (0x039C - 0x038C)
class ABioDoor : public ABioArtPlaceable
{
public:
	class APawn*                                       m_oPlayerWithinDoorProximity;                     		// 0x038C (0x0008) [0x0000000000000000]              
	float                                              m_fFarCloseDistance;                              		// 0x0394 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bSaveStateWhenPlayerEntered : 1;                		// 0x0398 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float CalcDistanceFromDoorPlane ( struct FVector* vWorldLocation );
	bool BioDoProximityCheck ( );
};

// Class SFXGame.BioAttributes
// 0x0004 (0x0070 - 0x006C)
class UBioAttributes : public UBioBaseComponent
{
public:
	unsigned long                                      m_bIsInitialized : 1;                             		// 0x006C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetCurrentFloatValue ( struct FBioComplexFloatStructAttribute* attribute );
	void EnsureInitialized ( );
};

// Class SFXGame.BioAttributesEpicPawn
// 0x0054 (0x00C4 - 0x0070)
class UBioAttributesEpicPawn : public UBioAttributes
{
public:
	struct FString                                     m_FirstName;                                      		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_PowerCooldownMultiplier;                        		// 0x0080 (0x0014) [0x0000000000000000]              
	struct FBioComplexIntStructAttribute               m_ScanLevel;                                      		// 0x0094 (0x0014) [0x0000000000000000]              
	struct FBioComplexFloatStructAttribute             m_RadarRange;                                     		// 0x00A8 (0x0014) [0x0000000000000000]              
	int                                                m_LastName;                                       		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              m_initialRadarRange;                              		// 0x00C0 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString GetName ( );
	struct FString GetDesignedName ( );
};

// Class SFXGame.BioAttributesPawn
// 0x0015 (0x00D9 - 0x00C4)
class UBioAttributesPawn : public UBioAttributesEpicPawn
{
public:
	struct FBioComplexIntStructAttribute               m_HazardLevel;                                    		// 0x00C4 (0x0014) [0x0000000000000000]              
	unsigned char                                      m_Race;                                           		// 0x00D8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPower
// 0x0040 (0x00B0 - 0x0070)
class UBioPower : public UBioAttributes
{
public:
	struct FString                                     m_sRTPCName;                                      		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       m_nmPower;                                        		// 0x0080 (0x0008) [0x0000000000000000]              
	class UBioPowerScript*                             Script;                                           		// 0x0088 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class AController*                                 Instigator;                                       		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USFXPower*                                   NewPower;                                         		// 0x0098 (0x0008) [0x0000000000000000]              
	float                                              m_fTotalCooldownTime;                             		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              m_fCooldownRemaining;                             		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                m_nSuppressedCount;                               		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bFakePower : 1;                                 		// 0x00AC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bDisableVFX : 1;                                		// 0x00AC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bDisableDamageAndEffects : 1;                   		// 0x00AC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bDisableAnimation : 1;                          		// 0x00AC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float eventGetDifficultyCooldownMultiplier ( );
	bool ShouldDisplayInHUD ( );
	bool GetDescription ( struct FString* sDescription );
	bool GetImpactText ( int* srImpactText );
	bool GetDisplayName ( struct FString* sDisplayName );
	int GetPowerIcon ( );
	float GetImpactNoise ( );
	float GetReleaseNoise ( );
	bool CancelPower ( );
	bool IsActive ( );
	bool CanCasterMoveDuringPower ( );
	void Tick ( float fDeltaTime );
	void SetTotalCooldownTime ( float fTotalCooldown );
	float GetTotalCooldownTime ( );
	void SetCooldownRemaining ( float fCooldownRemaining );
	float GetCooldownRemaining ( );
	bool IsSuppressed ( );
	int SuppressPower ( unsigned long bSuppress );
	bool IsEnabled ( );
	unsigned char GetType ( );
	bool GetProjectileAttachPoint ( class APawn* pPawn, struct FVector* vAttachPoint );
	bool GetAnimSet ( class UAnimSet** oAnimSet );
	void DoImpactVFX ( unsigned char ImpactType, class AActor* oActor, struct FVector vLocation, struct FVector vHitNormal, float fCastingTimeRemaining, struct FName BoneName );
	float GetVFXLifetime ( unsigned char eResource, float fCastingTimeRemaining );
	class UBioVFXTemplate* GetVFXTemplate ( unsigned char eResource );
	void EndVisualEffect ( unsigned char eResource, unsigned long bAllowVFXToFinish );
	bool CreateVisualEffect ( unsigned char eResource, class ABioVisualEffect** pEffect );
	void CreatePowerScript ( );
	void InitializePower ( struct FName nmPower );
	unsigned char GetDiscipline ( );
	unsigned char GetCapabilityType ( );
	bool GetStopOnFirstHit ( );
	bool GetBlockedByObjects ( );
	float GetConeHalfAngle ( );
	float GetVFXIntensity ( );
	float GetEffectDuration ( );
	float GetImpactRadius ( );
	float GetMaximumRange ( );
	float GetMinimumRange ( );
	float GetProjectileRadius ( );
	float GetProjectileSpeed ( );
	float GetGlobalCooldown ( );
	float GetCooldownTime ( );
	float GetReleaseAnimRate ( );
	float GetCastingTime ( );
};

// Class SFXGame.BioPowerManager
// 0x005C (0x00BC - 0x0060)
class UBioPowerManager : public UObject
{
public:
	struct FMap_Mirror                                 m_mapGlobalCooldowns;                             		// 0x0060 (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<struct FPowerReservation>            m_aReservations;                                  		// 0x00A8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m_nCurrentReservationID;                          		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventCanImpactActor ( class AActor* oActor );
	void TickReservations ( float fDeltaTime );
	bool StartReservation ( int nReservationID );
	void ClearReservation ( int nReservationID );
	int MakeReservation ( class UBioPower* oPower, class APawn* oPawn, unsigned long bForceSuccess );
	void TickGlobalCooldowns ( float fDeltaTime );
	float GetGlobalCooldown ( struct FName nmPower );
	void SetGlobalCooldown ( struct FName nmPower, float fCooldown );
	void Tick ( float fDeltaTime );
	void ChooseTargetForPlayer ( class UBioPower* oPower, class AActor** oTarget, struct FVector* vTargetLocation );
	bool AreActorsFriendly ( class AActor* oFirstActor, class AActor* oSecondActor );
	bool CheckLOSToLocation ( class AActor* oSourceActor, struct FVector vStartLocation, struct FVector vEndLocation, float fMaxRange, unsigned long bIgnoreFriendlies, class AActor** oHitActor, struct FVector* vHitLocation, struct FVector* vHitNormal );
	bool CheckLOSToActor ( class AActor* oSourceActor, class AActor* oDestinationActor, struct FVector vStartLocation, float fMaxRange, unsigned long bIgnoreFriendlies, unsigned long bIgnorePawns, class AActor** oHitActor, struct FVector* vHitLocation, struct FVector* vHitNormal );
	void GetStartLocationForLOSCheck ( class APawn* Caster, struct FVector* vStartLocation );
};

// Class SFXGame.BioPowerScript
// 0x008C (0x00EC - 0x0060)
class UBioPowerScript : public UObject
{
public:
	struct TArray<class AActor*>                       m_ImpactedActors;                                 		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     m_vWorldImpactLocation;                           		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vWorldImpactNormal;                             		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vProjectileVelocity;                            		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vProjectileLocation;                            		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vLocationToAimAt;                               		// 0x00A0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UForceFeedbackWaveform*                      m_ImpactWaveForm;                                 		// 0x00AC (0x0008) [0x0000000000000000]              
	class AActor*                                      m_oTargetToAimAt;                                 		// 0x00B4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                Recommended_TargetVulnerable;                     		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                NotRecommended_TargetOrganic;                     		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                NotRecommended_TargetMachine;                     		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                NotRecommended_TargetHasShields;                  		// 0x00C8 (0x0004) [0x0000000000000000]              
	int                                                NotRecommended_TargetHasBiotics;                  		// 0x00CC (0x0004) [0x0000000000000000]              
	int                                                NotRecommended_TargetHasArmor;                    		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                NotRecommended_NoMedigel;                         		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                NotRecommended_NoSquadMemberDead;                 		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                NotRecommended_NoSquadMemberInjured;              		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                NotRecommended_WeaponPowerAlreadyOn;              		// 0x00E0 (0x0004) [0x0000000000000000]              
	int                                                NotRecommended_TargetImmune;                      		// 0x00E4 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bWeaponModePower : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShouldTick : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bPlayerOrderedPowerUse : 1;                     		// 0x00E8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DebugDraw_Power ( class ABioHUD* H );
	struct FString eventGetHUDWheelIconInfo ( class ABioPawn* OwnerPawn );
	void ReloadAmmoPower ( class ABioPawn* Target, class ASFXWeapon* Weapon );
	void OnOwnerDied ( );
	void OnSquadMemberAdded ( class APawn* Pawn );
	void OnPowersLoaded ( );
	void OnPowerRankIncreased ( );
	void OnPowerAdded ( class USFXPower* Power );
	class ASFXShield_Base* GetCurrentShields ( class ABioPawn* Target );
	bool ShouldUsePowerOnShields ( class ABioPawn* Target, class UClass* DamageType, struct FString* sOptionalInfo );
	bool eventShouldUsePower ( class AActor* Caster, class AActor* Target, struct FString* sOptionalInfo );
	float GetDuration ( );
	float GetElapsedTime ( );
	bool PlayForceFeedback ( class AActor* oCaster, class AActor* oImpacted );
	bool PlayGuiSound ( struct FName nmSound );
	bool GetFloorLocation ( struct FVector vStartLocation, struct FVector* vFloorLocation );
	void GetCooldownResearchBonus ( float* fStaticResearchBonus );
	bool eventAdjustCooldown ( float* fCoolDownTime );
	bool eventEffectUnapply ( class AActor* oCaster, float fCasterStability, class AActor* oImpacted, int nPreviouslyImpacted );
	bool eventOnImpact ( class AActor* oCaster, float fCasterStability, class AActor* oImpacted, int nPreviouslyImpacted );
	bool PowerSharesCooldown ( class UBioPower* Power );
	void SetPowerCooldowns ( class ABioPawn* Pawn, float Cooldown );
	bool GetPowerCooldown ( float* Cooldown );
	bool eventEndPhase ( unsigned char ePhase, class AActor* oCaster );
	bool eventStartPhase ( unsigned char ePhase, class AActor* oCaster, float fDuration );
	bool eventCanStartPower ( class AActor* oCaster );
	void eventTick ( float DeltaTime );
	void OnProjectileExploded ( class AActor* oCaster, struct FVector HitLocation, struct FVector HitNormal, struct FVector Velocity );
	void OnWeaponReload ( class ASFXWeapon* Weapon, unsigned long QuickReload );
	void OnWeaponUnequip ( class ASFXWeapon* Weapon );
	void OnWeaponEquip ( class ASFXWeapon* Weapon );
	void OnWeaponImpact ( class ASFXWeapon* Weapon, struct FImpactInfo Impact );
	void eventInitializePowerScript ( );
};

// Class SFXGame.BioPathNodeVolume
// 0x001E (0x02EA - 0x02CC)
class ABioPathNodeVolume : public AVolume
{
public:
	float                                              fMaxNodeSeparation;                               		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMargin;                                          		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fNodeTargetRadius;                                		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxSlope;                                        		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nLevels;                                          		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLevelHeight;                                     		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDeleteNodesOnPopulate : 1;                       		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDoNotGenerateGroundNodes : 1;                    		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      eAlignment;                                       		// 0x02E8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ePathNodeGenerator;                               		// 0x02E9 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioTierInfo
// 0x0020 (0x0080 - 0x0060)
class UBioTierInfo : public UObject
{
public:
	struct TArray<struct FPointer>                     Triggers;                                         		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    CurrentTrigger;                                   		// 0x0070 (0x0008) [0x0000000000000000]              
	int                                                Priority;                                         		// 0x0078 (0x0004) [0x0000000000000000]              
	unsigned long                                      Enabled : 1;                                      		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      IsFloor : 1;                                      		// 0x007C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      IsGlobal : 1;                                     		// 0x007C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      ValidCurrentTrigger : 1;                          		// 0x007C (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Retouch ( unsigned long bForce );
	class ABioTriggerStream* FindTriggerForPosition ( struct FVector pos );
	class ABioTriggerStream* GetCurrentTrigger ( unsigned long OnlyIfValid );
	void SetCurrentTrigger ( class ABioTriggerStream* TriggerIn, unsigned long Valid );
	void RemoveTrigger ( class ABioTriggerStream* TriggerIn );
	void AddTrigger ( class ABioTriggerStream* TriggerIn );
};

// Class SFXGame.BioTierManager
// 0x0035 (0x0095 - 0x0060)
class UBioTierManager : public UObject
{
public:
	struct TArray<struct FTierDetails_t>               TierDetails;                                      		// 0x0060 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<class UBioTierInfo*>                 TierInfo;                                         		// 0x0070 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       DefaultTier;                                      		// 0x0080 (0x0008) [0x0000000000004000]              ( CPF_Config )
	class UBioTierInfo*                                FloorTier;                                        		// 0x0088 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bReevaluateStreaming : 1;                         		// 0x0090 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      DefaultTierIndex;                                 		// 0x0094 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ConvertPlotStreaming ( struct FName fnVirtualChunk, struct TArray<struct FPlotStreamingElement>* aRealChunks );
	void UnregisterPlotStreaming ( struct TArray<struct FPlotStreamingSet> PlotStreaming );
	void RegisterPlotStreaming ( struct TArray<struct FPlotStreamingSet> PlotStreaming );
	void ReevaluateStreaming ( unsigned long bForce );
	void ForegroundStreamingDone ( struct TArray<class USequence*> Sequences, class APawn* PlayerPawn );
	void BackgroundStreamingDone ( struct TArray<class USequence*> Sequences, class APawn* PlayerPawn );
	void RemoveTrigger ( class ABioTriggerStream* TriggerIn );
	void SetTierByIndex ( unsigned char TierIndex, class ABioTriggerStream* TriggerIn );
	void SetTierByName ( struct FName TierNameIn, class ABioTriggerStream* TriggerIn );
	unsigned char GetTierIndex ( struct FName TierNameIn );
	class UBioTierInfo* GetDefaultTier ( );
	class UBioTierInfo* GetFloorTier ( );
	class UBioTierInfo* GetTier ( unsigned char Index );
	void Retouch ( unsigned long bForce );
	void ClearCurrentTriggers ( );
	struct FName GetTierName ( unsigned char Index );
	unsigned char GetNumTiers ( );
};

// Class SFXGame.BioTriggerStream
// 0x0039 (0x0305 - 0x02CC)
class ABioTriggerStream : public ATriggerVolume
{
public:
	struct TArray<struct FBioStreamingState>           StreamingStates;                                  		// 0x02CC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       TierName;                                         		// 0x02DC (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UBioTierInfo*                                TierInfo;                                         		// 0x02E4 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UGFxMovieInfo*                               m_oAreaMapOverride;                               		// 0x02EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_StoredStateIndex;                               		// 0x02F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPriorityLevel;                                 		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                bInPlotStreaming;                                 		// 0x02FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bErrorsLogged : 1;                                		// 0x0300 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bIgnoreForStreamingCoverage : 1;                		// 0x0300 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      Tier;                                             		// 0x0304 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void ForegroundStreamingDone ( struct TArray<class USequence*> Sequences, class APawn* PlayerPawn );
	void BackgroundStreamingDone ( struct TArray<class USequence*> Sequences, class APawn* PlayerPawn );
	void Retouch ( unsigned long bForce );
	void DoStasis ( class AActor* Touched, unsigned long bTouched );
	void DoUntouch ( class AActor* Other );
	void DoTouch ( );
};

// Class SFXGame.BioWorldInfo
// 0x033A (0x0B1A - 0x07E0)
class ABioWorldInfo : public AWorldInfo
{
public:
	struct FString                                     m_sFriendlyName;                                  		// 0x07E0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     m_sCinematicSkipEvent;                            		// 0x07F0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<float>                               m_fLookAtDelays;                                  		// 0x0800 (0x0010) [0x0000000000406000]              ( CPF_Transient | CPF_Config | CPF_NeedCtorLink )
	struct TArray<class AActor*>                       SelectableActors;                                 		// 0x0810 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class AActor*>                       RadarActors;                                      		// 0x0820 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FPlotStreamingSet>            PlotStreaming;                                    		// 0x0830 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FWorldStreamingState>         m_WorldStreamingStates;                           		// 0x0840 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FVFXTemplatePoolSizeSpec>     m_VFXTemplatePoolSizeOverride;                    		// 0x0850 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FVFXListNode>                 m_BoughtVFXList;                                  		// 0x0860 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FString>                      ConditionalClasses;                               		// 0x0870 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FString>                      m_lstCinematicsSeen;                              		// 0x0880 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     m_sDestinationAreaMap;                            		// 0x0890 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<int>                                 m_pScannedClusters;                               		// 0x08A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<int>                                 m_pScannedSystems;                                		// 0x08B0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<int>                                 m_pScannedPlanets;                                		// 0x08C0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FSubPageState>                SubPageStateOverrides;                            		// 0x08D0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FEffectsMaterialPriority>     EffectsMaterialPriorities;                        		// 0x08E0 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<class UObject*>                      m_AutoPersistentObjects;                          		// 0x08F0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0900 (0x0048) UNKNOWN PROPERTY: MapProperty SFXGame.BioWorldInfo.m_mVFXPool
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x0948 (0x0048) UNKNOWN PROPERTY: MapProperty SFXGame.BioWorldInfo.m_BoughtVFXMap
	struct FWorldEnvironmentEffect                     m_ActiveEnvironmentEffect;                        		// 0x0990 (0x0030) [0x0000000000000000]              
	struct FWorldEnvironmentEffect                     m_PendingEnvironmentEffect;                       		// 0x09C0 (0x0030) [0x0000000000000000]              
	struct FBoughtVFXListEnds                          m_aBoughtEffects[ 0x5 ];                          		// 0x09F0 (0x0028) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     m_vDestination;                                   		// 0x0A18 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class ABioPlayerSquad*                             m_playerSquad;                                    		// 0x0A24 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioTimerList*                               TimerList;                                        		// 0x0A2C (0x0008) [0x0000000000000000]              
	class UBioGlobalVariableTable*                     m_oGlobalVariables;                               		// 0x0A34 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioQuestProgressionMap*                     m_oQuestProgress;                                 		// 0x0A3C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioDiscoveredCodexMap*                      m_oDiscoveredCodex;                               		// 0x0A44 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioConversation*                            m_oCurrentConversation;                           		// 0x0A4C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioSeqAct_FaceOnlyVO*                       m_pCurrentFaceOnlyVO;                             		// 0x0A54 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioConversation*                            m_pConvCondCheckOverride;                         		// 0x0A5C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioPlayerController*                        LocalPlayerController;                            		// 0x0A64 (0x0008) [0x0000000000000000]              
	class UBioSubtitles*                               m_Subtitles;                                      		// 0x0A6C (0x0008) [0x0000000000000000]              
	class UGFxMovieInfo*                               m_oAreaMap;                                       		// 0x0A74 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UGFxMovieInfo*                               m_oParentAreaMap;                                 		// 0x0A7C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioInGamePropertyEditor*                    m_oPropertyEditor;                                		// 0x0A84 (0x0008) [0x0000000000000000]              
	class UWwiseEventPairObject*                       m_pEndGameMusicEvent;                             		// 0x0A8C (0x0008) [0x0000000000000000]              
	class AWwiseEnvironmentVolume*                     HighestPriorityAudioEnvVolume;                    		// 0x0A94 (0x0008) [0x0000000001002002]              ( CPF_Const | CPF_Transient )
	class UBioEventNotifier*                           EventNotifier;                                    		// 0x0A9C (0x0008) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	class USFXPlotTreasure*                            m_oTreasure;                                      		// 0x0AA4 (0x0008) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	class UBioPhysicsSounds*                           m_PhysicsSound;                                   		// 0x0AAC (0x0008) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	class UBioUIWorld*                                 m_UIWorld;                                        		// 0x0AB4 (0x0008) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioPowerManager*                            m_oPowerManager;                                  		// 0x0ABC (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                nMemoryBudgetDLC;                                 		// 0x0AC4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nJournalLastSelectedMission;                    		// 0x0AC8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nJournalLastSelectedAssignment;                 		// 0x0ACC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCodexLastSelectedPrimary;                      		// 0x0AD0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCodexLastSelectedSecondary;                    		// 0x0AD4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fConversationInterruptDistance;                 		// 0x0AD8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fIdleCameraSpeed;                               		// 0x0ADC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fNoSkipBuffer;                                  		// 0x0AE0 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fLookAtNoticeMaxRange;                          		// 0x0AE4 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fLookAtNoticeInitialDelay;                      		// 0x0AE8 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fLookAtNoticeDuration;                          		// 0x0AEC (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fLookAtNoticeSpeed;                             		// 0x0AF0 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_srProfileNotSignedInWarningMsg;                 		// 0x0AF4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMaxVFXBudget;                                  		// 0x0AF8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fUsedVFXBudget;                                 		// 0x0AFC (0x0004) [0x0000000000000000]              
	float                                              m_fGameOverPauseTime;                             		// 0x0B00 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                bForceFullGarbageCollection;                      		// 0x0B04 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nDesignerEnableDifficultyChecksPlotFlag;        		// 0x0B08 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	unsigned long                                      bStreamingLevelsResorted : 1;                     		// 0x0B0C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bJournalShowingMissions : 1;                    		// 0x0B0C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bCodexShowingPrimary : 1;                       		// 0x0B0C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bInvokesHintMessages : 1;                       		// 0x0B0C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bCinematicSkip : 1;                             		// 0x0B0C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bDisableCinematicSkip : 1;                      		// 0x0B0C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bForceCinematicDamage : 1;                      		// 0x0B0C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bFlushSFHud : 1;                                		// 0x0B0C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bDebugCameras : 1;                              		// 0x0B0C (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      m_bPartyMembersImmuneToExternalForce : 1;         		// 0x0B0C (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	unsigned long                                      m_bPausedByFocusLoss : 1;                         		// 0x0B0C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      m_bWaitingForStreamingLoadIdle : 1;               		// 0x0B0C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      m_bWaitingForStreamingLoadVisibleComplete : 1;    		// 0x0B0C (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      m_bGameWasPaused : 1;                             		// 0x0B0C (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bKismetShowHUD : 1;                               		// 0x0B0C (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      m_bAllowBrowserWheel : 1;                         		// 0x0B0C (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned char                                      m_lstBrowserAlerts[ 0x9 ];                        		// 0x0B10 (0x0009) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_nJournalSortMethod;                             		// 0x0B19 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventSetPlayersControllerId ( class ULocalPlayer* Player, int ControllerId );
	void ClearBrowserWheelStateOverride ( );
	void AddBrowserWheelStateOverride ( struct FSubPageState i_SubStateOverride );
	void StartMatch ( );
	void GetGlobalEvents ( class UClass* EventClass, struct TArray<class USequenceEvent*>* aEvents );
	void SetRenderStateOfPlayerToDefault ( unsigned char RenderState );
	void SetRenderStateOfPlayer ( unsigned char RenderState, float fValue );
	float GetRenderStateOfPlayer ( unsigned char RenderState );
	void UpdateEnvironmentEffects ( float fDeltaT );
	class UBioSubtitles* GetSubtitles ( );
	void SetGlobalTlk ( unsigned long bMale, unsigned long bPurge );
	void PostBeginPlay ( );
	bool eventCheckState ( int nState );
	void InterruptConversation ( class UBioConversation* oConv );
	void EndCurrentFaceOnlyVO ( class UBioSeqAct_FaceOnlyVO* pFOVO );
	void EndCurrentConversation ( );
	bool StartConversation ( class UBioConversation* oConv, class AActor* Owner_, class AActor* Target );
	class UBioConversation* eventGetConversation ( );
	void eventClearCurrentGame ( );
	class UBioGlobalVariableTable* GetGlobalVariables ( );
	bool IsDownloadableContentInitialized ( );
	void InitDownloadableContent ( unsigned long bFinalAttempt, unsigned long bBlocking );
	void Tick ( float fDeltaT );
	bool HasFocus ( );
	void TickLocal ( float DeltaTime );
	class ABioPlayerController* GetLocalPlayerController ( );
	bool GetCurrentStreamingChunkName ( struct FName* nmStreamingChunkName );
	void PlayEndGameMusic ( );
	void OverrideVFXPoolSize ( class UBioVFXTemplate* a_pEffect, int a_nMaxPoolSize, int a_nMinPoolSize );
	void GetDefaultVFXPoolSize ( class UBioVFXTemplate* a_pEffect, int* a_rnMaxPoolSize, int* a_rnMinPoolSize );
	class UBioVisualEffectPool* GetVFXPool ( class UBioVFXTemplate* pEffect );
	struct FString GetDetailedVersionString ( );
	struct FString GetEpicVersionString ( );
	struct FString GetVersionString ( );
	void MoveToArea ( struct FName sAreaName, struct FName sNextAreaStartPoint );
	bool GetLocalBoolVariable ( unsigned char eObjectType, struct FName GetFunctionName, struct FName sTag );
	float GetLocalFloatVariable ( unsigned char eObjectType, struct FName GetFunctionName, struct FName sTag );
	int GetLocalIntegerVariable ( unsigned char eObjectType, struct FName GetFunctionName, struct FName sTag );
	void ExecuteConsequence ( int nConsequence, int nParam );
	void ExecuteStateTransition ( int nTransition, int nParam );
	bool CheckConditional ( int nConditional, int nParam );
	void eventCauseEvent ( struct FName EventName );
	bool GetGuiInputPermission ( unsigned char nEvent );
	void eventRequestStartNewGame ( unsigned long bFemale, struct FName RemoteEvent );
	void OnNewGameStartRequest ( struct FName RemoteEvent );
	bool TriggerCinematicSkippedEvent ( );
	void SetStreamingState ( struct FName StateName, unsigned long bValue );
};

// Class SFXGame.BioActorBehavior
// 0x00E4 (0x0150 - 0x006C)
class UBioActorBehavior : public UBioBaseComponent
{
public:
	struct FString                                     ActorGameName;                                    		// 0x006C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UBioActive*>                   m_aRegisteredActive;                              		// 0x007C (0x0010) [0x1000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UBioReactive*>                 m_aRegisteredReactive;                            		// 0x008C (0x0010) [0x1000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UBioReactive*>                 m_aPendingReactive;                               		// 0x009C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UBioReactive*>                 m_aActivatedReactive;                             		// 0x00AC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<int>                                 m_aTargetTipDefaults;                             		// 0x00BC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<int>                                 m_aPowerText;                                     		// 0x00CC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UBioActive*                                  m_oCurrentModalActive;                            		// 0x00DC (0x0008) [0x1000000000002000]              ( CPF_Transient )
	class UBioActive*                                  m_InstantPowerActive;                             		// 0x00E4 (0x0008) [0x1000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmPowerAffectingActor;                          		// 0x00EC (0x0008) [0x0000000000000000]              
	class UBioInterface_Appearance*                    m_oAppearanceType;                                		// 0x00F4 (0x0008) [0x0000000004420009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	class UBioCameraShakeInterface*                    m_cameraShakeInterface;                           		// 0x00FC (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                ActorGameNameStrRef;                              		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ActorGameNameColor;                               		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInteractionRange;                              		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              m_fHenchAimLagFactor;                             		// 0x0110 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fMaxHenchAimDist;                               		// 0x0114 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nPreviousSuperMode;                             		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPowerAffectingActorTime;                       		// 0x011C (0x0004) [0x0000000000000000]              
	int                                                m_nInvulnerabilityCount;                          		// 0x0120 (0x0004) [0x0000000000000000]              
	int                                                m_srStasisPowerText;                              		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fUseRange;                                      		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nRequiredScanLevel;                             		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nMaxTargetTipStrings;                           		// 0x0130 (0x0004) [0x0000000000000000]              
	int                                                m_nTargetTipTextOverridden;                       		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsDamagePerRelVel;                        		// 0x0138 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fPhysicsDamageImpulsePerRelVel;                 		// 0x013C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fPhysicsDamageTimer;                            		// 0x0140 (0x0004) [0x0000000000000000]              
	float                                              m_fPhysicsDamageTimerMax;                         		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              m_fPhysicsSoundLastTimePlayed;                    		// 0x0148 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bAreShieldsDisabled : 1;                        		// 0x014C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      ActorGameNameOverride : 1;                        		// 0x014C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bActive : 1;                                      		// 0x014C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bMin1HealthOverride : 1;                        		// 0x014C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bMin1Health : 1;                                		// 0x014C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseStringRefActorGameName : 1;                   		// 0x014C (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bDisableFacefx : 1;                               		// 0x014C (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      Mountable : 1;                                    		// 0x014C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      AllowFall : 1;                                    		// 0x014C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      HadSuperMode : 1;                                 		// 0x014C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bIsBusy : 1;                                    		// 0x014C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bInActionStation : 1;                           		// 0x014C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      m_bTargetable : 1;                                		// 0x014C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      m_bTargetableOverride : 1;                        		// 0x014C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      m_bCombatTargetable : 1;                          		// 0x014C (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      m_bCombatTargetableOverride : 1;                  		// 0x014C (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      m_bUseRangeOverride : 1;                          		// 0x014C (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      m_bRequiredScanLevelOverride : 1;                 		// 0x014C (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      m_bTargetTipTextOverride : 1;                     		// 0x014C (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      m_bDefaultActionPossibleOverridden : 1;           		// 0x014C (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      m_bDefaultActionPossible : 1;                     		// 0x014C (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      m_bPhysicsDamageEnabled : 1;                      		// 0x014C (0x0004) [0x0000000000004000] [0x00200000] ( CPF_Config )
	unsigned long                                      m_bPhysicsDamageLoggingEnabled : 1;               		// 0x014C (0x0004) [0x0000000000004000] [0x00400000] ( CPF_Config )
	unsigned long                                      m_bPhysicsDamageIgnored : 1;                      		// 0x014C (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      m_bPlotProtected : 1;                             		// 0x014C (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      m_bPlotProtectedOverride : 1;                     		// 0x014C (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      m_bSuppressDisintegration : 1;                    		// 0x014C (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      m_bSuppressDisintegrationOverride : 1;            		// 0x014C (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetActive ( unsigned long bSetActive );
	bool GetPowerText ( struct FString* sPowerText );
	bool IsDisintegrationSuppressed ( );
	bool IsPlotProtected ( );
	bool MoveActorToFloor ( class AActor* oActor );
	class AActor* SpawnActorFromType ( struct FString sActorResource, struct FVector vLocation, struct FRotator rRotation, float fLifeSpan, class AActor* oOwner );
	class UBioBaseAppearance* GetAppearanceTemplate ( );
	bool GetBusyState ( );
	void SetBusyState ( unsigned long bSetBusy );
	void eventOnAnimEnd ( class UAnimNodeSequence* oAnimation, float PlayedTime, float ExcessTime );
	void eventHurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* oDirectlyHitActor, class UDamageType* pDamage );
	void SetActorGameName ( int newActorGameName );
	struct FString eventGetActorGameName ( );
	bool eventIsMin1Health ( );
	bool IsAbilityEnabled ( unsigned char eEnableType, struct FName nmSubType );
	int AbilityEnable ( unsigned long bEnable, unsigned char eEnableType, struct FName nmSubType );
	class ABioBaseSquad* GetSquad ( );
	void SoftResetMovementAndAnimationState ( );
	void HardResetActionAndAnimationState ( );
	void ReleasePendingReactive ( class UBioReactive* oReactive );
	bool ReleaseActiveByClass ( class UClass* oActiveToRelease );
	bool ReleaseActive ( );
	class UBioReactive* AcquireReactive ( class UClass* clsReactive, class AActor* oInstigator );
	class UBioActive* SearchForActive ( class UClass* clsActive );
	class UBioActive* AcquireActive ( class UClass* clsActive, unsigned long bAutoStartActive );
	void RegisterReactive ( class UClass* clsReactive, class UBioReactive* oReactive );
	void RegisterActive ( class UClass* clsActive, class UBioActive* oActive );
	void PostBeginPlay ( );
	void EnableCollision ( unsigned long bState );
	bool IsDefaultActionPossible ( );
	bool IsWithinUseRange ( struct FVector vRefLocation );
	float GetUseRange ( );
	bool GetScanable ( int nInstigatorScanLevel );
	void GetTargetTipText ( class APawn* pSourcePawn, struct FString* strTip );
	void TickBehavior ( float DeltaTime );
};

// Class SFXGame.BioArtPlaceableBehavior
// 0x00A6 (0x01F6 - 0x0150)
class UBioArtPlaceableBehavior : public UBioActorBehavior
{
public:
	struct FString                                     m_sConnectedObjectA;                              		// 0x0150 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     m_sConnectedObjectB;                              		// 0x0160 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     m_sVarName;                                       		// 0x0170 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UAnimSet*>                     m_aBackupAnimSets;                                		// 0x0180 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     m_vLastImpactVector;                              		// 0x0190 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nCurrentMaterialVar;                            		// 0x019C (0x0008) [0x0000000000000000]              
	struct FName                                       StartingState;                                    		// 0x01A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_State0;                                         		// 0x01AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_State1;                                         		// 0x01B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioWorldInfo*                               bioWorld;                                         		// 0x01BC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmCurrentActivity;                              		// 0x01C4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioWp_DoorMarker*                           m_oDoorMarker;                                    		// 0x01CC (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmLastState;                                    		// 0x01D4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSkillProgress;                                 		// 0x01DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nIndex;                                         		// 0x01E0 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevRegionIndex;                               		// 0x01E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPrevPlotIndex;                                 		// 0x01E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bStartingStateOverride : 1;                     		// 0x01EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bUseCaseOverride : 1;                           		// 0x01EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bPlayerOnly : 1;                                		// 0x01EC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      Enabled : 1;                                      		// 0x01EC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bInPhysics : 1;                                 		// 0x01EC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bPhysicsAffectableOverride : 1;                 		// 0x01EC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bPhysicsAffectable : 1;                         		// 0x01EC (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      m_bUseCustomCollisionSettings : 1;                		// 0x01EC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      m_bDontInvalidatePaths : 1;                       		// 0x01EC (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      m_bMonitorDoor : 1;                               		// 0x01EC (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bNoStateSave : 1;                                 		// 0x01EC (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      m_bInMatinee : 1;                                 		// 0x01EC (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      m_bSkillGameFailed : 1;                           		// 0x01EC (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bSkillGameXpAwarded : 1;                        		// 0x01EC (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned char                                      MaterialVariation;                                		// 0x01F0 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      m_eUseCase;                                       		// 0x01F1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_SkillDifficulty;                                		// 0x01F2 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Region;                                           		// 0x01F3 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x01F4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Conditional;                                      		// 0x01F5 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ProceedWithMove ( class APawn* oPawn );
	void SetWaitingForMove ( unsigned long bVal );
	bool IsPhysicsAffectable ( );
	struct FName GetStateFailure ( );
	struct FName GetStateSuccess ( );
	bool IsTransitioning ( );
	void OnTransitionCPP ( struct FName FromState, struct FName ToState );
	void ChangeStateMesh ( struct FName* nmState );
	void SetCollision ( unsigned long bCollide );
	struct FName eventGetCurrentState ( );
	void eventReactToImpulse ( struct FVector vMomentum, struct FVector vHitLocation );
	void eventOnTransition ( struct FName FromState, struct FName ToState, unsigned long bCallCPP );
	void eventOnArtPlaceablePlotFail ( class AActor* oUsingActor, struct FName nmToState );
	void eventOnArtPlaceableUsed ( class AActor* User, struct FName ToState );
	bool eventIsInteractive ( );
	struct FName GetState ( );
	void PostBeginPlay ( );
	struct FName GetStartingState ( );
	void DoDoorFinished ( struct FName ToState );
	bool HasTransition ( struct FName ToState, struct FName Transition );
	bool SetState ( struct FName ToState, struct FName NamedTransition, unsigned long IgnoreTransition, unsigned long bRightNow, unsigned long bApplyVFX );
	bool RequiresProximityTimer ( );
	void VerifyNotEditor ( );
	void ApplyVFXForState ( struct FName NewState, unsigned long bForce );
	void PreloadVFX ( );
	bool IsMeshPhysicsCapable ( );
	void InitializeActionFramework ( );
};

// Class SFXGame.BioEpicPawnBehavior
// 0x0064 (0x01B4 - 0x0150)
class UBioEpicPawnBehavior : public UBioActorBehavior
{
public:
	struct TArray<class UBioPower*>                    m_powers;                                         		// 0x0150 (0x0010) [0x1000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FEpicPawnVisualEffect>        m_aVisualEffects;                                 		// 0x0160 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      m_attributesClass;                                		// 0x0170 (0x0008) [0x0000000000000000]              
	class ABioBaseSquad*                               Squad;                                            		// 0x0178 (0x0008) [0x1000000000000001]              ( CPF_Edit )
	class UBioAttributesEpicPawn*                      m_PawnAttributes;                                 		// 0x0180 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_nALLEnabled;                                    		// 0x0188 (0x0004) [0x0000000000000000]              
	int                                                m_nQueueEnabled;                                  		// 0x018C (0x0004) [0x0000000000000000]              
	int                                                m_nStackEnabled;                                  		// 0x0190 (0x0004) [0x0000000000000000]              
	int                                                m_nWeaponsEnabled;                                		// 0x0194 (0x0004) [0x0000000000000000]              
	int                                                m_nGrenadesEnabled;                               		// 0x0198 (0x0004) [0x0000000000000000]              
	int                                                m_nPowersEnabled;                                 		// 0x019C (0x0004) [0x0000000000000000]              
	int                                                m_nCombatTransitionEnabled;                       		// 0x01A0 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentPowerIndex;                             		// 0x01A4 (0x0004) [0x0000000000000000]              
	int                                                m_nDoorProximityRefCount;                         		// 0x01A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bDoCameraBehaviorTransition : 1;                		// 0x01AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      m_eCurrentActionState;                            		// 0x01B0 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_ePreviousActionState;                           		// 0x01B1 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_combatModeFadeoutState;                         		// 0x01B2 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eWeaponFireMode;                                		// 0x01B3 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool DisplayEpicPawnVisualEffect ( struct FName nmLabel );
	void eventAdjustInventoryResource ( unsigned char eResourceType, int nAmt, unsigned long bNotifyTicker );
	int eventGetInventoryResource ( unsigned char eResourceType );
	int FindPowerIndex ( struct FName nmPowerName );
	class UBioPower* FindPower ( struct FName nmPowerName );
	int GetDoorProximityRefCount ( );
	void ModifyDoorProximityRefCount ( unsigned long bIncrement );
	unsigned char SetPreviousActionState ( );
	unsigned char SetActionState ( unsigned char eState, float fDelay );
	void TickPowers ( float DeltaTime );
	void ClearCurrentPower ( );
	bool SetCurrentPower ( struct FName nmPower, float* fCooldownRemaining );
	bool IsAbilityEnabledCombatTransition ( );
	bool IsAbilityEnabledPowers ( );
	bool IsAbilityEnabledGrenades ( );
	bool IsAbilityEnabledWeapons ( );
	bool IsAbilityEnabledStack ( );
	bool IsAbilityEnabledQueue ( );
	bool IsAbilityEnabledAll ( );
	void DoDisabledEvent ( unsigned char eEnableType, struct FName nmSubType );
	void DoEnabledEvent ( unsigned char eEnableType, struct FName nmSubType );
	bool IsAbilityEnabled_Power ( unsigned char eEnableType, struct FName nmSubType );
	int AbilityEnable_Power ( unsigned long bEnable, unsigned char eEnableType, struct FName nmSubType );
	bool IsAbilityEnabled_Offense ( unsigned char eEnableType, struct FName nmSubType );
	int AbilityEnable_Offense ( unsigned long bEnable, unsigned char eEnableType, struct FName nmSubType );
	bool IsAbilityEnabled_AI ( unsigned char eEnableType, struct FName nmSubType );
	int AbilityEnable_AI ( unsigned long bEnable, unsigned char eEnableType, struct FName nmSubType );
	void InitializeActionFramework ( );
	void TickBehavior ( float DeltaTime );
};

// Class SFXGame.BioPawnBehavior
// 0x0192 (0x0346 - 0x01B4)
class UBioPawnBehavior : public UBioEpicPawnBehavior
{
public:
	struct TArray<class UAnimSet*>                     m_aBackupAnimSets;                                		// 0x01B4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<float>                               STAT_dist;                                        		// 0x01C4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<float>                               STAT_boost;                                       		// 0x01D4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<float>                               STAT_AITime;                                      		// 0x01E4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<int>                                 STAT_PathFindMode;                                		// 0x01F4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<float>                               STAT_PathFindModeTime;                            		// 0x0204 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FName>                        STAT_FollowState;                                 		// 0x0214 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<int>                                 STAT_GroundSpeed;                                 		// 0x0224 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     m_vFixedRotation;                                 		// 0x0234 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_rLastStopRotation;                              		// 0x0240 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_rSkidStartRotation;                             		// 0x024C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_rSkidTargetRotation;                            		// 0x0258 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_oMeshAdjLastBase;                               		// 0x0264 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmDebugKey;                                     		// 0x026C (0x0008) [0x0000000000000000]              
	float                                              m_fPowerUsePercent;                               		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTurningAngle;                                  		// 0x0278 (0x0004) [0x0000000000000000]              
	float                                              m_fAnimStartTime;                                 		// 0x027C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMoveStartElapsedTime;                          		// 0x0280 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMoveStopElapsedTime;                           		// 0x0284 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fAnimMoveSpeedSnapshot;                         		// 0x0288 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fAnimMoveStartSpeedSnapshot;                    		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCurPhysSettleDownTime;                         		// 0x0290 (0x0004) [0x0000000000000000]              
	float                                              m_fInclineUpMod;                                  		// 0x0294 (0x0004) [0x0000000000000000]              
	float                                              m_fInclineDownMod;                                		// 0x0298 (0x0004) [0x0000000000000000]              
	float                                              m_fSkidTurnThresh;                                		// 0x029C (0x0004) [0x0000000000000000]              
	float                                              m_fPawnStopDecelTime;                             		// 0x02A0 (0x0004) [0x0000000000000000]              
	float                                              m_fMeshAdjRate;                                   		// 0x02A4 (0x0004) [0x0000000000000000]              
	float                                              m_fManualMeshAdj;                                 		// 0x02A8 (0x0004) [0x0000000000000000]              
	float                                              m_fMeshAdjCheckFrequency;                         		// 0x02AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMeshAdjFarCheckFrequency;                      		// 0x02B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMeshAdjFarCheckDistance;                       		// 0x02B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMeshAdjTimeTillCheck;                          		// 0x02B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMeshAdjLastDistFound;                          		// 0x02BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PawnMoveStartTimerThreshold;                      		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PawnMoveStopTimerThreshold;                       		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDesiredMaxSpeed;                               		// 0x02C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCurrentInclineMoveMod;                         		// 0x02CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSkidDSDecelRate;                               		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMoveStopDSDecelRate;                           		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PathFind_LastMovment_Mode;                        		// 0x02D8 (0x0004) [0x0000000000000000]              
	float                                              STAT_boost_track;                                 		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              STAT_Dist_track;                                  		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                STAT_Samples;                                     		// 0x02E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                STAT_ERRORS;                                      		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                STAT_Teleports;                                   		// 0x02EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                STAT_AbortedMoveTowards;                          		// 0x02F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CAMHOOK_NORMAL_FRONTBACK;                         		// 0x02F4 (0x0004) [0x0000000000000000]              
	float                                              CAMHOOK_NORMAL_RIGHTLEFT;                         		// 0x02F8 (0x0004) [0x0000000000000000]              
	float                                              CAMHOOK_NORMAL_UPDOWN;                            		// 0x02FC (0x0004) [0x0000000000000000]              
	float                                              CAMHOOK_COLL_UPDOWN;                              		// 0x0300 (0x0004) [0x0000000000000000]              
	float                                              CAMHOOK_COLL_FRONTBACK;                           		// 0x0304 (0x0004) [0x0000000000000000]              
	float                                              CAMHOOK_COLL_RIGHTLEFT;                           		// 0x0308 (0x0004) [0x0000000000000000]              
	float                                              CAMHOOK_COMBAT_UPDOWN;                            		// 0x030C (0x0004) [0x0000000000000000]              
	float                                              CAMHOOK_COMBAT_FRONTBACK;                         		// 0x0310 (0x0004) [0x0000000000000000]              
	float                                              CAMHOOK_COMBAT_RIGHTLEFT;                         		// 0x0314 (0x0004) [0x0000000000000000]              
	float                                              CAMHOOK_SNIPER_UPDOWN;                            		// 0x0318 (0x0004) [0x0000000000000000]              
	float                                              CAMHOOK_SNIPER_FRONTBACK;                         		// 0x031C (0x0004) [0x0000000000000000]              
	float                                              CAMHOOK_SNIPER_RIGHTLEFT;                         		// 0x0320 (0x0004) [0x0000000000000000]              
	float                                              CAMHOOK_TACSEL_UPDOWN;                            		// 0x0324 (0x0004) [0x0000000000000000]              
	float                                              CAMHOOK_TACSEL_FRONTBACK;                         		// 0x0328 (0x0004) [0x0000000000000000]              
	float                                              CAMHOOK_TACSEL_RIGHTLEFT;                         		// 0x032C (0x0004) [0x0000000000000000]              
	int                                                m_nRemainInRagdoll;                               		// 0x0330 (0x0004) [0x0000000000000000]              
	float                                              m_fDeathCapabilityActivationTime;                 		// 0x0334 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fVehicleExpScaleFactor;                         		// 0x0338 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bPowerUsePercentOverride : 1;                   		// 0x033C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bReadyForCombat : 1;                            		// 0x033C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bInMatinee : 1;                                 		// 0x033C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bEnableStartAnim : 1;                           		// 0x033C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bEnableSkidAnim : 1;                            		// 0x033C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bEnableStopAnim : 1;                            		// 0x033C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bAllowStartAnimInCombat : 1;                    		// 0x033C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bAllowSkidAnimInCombat : 1;                     		// 0x033C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bAllowStopAnimInCombat : 1;                     		// 0x033C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bMeshAdjOn : 1;                                 		// 0x033C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      m_bUseManualMeshAdj : 1;                          		// 0x033C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bDoneYawInterpolation : 1;                      		// 0x033C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      m_bDoneSpeedInterpolation : 1;                    		// 0x033C (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      m_bCanBePhysicsImpacted : 1;                      		// 0x033C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      m_bCanBePhysicsImpactedOverride : 1;              		// 0x033C (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      m_bIsFeigningDeath : 1;                           		// 0x033C (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      m_bCanUseDeathCapabilities : 1;                   		// 0x033C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned char                                      m_eCombatState;                                   		// 0x0340 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_eTurningDirection;                              		// 0x0341 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eAnimStartState;                                		// 0x0342 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_eAnimSkidState;                                 		// 0x0343 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_eAnimStopState;                                 		// 0x0344 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_eGetUpState;                                    		// 0x0345 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int GetActorTypeGameName ( );
	void eventTEMP_HolsterWeapon ( );
	void eventTEMP_DrawWeapon ( );
	float GetPowerUsePercent ( );
	bool GetCanBePhysicsImpacted ( );
	unsigned char SetActionState ( unsigned char eState, float fDelay );
	void DecrementRagdollCount ( );
	void IncrementRagdollCount ( );
	void FeignDeathKismet ( unsigned long B );
	void eventFeignDeath ( unsigned long B, unsigned long bForceState );
	int GetCharmSkill ( class USFXPowerLevelUpHelper* LevelUpHelper );
	int GetIntimidateSkill ( class USFXPowerLevelUpHelper* LevelUpHelper );
	void ProcessMeshAdj ( float fDeltaTime );
	bool InPlayerParty ( );
	bool GetBioticAmpEquipped ( );
	int GetClass ( );
	void eventAdjustMediGel ( int nAmt );
	int eventGetMediGel ( );
	void AdjustCredits ( int nAmt );
	int GetCredits ( );
	void AdvanceTalkToCount ( int nAmt );
	void SetTalkToCount ( int nValue );
	int GetTalkToCount ( );
	void SetBackground_Notoritey ( int nValue );
	int GetBackground_Notoritey ( );
	void SetBackground_Childhood ( int nValue );
	int GetBackground_Childhood ( );
	bool eventHasKey ( struct FName Key );
	void PostBeginPlay ( );
	void SoftResetMovementAndAnimationState ( );
	void HardResetActionAndAnimationState ( );
	void TickBehavior ( float DeltaTime );
	bool FindFirstValidPrimaryFloatAttribute ( class UBio2DA* table, int nRankedLevel, struct FName ColumnName, float* fValue );
	void InitializeActionFramework ( );
};

// Class SFXGame.BioSFHandler_AdditionalContent
// 0x0013 (0x00AC - 0x0099)
class UBioSFHandler_AdditionalContent : public UBioSFHandler
{
public:
	struct TArray<struct FDLCInfo_t>                   DLCInfo;                                          		// 0x009C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSFHandler_BlackScreen
// 0x0020 (0x00B9 - 0x0099)
class UBioSFHandler_BlackScreen : public UBioSFHandler
{
public:
	struct FString                                     m_ASPath;                                         		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_CurrentAlpha;                                   		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              m_AccumulatedFadeTime;                            		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              m_FadeTime;                                       		// 0x00B4 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eDisplayMode;                                   		// 0x00B8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsFading ( );
	void Show ( unsigned long bWithFade );
	void Hide ( unsigned long bWithFade );
	void OnPanelAdded ( );
};

// Class SFXGame.BioSFHandler_BrowserWheel
// 0x002B (0x00C4 - 0x0099)
class UBioSFHandler_BrowserWheel : public UBioSFHandler
{
public:
	struct TArray<struct FBWPageStruct>                lstPages;                                         		// 0x009C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FVector                                     vInput;                                           		// 0x00AC (0x000C) [0x0000000000000000]              
	class USFXPowerLevelUpHelper*                      m_Helper;                                         		// 0x00B8 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              fLastRadius;                                      		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	void ExitGame ( );
	void MainMenuConfirm ( unsigned long bAPressed, int nContext );
	void SetResourceValues ( );
	void InitializeBrowser ( );
	void DetermineJournalCodexUpdateStatus ( );
	void DetermineSquadUpdateStatus ( );
	void Update ( float fDeltaT );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* lstArguments );
	void eventShowSelectedPanel ( int nPanel, class UBioSFManager* oManager );
};

// Class SFXGame.BioSFHandler_PCPauseMenu
// 0x0004 (0x00C8 - 0x00C4)
class UBioSFHandler_PCPauseMenu : public UBioSFHandler_BrowserWheel
{
public:
	unsigned long                                      bWaitForNextFrame : 1;                            		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void eventUpdate ( float fDeltaT );
	void MainMenuConfirm ( unsigned long bAPressed, int nContext );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void ExitConfirm ( unsigned long bAPressed, int nContext );
	void ExitGame ( );
	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* lstArguments );
	void OnPanelRemoved ( );
	void eventOnPanelAdded ( );
};

// Class SFXGame.BioSFHandler_ChoiceGUI
// 0x0087 (0x0120 - 0x0099)
class UBioSFHandler_ChoiceGUI : public UBioSFHandler
{
public:
	struct FString                                     m_sResourceCostColorHTML_CanAfford;               		// 0x009C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sResourceCostColorHTML_CantAfford;              		// 0x00AC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __InputCallback__Delegate;                        		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UpdateCallback__Delegate;                       		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UpdateCallbackEx__Delegate;                     		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXGameChoiceGUIData*                       m_ChoiceData;                                     		// 0x00EC (0x0008) [0x0000000000000000]              
	int                                                nInputCallbackContext;                            		// 0x00F4 (0x0004) [0x0000000000000000]              
	int                                                m_srResourceTextCredits;                          		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srResourceTextEzo;                              		// 0x00FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srResourceTextIridium;                          		// 0x0100 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srResourceTextPalladium;                        		// 0x0104 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srResourceTextPlatinum;                         		// 0x0108 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srResourceTextProbes;                           		// 0x010C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srResourceCostFormat;                           		// 0x0110 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srResourceAvailFormat;                          		// 0x0114 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInfoScrollSpeed;                               		// 0x0118 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bStopScroll : 1;                                		// 0x011C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void CleanUpDelegateReferences ( );
	void GameSessionEnded ( );
	int eventGetResourceCount ( int nResource );
	void eventonExIntUpdateOptionValues ( int nResource );
	void eventOnPanelRemoved ( );
	void eventOnPanelAdded ( );
	void ScrollText ( float fValue );
	void HandleInputEvent ( unsigned char Event, float fValue );
	struct FString GetResourceText ( unsigned char eResource );
	void Initialize ( class USFXGameChoiceGUIData* ChoiceData );
	void HideChoiceGUI ( unsigned long bRemove );
	void ShowChoiceGUI ( );
	void SetUpdateDelegate ( struct FScriptDelegate pDelegate );
	void SetInputDelegate ( struct FScriptDelegate pDelegate, int nContext );
	void UpdateCallbackEx ( float fDeltaT, class UObject* oChoiceGUI );
	void UpdateCallback ( float fDeltaT, class UBioSFHandler_ChoiceGUI* oChoiceGUI );
	void InputCallback ( unsigned long bAPressed, int nContext );
};

// Class SFXGame.SFXSFHandler_PRCShop
// 0x0018 (0x0138 - 0x0120)
class USFXSFHandler_PRCShop : public UBioSFHandler_ChoiceGUI
{
public:
	struct TArray<struct FPRCInfo_t>                   PRCInfo;                                          		// 0x0120 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class USFXGameChoiceGUIData_PRCShop*               m_ChoiceDataNoStrRef;                             		// 0x0130 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ShowChoiceGUI ( );
};

// Class SFXGame.BioSFHandler_Conversation
// 0x0097 (0x0130 - 0x0099)
class UBioSFHandler_Conversation : public UBioSFHandler
{
public:
	int                                                m_aReplyLocations[ 0x6 ];                         		// 0x009C (0x0018) [0x0000000000000000]              
	int                                                m_aInvestigateLocations[ 0x6 ];                   		// 0x00B4 (0x0018) [0x0000000000000000]              
	int                                                m_nSlotsUsed[ 0x6 ];                              		// 0x00CC (0x0018) [0x0000000000000000]              
	struct FVector                                     vInput;                                           		// 0x00E4 (0x000C) [0x0000000000000000]              
	int                                                m_srTextInvestigate;                              		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srTextReturn;                                   		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nReplyLocationMiddleLeft;                       		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nReplyLocationTopLeft;                          		// 0x00FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nReplyLocationBottomLeft;                       		// 0x0100 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nReplyLocationTopRight;                         		// 0x0104 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nReplyLocationBottomRight;                      		// 0x0108 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nReplyLocationMiddleRight;                      		// 0x010C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInvestigateLocationMiddleLeft;                 		// 0x0110 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInvestigateLocationTopLeft;                    		// 0x0114 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInvestigateLocationBottomLeft;                 		// 0x0118 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInvestigateLocationTopRight;                   		// 0x011C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInvestigateLocationBottomRight;                		// 0x0120 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInvestigateLocationMiddleRight;                		// 0x0124 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fLastRadius;                                      		// 0x0128 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDisplayInvestigateSubMenu : 1;                 		// 0x012C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDisplayingWheel : 1;                           		// 0x012C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bDisplayingParagonInterrupt : 1;                		// 0x012C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bDIsplayingRenegadeInterrupt : 1;               		// 0x012C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bSFScreenInitialized : 1;                       		// 0x012C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bWasTriggered : 1;                              		// 0x012C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsVisible ( );
	void eventSetVisible ( unsigned long bVal );
	int GetInvestigateReplyCount ( class UBioConversation* oConversation );
	unsigned char GetReplyLocation ( int nReplyCategory );
	unsigned char GetInvestigateReplyLocation ( int nInvestigateSlot );
	bool SelectConversationEntry ( unsigned char nWheelLocation );
	int MapGuiStyleToOptionMode ( unsigned char eGUIStyle );
	void UpdateConversationOptions ( class UBioConversation* oConversation );
	void Update ( float fDeltaT );
	void CalculateArrowPosition ( struct FASParams* stParam, struct TArray<struct FASParams>* lstParams );
	void UpdateInterruptVisuals ( class UBioConversation* oConversation );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* lstArguments );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	int GetNumReplies ( class UBioConversation* oConversation );
	void InterruptRenegade ( );
	void InterruptParagon ( );
	void SkipConversation ( );
	void SelectConversationSegment ( );
	void HighlightDefaultConvSegment ( );
};

// Class SFXGame.BioSFHandler_Credits
// 0x0063 (0x00FC - 0x0099)
class UBioSFHandler_Credits : public UBioSFHandler
{
public:
	struct TArray<struct FBioCreditsDetails>           lstFlashingCredits;                               		// 0x009C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FBioCreditsDetails>           lstScrollingCredits;                              		// 0x00AC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FBioCreditsDetails>           lstDLCScrollingCredits;                           		// 0x00BC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCloseCallback__Delegate;                      		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              fFadeTime;                                        		// 0x00DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fHoldTime;                                        		// 0x00E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fScrollTime;                                      		// 0x00E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srConfirmExitMessage;                             		// 0x00E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srExitYes;                                        		// 0x00EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srExitNo;                                         		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nCreditIndex;                                     		// 0x00F4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFromMainMenu : 1;                                		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bFromAdditionalContent : 1;                       		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFromPRCChoiceGUI : 1;                            		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bFromKismet : 1;                                  		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventSetFromPRCChoiceGUI ( );
	void eventSetFromAdditionalContent ( );
	void SetFromMainMenu ( );
	void PopulateScrollingCredits ( );
	void SendFlashingCredit ( );
	void SetupCreditDetails ( );
	void EndCredits ( );
	void ConfirmButtonPressed ( unsigned long bAPressed, int nContext );
	void OnCancel ( );
	void Pause ( unsigned long B );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* lstArguments );
	bool SetDataFromIniFile ( struct FString a_sSection );
	void SetOnCloseCallback ( struct FScriptDelegate fn_OnCloseDelegate );
	void OnCloseCallback ( );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
};

// Class SFXGame.BioSFHandler_DataCodex
// 0x0073 (0x010C - 0x0099)
class UBioSFHandler_DataCodex : public UBioSFHandler
{
public:
	struct TArray<struct FDataCodexEntryDetails>       lstSections;                                      		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FCodexImageDetails>           lstImages;                                        		// 0x00AC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     sDefaultCodexImage;                               		// 0x00BC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     sExternalTextureLink;                             		// 0x00CC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UWwiseAudioComponent*                        m_oVoiceOver;                                     		// 0x00DC (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              m_fScrollValue;                                   		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                m_nVoiceOverPage;                                 		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeUntilVoiceOver;                            		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              fVoiceOverDelay;                                  		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fVoiceOverCancelFadeOut;                          		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srMarkAllCompleteMessage;                         		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srMarkAllCompleteMessageConfirm;                  		// 0x00FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srMarkAllCompleteMessageCancel;                   		// 0x0100 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nUpStamp;                                       		// 0x0104 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bAnalogScroll : 1;                              		// 0x0108 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnSwapTabs ( );
	void OnEnteredSubItem ( int nSection, int nPage );
	void OnExpandItem ( int nSection );
	void OnExitedItem ( );
	void OnEnteredItem ( int nSection );
	void OnSortItems ( );
	void OnSetAllItemsViewed ( );
	void OnInitialize ( );
	void MarkAllSectionsViewed ( unsigned long bAPressed, int nContext );
};

// Class SFXGame.BioSFHandler_DesignerUI
// 0x009F (0x0138 - 0x0099)
class UBioSFHandler_DesignerUI : public UBioSFHandler
{
public:
	struct TArray<struct FBioDUIPulseDetails>          lstPulsingElements;                               		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioDUIElementStatus                        lstElementStatus[ 0x16 ];                         		// 0x00AC (0x0058) [0x0000000000000000]              
	struct FBioDUITimerDetails                         stModalTimer;                                     		// 0x0104 (0x0014) [0x0000000000000000]              
	struct FBioDUITimerDetails                         stPassiveTimer;                                   		// 0x0118 (0x0014) [0x0000000000000000]              
	int                                                nElementVisibleCount;                             		// 0x012C (0x0004) [0x0000000000000000]              
	int                                                m_nLayout;                                        		// 0x0130 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bCanInvoke : 1;                                 		// 0x0134 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnPanelAdded ( );
	void ExIntInitialize ( );
	float GetTimerValue ( unsigned long bModalTimer );
	void SetTimerDetails ( unsigned long bModalTimer, float fStartTime, float fEndTime, float fInterval );
	bool IsQuasarLayout ( );
	void SetQuasarLayout ( unsigned long bShow );
	void SetBarFillDirection ( unsigned long bModalBar, unsigned long bLeftToRight );
	void SetBarFillPercent ( unsigned long bModalBar, int nPercent );
	void SetBarMarkerPoints ( unsigned long bModalBar, int nMarker1, int nMarker2 );
	void SetCounterValue ( unsigned long bModalCounter, int nValue );
	void SetElementText ( unsigned char nElement, struct FString* sText );
	void SetTextStringRef ( unsigned char nElement, int srText );
	void ClearElementPulse ( unsigned char nElement );
	int SetupElementPulse ( unsigned char nElement, float fMinAlpha, float fCycleTime );
	void SetElementAlpha ( unsigned char nElement, float fAlpha );
	void SetElementColor ( unsigned char nElement, struct FColor* stColor );
	void SetElementVisible ( unsigned char nElement, unsigned long bVisible, float fFadeTime );
	bool IsActive ( unsigned long bModal );
	void ClearAll ( unsigned long bModal );
};

// Class SFXGame.BioSFHandler_GalaxyMap
// 0x0013 (0x00AC - 0x0099)
class UBioSFHandler_GalaxyMap : public UBioSFHandler
{
public:
	float                                              m_fScrollValue;                                   		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              m_fLeftStickX;                                    		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLeftStickY;                                    		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bClosingPlanet : 1;                             		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bClosingScan : 1;                               		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bWaitingForMsgBox : 1;                          		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventBuyProbes ( );
	void EndRefuel ( );
	void RepeatBuyFuel ( );
	void eventBuyFuel ( );
	void HandleInputEvent ( unsigned char nEvent, float fValue );
	void CloseGalaxyMap ( );
	void UpdateInventoryDisplay ( int nResourceIndex, int nAmount );
	void UpdateScanResources ( struct TArray<float> Resources );
	void TravelConfirm ( unsigned long bAPressed, int nContext );
};

// Class SFXGame.BioSFHandler_PCGalaxyMap
// 0x0004 (0x00B0 - 0x00AC)
class UBioSFHandler_PCGalaxyMap : public UBioSFHandler_GalaxyMap
{
public:
	unsigned long                                      bMoveToMouse : 1;                                 		// 0x00AC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bMouseMovementEnabled : 1;                        		// 0x00AC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void eventBuyProbes ( );
	void HandleInputEvent ( unsigned char nEvent, float fValue );
	void OnPanelAdded ( );
};

// Class SFXGame.BioSFHandler_GameOver
// 0x0017 (0x00B0 - 0x0099)
class UBioSFHandler_GameOver : public UBioSFHandler
{
public:
	int                                                GameOverString;                                   		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                GameOverStringOverride;                           		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                BadResumeGameText;                                		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                AcceptBadResumeGameText;                          		// 0x00A8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWaitingOnLoad : 1;                               		// 0x00AC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void GotoMainMenu ( );
	void DisplayResumeFailure ( );
	void GameOverResume_Callback ( unsigned long bWasSuccessful );
	void OnPanelAdded ( );
	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* lstArguments );
	void Callback_GotoMainMenu ( unsigned long bAPressed, int context );
};

// Class SFXGame.BioSFHandler_Journal
// 0x0043 (0x00DC - 0x0099)
class UBioSFHandler_Journal : public UBioSFHandler
{
public:
	struct TArray<struct FGuiQuestInfo>                lstQuests;                                        		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                lstSortLabels[ 0x3 ];                             		// 0x00AC (0x000C) [0x0000000000004000]              ( CPF_Config )
	int                                                lstSortTitles[ 0x3 ];                             		// 0x00B8 (0x000C) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRScrollValue;                                  		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                srMarkAllCompleteMessage;                         		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srMarkAllCompleteMessageConfirm;                  		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srMarkAllCompleteMessageCancel;                   		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nUpStamp;                                       		// 0x00D4 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bAnalogScroll : 1;                              		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void MarkAllQuestsViewed ( unsigned long bAPressed, int nContext );
	void Update ( float fDeltaT );
	void HandleInputEvent ( unsigned char Event, float fValue );
};

// Class SFXGame.BioSFHandler_Keyboard
// 0x0037 (0x00D0 - 0x0099)
class UBioSFHandler_Keyboard : public UBioSFHandler
{
public:
	struct FString                                     sTitle;                                           		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     sDescription;                                     		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     sInputValue;                                      		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bKeyboardVisible : 1;                             		// 0x00CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bKeyboardEntrySucceeded : 1;                      		// 0x00CC (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DisplayKeyboard ( int srTitle, int srDescription, unsigned char nOptions, int nMaxLength, struct FString sDefault );
};

// Class SFXGame.BioSFHandler_MainMenu
// 0x00B7 (0x0150 - 0x0099)
class UBioSFHandler_MainMenu : public UBioSFHandler
{
public:
	struct FDouble                                     CheckingDataStartTime;                            		// 0x009C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXOnlineComponentUI*                       m_BlazeUI;                                        		// 0x00A4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXSFHandler_PRCShop*                       m_PCRStore;                                       		// 0x00AC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioSFHandler_MessageBox*                    m_oMainMenuGuiMessageBoxHandler;                  		// 0x00B4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                srPRCAvailableMessage;                            		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fPCRMessageDispTime;                              		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CheckingDataMessageDelay;                         		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CheckingDataMessageMinimum;                       		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CheckingDLCMessage;                               		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CheckingSaveDataMessage;                          		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NoLoginStart;                                     		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ConfirmNoLoginStart;                              		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CancelNoLoginStart;                               		// 0x00DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                LostNetworkConnection;                            		// 0x00E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ConfirmNetworkLoss;                               		// 0x00E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                Calander_Title;                                   		// 0x00E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MOTD_Title;                                       		// 0x00EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                UPCOMING_DLC_Title;                               		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                AVAIL_DLC_Title;                                  		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                UPCOMING_CERB_DLC_Title;                          		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                AVAIL_CERB_DLC_Title;                             		// 0x00FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srCerb_ActivateCerb;                              		// 0x0100 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srCerb_ConnectTo;                                 		// 0x0104 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srCerb_ConnectingToCerb;                          		// 0x0108 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srCerb_ConnectedToCerb;                           		// 0x010C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srPRCStore_DescFormat;                            		// 0x0110 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srPRCStore_PurchasedYes;                          		// 0x0114 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srPRCStore_PurchasedNo;                           		// 0x0118 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srPRCStore_Title;                                 		// 0x011C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srPRCStore_Subtitle;                              		// 0x0120 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srPRCStore_ABtn;                                  		// 0x0124 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srPRCStore_BBtn;                                  		// 0x0128 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srExitConfirm;                                    		// 0x012C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srConfirm;                                        		// 0x0130 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srCancel;                                         		// 0x0134 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ConfirmImportME1;                                 		// 0x0138 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srNoSpaceForCareer;                               		// 0x013C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srContinueWithoutSaving;                          		// 0x0140 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srCancelNewCareer;                                		// 0x0144 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bDisplayForNewContentOnly : 1;                    		// 0x0148 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bUseCerberusBackGroundForSubScreens : 1;          		// 0x0148 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      m_bIsConnecting : 1;                              		// 0x0148 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bHasSaves : 1;                                    		// 0x0148 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bHasNewGamePlusSaves : 1;                         		// 0x0148 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bCurrentCareerHasSaves : 1;                       		// 0x0148 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bPendingCharacterIsFemale : 1;                    		// 0x0148 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bWaitingForDLC : 1;                               		// 0x0148 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bWaitingForSaves : 1;                             		// 0x0148 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bCheckingDataComplete : 1;                        		// 0x0148 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bCheckingDataMessageVisible : 1;                  		// 0x0148 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned char                                      nSelectedEntry;                                   		// 0x014C (0x0001) [0x0000000000000000]              
	unsigned char                                      nCurrent3DState;                                  		// 0x014D (0x0001) [0x0000000000000000]              
	unsigned char                                      m_CerbConnectState;                               		// 0x014E (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      PendingCommand;                                   		// 0x014F (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	bool UpdateCheckingDataMessage ( int Message );
	void ShowGameManual ( );
	struct FString GetLocalizedNewsItemCount ( int nCurrent, int nTotal );
	void eventOnInputFocusRecieved ( );
	void RefreshCerberusState ( );
	void PRCStoreGUIInputPressed ( unsigned long bAPressed, int nContext );
	void AddPRCChoices ( class USFXGameChoiceGUIData_PRCShop* oData, struct TArray<struct FSFXOfferDescriptor> aOffers );
	void OpenMarketplaceGui ( struct TArray<struct FSFXOfferDescriptor> aOffers );
	void Buy ( unsigned char nSource );
	void OnExecuteOpenMarketPlace ( );
	void OnExecuteCerberusDLCAvailable ( );
	void OnExecuteShowLiveContent ( );
	void HasCerberusDLC ( unsigned long bVal );
	void CerberusScreenStateChange ( unsigned char eNewState );
	void SetCerberusConnectState ( unsigned long bHasAction, struct FString sMessage, unsigned long bAltView, unsigned long bVisible );
	void CerberusConnect ( unsigned char connectMode );
	void SetOnlineState ( unsigned char eState );
	void SetMarqueeRepeatText ( struct FString MessageData );
	void OnDisplayNotification ( unsigned char Type, struct FString MessageData, struct FString Title, struct FString Image );
	void CloseEANetworking ( );
	void ClearNotifications ( );
	void AddCerberusItem ( struct FString i_sTitle, struct FString i_sInfo, struct FString i_sImage );
	void PrevCerberusItem ( );
	void NextCerberusItem ( );
	void InitCerberus ( );
	void eventSetupMainMenu ( );
	bool CanShowGameManual ( );
	void EndEnumerateCareers ( struct FSFXSaveGameCommandEventArgs Args );
	void BeginEnumerateCareers ( );
	void BeginInitDownloadableContent ( );
	void NotifyLinkStatusChange ( unsigned long bIsConnected );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	void SetEnabledAndVisible ( unsigned long bVal );
	void MoveToLoadGui ( unsigned char LoadMode );
	bool CheckLogin ( );
	bool IsReadyForLegacyImport ( );
	void Callback_NoLoginStart ( unsigned long bAPressed, int context );
	void ReturnToLauncher ( );
	void ExitConfirm ( unsigned long bAPressed, int nContext );
	void ResumeGameCallback ( unsigned long bWasSuccessful );
	void StartNewGameInternal ( );
	void InsufficientSpaceCallback ( unsigned long bAPressed, int context );
	void DisplayInsufficientSpaceMessage ( int AdditionalBytesNeeded );
	void StartNewGameFreeSpaceCallback ( struct FSFXSaveGameCommandEventArgs Args );
	void BeginNewGame ( unsigned long bFemale );
	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* lstArguments );
	class USFXEngine* GetEngine ( );
	void DismissCareerLimitMessage ( );
	bool CheckCareersMaxedOut ( );
};

// Class SFXGame.BioSFHandler_PCMainMenu
// 0x0000 (0x0150 - 0x0150)
class UBioSFHandler_PCMainMenu : public UBioSFHandler_MainMenu
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnYButton ( );
};

// Class SFXGame.BioSFHandler_MessageBox
// 0x004B (0x00E4 - 0x0099)
class UBioSFHandler_MessageBox : public UBioSFHandler
{
public:
	struct FScriptDelegate                             __InputCallback__Delegate;                        		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UpdateCallback__Delegate;                       		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UpdateCallbackEx__Delegate;                     		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioSFManager*                               m_oBackupSFMgr;                                   		// 0x00CC (0x0008) [0x0000000000000000]              
	int                                                nInputCallbackContext;                            		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                m_nHiddenDepth;                                   		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRScrollValue;                                  		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bHandleInput : 1;                                 		// 0x00E0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowMouse : 1;                                   		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bIsModal : 1;                                   		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bForcePlayersOnly : 1;                          		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bInitialPlayersOnly : 1;                        		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bCached : 1;                                    		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bForceVisible : 1;                              		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bDisplayingHint : 1;                            		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void HandleInputEvent ( unsigned char Event, float fValue );
	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void OnPanelAdded ( );
	void DisplayHintMessage ( struct FString srGamepadMessage, struct FString srPCMessage, unsigned long usingGamepad, int nIcon, unsigned char ePosition );
	void HideMessageBox ( unsigned long bRemove, unsigned long bSkipFade );
	void DisplayQuickMessageBoxEx ( struct FString sMessage, struct FBioMessageBoxOptionalParams* stParams );
	void DisplayQuickMessageBox ( int srMessage, struct FBioMessageBoxOptionalParams* stParams );
	void DisplayMessageBoxEx ( struct FString sMessage, struct FBioMessageBoxOptionalParams* stParams );
	void DisplayMessageBox ( int srMessage, struct FBioMessageBoxOptionalParams* stParams );
	void SetUpdateDelegate ( struct FScriptDelegate pDelegate );
	void SetInputDelegate ( struct FScriptDelegate pDelegate, int nContext );
	void UpdateCallbackEx ( float fDeltaT, class UObject* oMsgBox );
	void UpdateCallback ( float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox );
	void InputCallback ( unsigned long bAPressed, int nContext );
};

// Class SFXGame.BioSFHandler_PCMessageBox
// 0x0000 (0x00E4 - 0x00E4)
class UBioSFHandler_PCMessageBox : public UBioSFHandler_MessageBox
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void OnPanelAdded ( );
};

// Class SFXGame.BioSFHandler_NewCharacter
// 0x01B8 (0x0251 - 0x0099)
class UBioSFHandler_NewCharacter : public UBioSFHandler
{
public:
	struct FString                                     sStartMap;                                        		// 0x009C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sMaleName;                                      		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sFemaleName;                                    		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sCode;                                          		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UAnimSet*>                     lstClassAnimSetRefs;                              		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UClass*>                       lstCharacterClasses;                              		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UClass*>                       lstSpawnableClasses;                              		// 0x00FC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FBonusTalentData>             BonusTalents;                                     		// 0x010C (0x0010) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FBonusTalentData>             UnlockedBonusTalents;                             		// 0x011C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FString>                      MalePregeneratedHeadCodes;                        		// 0x012C (0x0010) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FString>                      FemalePregeneratedHeadCodes;                      		// 0x013C (0x0010) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCloseCallback__Delegate;                      		// 0x014C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ABioPawn*                                    lstTemplates[ 0x3 ];                              		// 0x015C (0x0018) [0x0000000000000000]              
	struct FName                                       lstStoredVarNames[ 0x3 ];                         		// 0x0174 (0x0018) [0x0000000000000000]              
	struct FName                                       lstCurrentClass[ 0x3 ];                           		// 0x018C (0x0018) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmAllianceComputerPleaseLogin;                  		// 0x01A4 (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmClassAnimSet;                                 		// 0x01AC (0x0008) [0x0000000000000000]              
	class USFXMorphFaceFrontEndDataSource*             MaleDataSource;                                   		// 0x01B4 (0x0008) [0x0000000000000000]              
	class USFXMorphFaceFrontEndDataSource*             FemaleDataSource;                                 		// 0x01BC (0x0008) [0x0000000000000000]              
	struct FName                                       IconicTemplateName;                               		// 0x01C4 (0x0008) [0x0000000000000000]              
	struct FName                                       CustomTemplateName;                               		// 0x01CC (0x0008) [0x0000000000000000]              
	class UBioVFXTemplate*                             SchematicVisualEffect;                            		// 0x01D4 (0x0008) [0x0000000000000000]              
	class UAnimSet*                                    SchematicAnimSet;                                 		// 0x01DC (0x0008) [0x0000000000000000]              
	class UBioSFHandler_Keyboard*                      oKeyboard;                                        		// 0x01E4 (0x0008) [0x0000000000000000]              
	class UBioMorphFaceFrontEnd*                       m_oBioMorphFrontEnd;                              		// 0x01EC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              fLookAtUpDownValue;                               		// 0x01F4 (0x0004) [0x0000000000000000]              
	float                                              fLookAtLeftRightValue;                            		// 0x01F8 (0x0004) [0x0000000000000000]              
	int                                                srCustomMaleName;                                 		// 0x01FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srCustomFemaleName;                               		// 0x0200 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srNewCharConfirm;                                 		// 0x0204 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srNewCharCancel;                                  		// 0x0208 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srNewCharQuestion;                                		// 0x020C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srFacialCategoryDescription;                      		// 0x0210 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srConfirm;                                        		// 0x0214 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nDefaultOrigin;                                 		// 0x0218 (0x0004) [0x0000000000000000]              
	int                                                m_nDefaultNotoriety;                              		// 0x021C (0x0004) [0x0000000000000000]              
	int                                                m_nDefaultClass;                                  		// 0x0220 (0x0004) [0x0000000000000000]              
	int                                                srNameTitle;                                      		// 0x0224 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nMaxNameLength;                                   		// 0x0228 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srCodeTitle;                                      		// 0x022C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nMaxCodeLength;                                   		// 0x0230 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInfoScrollSpeed;                               		// 0x0234 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NoSaveDevice;                                     		// 0x0238 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                ConfirmSelectDevice;                              		// 0x023C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CancelSelectDevice;                               		// 0x0240 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CurrentPregeneratedHeadIndex;                     		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bLookAtLeftRightNulling : 1;                      		// 0x0248 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLookAtUpDownNulling : 1;                         		// 0x0248 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bZoomedInOnFace : 1;                              		// 0x0248 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bOpenedFromMainMenu : 1;                          		// 0x0248 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bImportingCharacter : 1;                          		// 0x0248 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bMaleSelected : 1;                              		// 0x0248 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bEnteringCode : 1;                              		// 0x0248 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bStopScroll : 1;                                		// 0x0248 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned char                                      m_nDataOrigin;                                    		// 0x024C (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nCurrentTemplate;                               		// 0x024D (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nLastInitializedTemplate;                       		// 0x024E (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentLookAtTarget;                              		// 0x024F (0x0001) [0x0000000000000000]              
	unsigned char                                      NextLookAtTarget;                                 		// 0x0250 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateLookAtTarget ( );
	void Callback_NoDevice ( unsigned long bAPressed, int context );
	void OnDeviceSelectionComplete ( unsigned long bWasSuccessful );
	void ChooseStorageDevice ( );
	void eventProcessExternalStates ( );
	void eventTriggerClassOverlay ( );
	void SelectPreviousPregeneratedHead ( );
	void SelectNextPregeneratedHead ( );
	void ConfirmButtonPressed ( unsigned long bAPressed, int nContext );
	void ConfirmComplete ( );
	void ClearModels ( );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	void PopulateCustomFaceList ( );
	void HandleSliderChange ( int nCategory, int nSlider, int nValue );
	void DoCategoryReset ( int nCategory );
	void SetSliderPositions ( );
	void SetCustomModel ( );
	void Update3DModel ( unsigned char nTemplate );
	void Update3DModelState ( unsigned char nTemplate );
	void eventStartNewGameEx ( );
	void StartNewGame ( );
	void RefitBonusTalent ( struct FName BonusTalent );
	void GetAllUnlockedBonusTalentInfo ( struct TArray<struct FBonusTalentData>* aUnlockedBonusTalentInfo );
	void UpdateBonusTalentList ( );
	void StartGameWithCustomCharacter ( struct TArray<struct FString>* playerSettings );
	void StartGameWithIconicCharacter ( struct TArray<struct FString>* lstSettings );
	void UpdateCustomClassChoice ( class UClass* PlayerClass, int Row );
	void UpdateCustomClassList ( );
	void SetupSummary ( );
	void SetCustomName ( struct FString sMaleName, struct FString sFemaleName );
	void UpdateCode ( );
	void ApplyNewCode ( struct FString sInputCode );
	void Update ( float fDeltaT );
	void ResetLookAt ( );
	void HandleLookAtLeftRight ( float fValue );
	void HandleLookAtUpDown ( float fValue );
	void HandleRotate ( float fValue );
	void ScrollText ( float fValue );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void SetUIPawnCasual ( unsigned long bCasual );
	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* lstArguments );
	void SetBackgroundMaterial ( class UMaterialInterface* Material );
	void SetSchematicResources ( class UBioVFXTemplate* in_SchematicEffectTemplate, class UAnimSet* in_SchematicAnimSet );
	void SetClassVFXTemplates ( class UBioVFXTemplate* FullBioticEffectTemplate, class UBioVFXTemplate* HalfBioticEffectTemplate, class UBioVFXTemplate* TechToolEffectTemplate );
	void AddKismetNamedObject ( struct FName KismetVariableName, class UObject* ObjectValue );
	void SetMaleSelected ( unsigned long bSelected );
	class UClass* eventGetCharacterClassByName ( struct FName nmClass );
	void Update3DModelByClass ( struct FName nmClass, class ABioPawn* pTemplate, unsigned char nTemplate, unsigned long bUpdate, unsigned long bForce, unsigned long bAttachVFXandUpdatePose );
	void Setup3DModel ( );
	void SetOnCloseCallback ( struct FScriptDelegate fn_OnCloseDelegate );
	void OnCloseCallback ( );
};

// Class SFXGame.BioSFHandler_PCNewCharacter
// 0x0017 (0x0268 - 0x0251)
class UBioSFHandler_PCNewCharacter : public UBioSFHandler_NewCharacter
{
public:
	float                                              fScrollValueMouse;                                		// 0x0254 (0x0004) [0x0000000000000000]              
	float                                              fLookAtThresholdAhead;                            		// 0x0258 (0x0004) [0x0000000000000000]              
	float                                              fLookAtThreshold;                                 		// 0x025C (0x0004) [0x0000000000000000]              
	float                                              fLookAtLimit;                                     		// 0x0260 (0x0004) [0x0000000000000000]              
	unsigned long                                      bHeadLookEnabled : 1;                             		// 0x0264 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void UpdateLookAtTarget ( );
	void eventUpdate ( float fDeltaT );
	void HandleLookAtLeftRightMouse ( float fValue );
	void HandleLookAtUpDownMouse ( float fValue );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* lstArguments );
	void OnPanelAdded ( );
	struct FString ClipboardPaste ( );
	void ClipboardCopy ( struct FString sString );
};

// Class SFXGame.BioSFHandler_Options
// 0x0084 (0x011D - 0x0099)
class UBioSFHandler_Options : public UBioSFHandler
{
public:
	struct TArray<int>                                 m_lstOptsToReset;                                 		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FOptionTelemetryInfo>         TelemetryInfo;                                    		// 0x00AC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FOptionTelemetryInfo>         ExtendedTelemetryInfo;                            		// 0x00BC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCloseCallback__Delegate;                      		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXProfileSettings*                         NewSettings;                                      		// 0x00DC (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                ResetToDefaultsText;                              		// 0x00E4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                ConfirmResetToDefaultsText;                       		// 0x00E8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CancelResetToDefaultsText;                        		// 0x00EC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                ExitConfirmText;                                  		// 0x00F0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                ConfirmExitFromMenuText;                          		// 0x00F4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CancelExitFromMenuText;                           		// 0x00F8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                srSkipConfirm;                                    		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                srYes;                                            		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                srNo;                                             		// 0x0104 (0x0004) [0x0000000000000000]              
	int                                                FilmGrainOption_Initial;                          		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                FilmGrainOption_ToSend;                           		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                BrightnessOption_Initial;                         		// 0x0110 (0x0004) [0x0000000000000000]              
	int                                                BrightnessOption_ToSend;                          		// 0x0114 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bSelfPanelClose : 1;                            		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWaitingOnMsgBox : 1;                             		// 0x0118 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      GuiMode;                                          		// 0x011C (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnPanelAdded ( );
	void CloseGui ( );
	void SendTelemetryChanges ( );
	void GetProfileSettingsForOptions ( struct TArray<unsigned char>* lstProfSettings, struct TArray<int>* lstTypes );
	unsigned char GetProfileSettingForOption ( int Type );
	void SetVsyncStatus ( );
	void SetHDRStatus ( );
	void SetOption ( int Type, int Value );
	void SetOptionsOnGUI ( class USFXProfileSettings* Settings );
	void Callback_ResetToDefaults ( unsigned long bAPressed, int context );
	void onExIntResetToDefaults ( struct FString sPackedIDs );
	void Helper_ExtractPackedOptIDs ( struct FString sPackedIDs, struct TArray<int>* lstOptIDs );
	void Helper_CreateResetConfirmPopup ( class UMassEffectGuiManager* GuiMan, struct FScriptDelegate pInputDelegate );
	void HandleEvent ( unsigned char Command, struct TArray<struct FString>* lstArguments );
	void SetOnCloseCallback ( struct FScriptDelegate fn_OnCloseDelegate );
	void OnCloseCallback ( );
};

// Class SFXGame.BioSFHandler_PCOptions
// 0x007F (0x019C - 0x011D)
class UBioSFHandler_PCOptions : public UBioSFHandler_Options
{
public:
	struct TArray<struct FKeyBind>                     KeyBinds;                                         		// 0x0120 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FGuiBind>                     AliasMap;                                         		// 0x0130 (0x0010) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FNonBindableKeyDefinition>    UnBindableKeys;                                   		// 0x0140 (0x0010) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FString>                      MonitorList;                                      		// 0x0150 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       IncomingKey;                                      		// 0x0160 (0x0008) [0x0000000000000000]              
	class UBioSFHandler_MessageBox*                    ConfirmDisplayMessageBox;                         		// 0x0168 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                KeyHasBeenBound;                                  		// 0x0170 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                KeyHasBeenUnbound;                                		// 0x0174 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                ResetPCBindingsText;                              		// 0x0178 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                ConfirmResetPCBindingsText;                       		// 0x017C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CancelResetPCBindingsText;                        		// 0x0180 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CannotBindConstantKey;                            		// 0x0184 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                DisplayChangeText;                                		// 0x0188 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                RebindWarning;                                    		// 0x018C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                OldAliasIndex;                                    		// 0x0190 (0x0004) [0x0000000000000000]              
	int                                                CaptureBindIndex;                                 		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CaptureBindNumber;                                		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BuildMonitorList ( );
	void SetSelectedMonitor ( int monitorIndex );
	int GetSelectedMonitorIndex ( );
	void ConfirmKeybindOverwrite ( unsigned long bAPressed, int nContext );
	void SetOption ( int Type, int Value );
	void SetOptionsOnGUI ( class USFXProfileSettings* Settings );
	bool WillChangeDisplay ( );
	void RevertSettings ( );
	void ApplySettings ( );
	void ResetPCToDefaults ( struct TArray<int>* lstOptsToReset );
	void InitSystemSettingsCache ( );
	void InitPCBindings ( unsigned long Defaults );
	void ApplyPCBindings ( );
	void RefreshGUIBindings ( );
	bool ProcessInput ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void CaptureNewBinding ( int BindIndex, int BindNumber );
	void BuildControlBindingList ( );
	void Callback_ResetPCToDefaults ( unsigned long bAPressed, int context );
	void Helper_DoPCBindingReset ( );
	void Callback_ResetPCBindings ( unsigned long bAPressed, int context );
	void onExIntResetToDefaults ( struct FString sPackedIDs );
	void Callback_ConfirmDisplayChange ( unsigned long bAPressed, int context );
	void Callback_DisplayChangeTimeout ( );
	void ConfirmDisplayChange ( );
	void SaveAndExit ( );
	void HandleEvent ( unsigned char Command, struct TArray<struct FString>* lstArguments );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
};

// Class SFXGame.BioSFHandler_ReplayCharacterSelect
// 0x0013 (0x00AC - 0x0099)
class UBioSFHandler_ReplayCharacterSelect : public UBioSFHandler
{
public:
	struct FString                                     m_ActiveCharId;                                   		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSFHandler_Splash
// 0x001B (0x00B4 - 0x0099)
class UBioSFHandler_Splash : public UBioSFHandler
{
public:
	float                                              fLegalTimeout;                                    		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              fShowLegalTime;                                   		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srNoLoginStart;                                   		// 0x00A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srConfirmNoLoginStart;                            		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srCancelNoLoginStart;                             		// 0x00AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bPressedStart : 1;                                		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnPanelAdded ( );
	void StartTimeout ( unsigned long bShowLegal );
	void Update ( float fDeltaT );
	void Initialize ( );
	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* lstArguments );
	void eventAdvanceScreen ( );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void Callback_NoLoginStart ( unsigned long bAPressed, int context );
	void DisplayNoProfileConfirmation ( );
	void Callback_LoginComplete ( unsigned long bIsOpening );
	void CheckLogin ( );
};

// Class SFXGame.BioSFHandler_PCSplash
// 0x0000 (0x00B4 - 0x00B4)
class UBioSFHandler_PCSplash : public UBioSFHandler_Splash
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUpdate ( float fDeltaT );
	void eventAdvanceScreen ( );
	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* lstArguments );
	void OnPanelRemoved ( );
};

// Class SFXGame.BioSFHandler_Tutorial
// 0x0017 (0x00B0 - 0x0099)
class UBioSFHandler_Tutorial : public UBioSFHandler
{
public:
	struct FScriptDelegate                             __CompletionCallback__Delegate;                   		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bGameWasPaused : 1;                             		// 0x00AC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bInputModeCached : 1;                           		// 0x00AC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* lstArguments );
	void CompletionCallback ( );
};

// Class SFXGame.BioSFHandler_XBoxMessageBox
// 0x000B (0x00A4 - 0x0099)
class UBioSFHandler_XBoxMessageBox : public UBioSFHandler
{
public:
	int                                                nSelectedButton;                                  		// 0x009C (0x0004) [0x0000000000000000]              
	unsigned long                                      bMessageBoxVisible : 1;                           		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DisplayMessageBox ( int srTitle, int srMessage, unsigned char nIcon, int nDefaultButton, struct TArray<int>* srButtons );
};

// Class SFXGame.BioSkillGame_Base_Handler
// 0x006F (0x0108 - 0x0099)
class UBioSkillGame_Base_Handler : public UBioSFHandler
{
public:
	struct FString                                     m_sBackgroundMusic;                               		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSuccessCallback__Delegate;                    		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFailureCallback__Delegate;                    		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCancelCallback__Delegate;                     		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UObject*                                     m_oDependent;                                     		// 0x00DC (0x0008) [0x0000000000000000]              
	class ABioPawn*                                    m_oUsingPawn;                                     		// 0x00E4 (0x0008) [0x0000000000000000]              
	struct FName                                       m_sTecPlotStateName;                              		// 0x00EC (0x0008) [0x0000000000000000]              
	float                                              m_fTecTimeMultiplier;                             		// 0x00F4 (0x0004) [0x0000000000000000]              
	int                                                m_nStartingResource;                              		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                m_nPhase2Resource;                                		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                m_nPhase2Time;                                    		// 0x0100 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bRewardOnTimeFail : 1;                          		// 0x0104 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bSuccessfulEndGame : 1;                         		// 0x0104 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bCanceled : 1;                                  		// 0x0104 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Cancel ( );
	void ExIntGameOver ( unsigned long bGameWon, int nRemainingResource );
	void ExIntStartGame ( );
	void ExIntInitGame ( );
	void ExIntCancelGame ( );
	void ExIntStartLoopingSound ( );
	void ExIntStopLoopingSound ( );
	void ExIntInterruptGame ( );
	void OnCancelCallback ( int n_TimeTaken );
	void OnFailureCallback ( int n_TimeTaken );
	void OnSuccessCallback ( int n_TimeTaken );
};

// Class SFXGame.BioSkillGame_Bypass_Handler
// 0x0024 (0x012C - 0x0108)
class UBioSkillGame_Bypass_Handler : public UBioSkillGame_Base_Handler
{
public:
	struct FVector                                     m_vRightInput;                                    		// 0x0108 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vLeftInput;                                     		// 0x0114 (0x000C) [0x0000000000000000]              
	int                                                m_nNumToSpawn;                                    		// 0x0120 (0x0004) [0x0000000000000000]              
	int                                                m_nPCBurnDown;                                    		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                m_nConsoleBurnDown;                               		// 0x0128 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnPanelAdded ( );
	void Update ( float fDeltaT );
	void HandleInputEvent ( unsigned char Event, float fValue );
};

// Class SFXGame.BioSkillGame_Decryption_Handler
// 0x000C (0x0114 - 0x0108)
class UBioSkillGame_Decryption_Handler : public UBioSkillGame_Base_Handler
{
public:
	int                                                m_nPercentDanger;                                 		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                m_nPercentGood;                                   		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              m_fSpeed;                                         		// 0x0110 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnPanelAdded ( );
	void Update ( float fDeltaT );
	void onSelectPressed ( );
	void onRightPressed ( );
	void onLeftPressed ( );
	void onUpPressed ( );
	void onDownPressed ( );
};

// Class SFXGame.MassEffectGuiManager
// 0x00B2 (0x01D5 - 0x0123)
class UMassEffectGuiManager : public UBioSFManager
{
public:
	struct TArray<struct FBioMessageBoxData>           m_aMessageBoxQueue;                               		// 0x0124 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXSFHandler_HUD*                           m_oSFHudHandler;                                  		// 0x0134 (0x0008) [0x0000000000000000]              
	class USFXSFHandler_Reticle*                       m_oSFReticleHandler;                              		// 0x013C (0x0008) [0x0000000000000000]              
	class USFXSFHandler_PowerWheel*                    m_oSFPowerWheelHandler;                           		// 0x0144 (0x0008) [0x0000000000000000]              
	class UBioSFHandler_DesignerUI*                    m_oDUIHandler;                                    		// 0x014C (0x0008) [0x0000000000000000]              
	class UBioSFHandler_BrowserWheel*                  m_oBWHandler;                                     		// 0x0154 (0x0008) [0x0000000000000000]              
	class USFXSaveLoadWidgetProxy*                     m_oSavingLoadingDisplayProxy;                     		// 0x015C (0x0008) [0x0000000000000000]              
	class ABioWorldInfo*                               oBioWorldInfo;                                    		// 0x0164 (0x0008) [0x0000000000000000]              
	class UBioSFHandler_Conversation*                  m_oConversationHandler;                           		// 0x016C (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmCurrentTutorial;                              		// 0x0174 (0x0008) [0x0000000000000000]              
	class UBioSFHandler_Specialization*                oSpecializationHandler;                           		// 0x017C (0x0008) [0x0000000000000000]              
	class UBioSFHandler_BlackScreen*                   m_oBlackScreenHandler;                            		// 0x0184 (0x0008) [0x0000000000000000]              
	class UBioSFResources*                             m_oSFResources;                                   		// 0x018C (0x0008) [0x0000000000000000]              
	class UWwiseAudioComponent*                        m_wwiseComponent;                                 		// 0x0194 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioSFHandler_MessageBox*                    m_oHintMsgBox;                                    		// 0x019C (0x0008) [0x0000000000000000]              
	class UBioSFHandler_MessageBox*                    m_oCachedHint;                                    		// 0x01A4 (0x0008) [0x0000000000000000]              
	class UBioSFHandler_MessageBox*                    m_oMessageBox;                                    		// 0x01AC (0x0008) [0x0000000000000000]              
	class UGFxMovie*                                   m_oCachedHintMovie;                               		// 0x01B4 (0x0008) [0x0000000000000000]              
	class APlayerController*                           Player;                                           		// 0x01BC (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class USFXAreaMapData*                             m_CurrentAreaMap;                                 		// 0x01C4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fHintDisplayTimeRemaining;                      		// 0x01CC (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bSFHudCached : 1;                               		// 0x01D0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bGameWasPaused : 1;                             		// 0x01D0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCoverWidgetDisplayed : 1;                        		// 0x01D0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bClimbWidgetDisplayed : 1;                        		// 0x01D0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bMantleWidgetDisplayed : 1;                       		// 0x01D0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bGUIRequestedMouseVisiblityState : 1;             		// 0x01D0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned char                                      m_eLastBrowserWheelSubPage;                       		// 0x01D4 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateProfileSettings ( class USFXProfileSettings* oSettings );
	bool IsTriggerShoulderSwapped ( );
	bool IsTriggerSouthpaw ( );
	bool IsStickSouthpaw ( );
	bool IsEnterMenuButtonAssignmentSwapped ( );
	void UpdateMouseVisibilityState ( );
	bool SetMouseVisibility ( class UObject* pObject, unsigned long bShow );
	void DestroyPCRStore ( );
	class USFXSFHandler_PRCShop* CreatePCRStore ( );
	void HidePhotoMode ( );
	class UBioSFHandler* ShowPhotoMode ( );
	bool HideAreaMap ( );
	bool ShowAreaMap ( );
	class USFXAreaMapData* GetAreaMapData ( );
	void SetAreaMapData ( class USFXAreaMapData* oMapData );
	class ABioPlayerController* GetBioPlayerController ( );
	class APlayerController* GetPlayerController ( );
	void GUICMD ( struct FName nmPanelTag, struct FString sCmd, struct FString sArg1, struct FString sArg2, struct FString* sResultMessage );
	void GUICMDStringToCategories ( struct FString sArg1, struct FString sArg2, struct TArray<unsigned char>* categories );
	void ForceSquadCommandFeedback ( unsigned char Command, int MemberIdx, unsigned long bCommandSuccess );
	class USFXSFHandler_AreaMap* GetAreaMapHandler ( );
	class UBioSkillGame_Decryption_Handler* GetDecryptionHandler ( );
	class UBioSFHandler_MainMenu* GetMainMenuHandler ( );
	void HidePersonalizationGUI ( );
	void ShowPersonalizationGUI ( );
	void SetDistanceOnSniperOverlay ( int nDistance );
	void HideSniperOverlay ( );
	void ShowSniperOverlay ( );
	class UBioSFHandler_Conversation* GetConversationHandler ( );
	void GameSessionEnded ( );
	bool StopSound ( struct FName nmSound );
	bool PlaySound ( struct FName nmSound );
	class UBioSFHandler_ChoiceGUI* CreateChoiceGUI ( struct FName nmTag );
	class UBioSFHandler_MessageBox* CreateMessageBox ( );
	class UBioSFHandler_MessageBox* CreateHintBox ( );
	void UpdateHint ( float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox );
	void eventDestroyNetworkGUI ( struct FName HandlerId );
	class USFXSFHandler_EANetworking* eventCreateNetworkGUI ( struct FName HandlerId );
	void eventRestoreHint ( );
	void eventHideHint ( );
	void eventCancelHint ( );
	void eventShowHint ( int srDefaultText, int srPCText, float fDisplayTime, int nIcon, unsigned char ePosition, unsigned long bCached, unsigned long bForceVisible );
	void eventShowPlatformSpecificHint ( int srDefaultText, int srPS3Text, int srPCText, float fDisplayTime, unsigned char ePosition, unsigned long bCached, unsigned long bForceVisible );
	class UBioSFHandler_BrowserWheel* GetBrowserHandler ( );
	class UBioSFHandler_DesignerUI* GetDUIHandler ( );
	class USFXSFHandler_HUD* GetCachedHudHandler ( );
	void SetWheelState ( unsigned char nPage, unsigned char nState );
	void eventHideClimbMantleWidget ( );
	void eventShowClimbMantleWidget ( unsigned long bMantle );
	void eventHideCoverWidget ( );
	void eventShowCoverWidget ( );
	void OnPlayerDeath ( );
	void eventHideSkillGameBypass ( );
	class UBioSkillGame_Bypass_Handler* eventShowSkillGameBypass ( );
	void eventHideSkillGameDecryption ( );
	class UBioSkillGame_Decryption_Handler* eventShowSkillGameDecryption ( );
	void eventInterruptActiveSkillGame ( );
	void eventHideSkillGame ( );
	bool BlackScreenFadeFinished ( );
	void HideBlackScreen ( unsigned long bWithFade );
	void ShowBlackScreen ( unsigned long bWithFade );
	void HideGameOverGui ( );
	void ShowGameOverGui ( int srGameOverString );
	void HidePartySelect ( );
	class UBioSFHandler_NewCharacter* eventLaunchCharacterCreation ( struct TArray<class UAnimSet*> a_AnimSets, struct TArray<class UClass*> a_CharacterClasses, class USFXMorphFaceFrontEndDataSource* a_MaleDataSource, class USFXMorphFaceFrontEndDataSource* a_FemaleDataSource );
	class UBioSFHandler_NewCharacter* PlayCharacterCreation ( );
	class UBioSFHandler_Credits* PlayCredits ( );
	class UBioSFHandler_PartySelection* ShowPartySelect ( struct FName nmForcedHenchman );
	void eventHideSpecializationGui ( );
	bool ShowSpecializationGUI ( class ABioPawn* oPawn, struct FName nmPowerName );
	void eventHideGuiByTag ( struct FName sTag );
	void HideAchievementGui ( );
	void ShowAchievementGui ( );
	class USFXSaveLoadWidgetProxy* eventGetSaveLoadWidget ( );
	void eventHideBrowserWheel ( class UBioSFPanel* oCurrentPanel, unsigned long bUnpauseSound );
	void eventReturnToBrowserWheel ( class UBioSFPanel* oCurrentPanel, unsigned long bExitImmediately );
	void eventShowBrowserWheel ( unsigned long bPauseSound );
	void CancelLeaderActive ( );
	void OnAllowCameraRotation ( unsigned long i_bValue );
	void SetPowerWheel ( class USFXSFHandler_PowerWheel* oNewPowerWheel );
	void ReleaseHudCache ( );
	void eventRecreateHudPanel ( );
	void eventHideConversationGui ( );
	void eventShowConversationGui ( unsigned long bIsSubtitle );
	void HackReloadMainMenu ( );
	class UBioSFHandler_MainMenu* eventShowMainMenu ( unsigned char eEntry );
	bool eventIsInSplashScreen ( );
	void ClearAllNonModalPanels ( );
	void SetupBackground ( );
	void Update ( float fDeltaT );
	void QueuedMessageBoxCallback ( unsigned long bAPressed, int nContext );
	void HideQueuedMessageBoxes ( );
	void DisplayQueuedMessageBoxes ( );
	void RemoveNamedMessageBox ( struct FName nmName );
	void QueueNamedMessageBoxEx ( struct FName nmName, int nPriority, struct FString sMessage, struct FScriptDelegate pCallback, int nContext, struct FBioMessageBoxOptionalParams* stParams );
	void QueueNamedMessageBox ( struct FName nmName, int nPriority, int srMessage, struct FScriptDelegate pCallback, int nContext, struct FBioMessageBoxOptionalParams* stParams );
};

// Class SFXGame.SFXGameChoiceGUIData
// 0x002D (0x008D - 0x0060)
class USFXGameChoiceGUIData : public UObject
{
public:
	struct TArray<struct FSFXChoiceEntry>              lstChoices;                                       		// 0x0060 (0x0010) [0x0000000000424001]              ( CPF_Edit | CPF_Config | CPF_EditConst | CPF_NeedCtorLink )
	int                                                m_srTitle;                                        		// 0x0070 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                m_srSubTitle;                                     		// 0x0074 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                m_srAText;                                        		// 0x0078 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                m_srBText;                                        		// 0x007C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                m_srOptionalPaneTitleText;                        		// 0x0080 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                m_srOptionalPaneItemValuePrefixText;              		// 0x0084 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      m_ShowOptionalPane : 1;                           		// 0x0088 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned char                                      m_eOptionalPaneResourceType;                      		// 0x008C (0x0001) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RemoveTokenMapping ( int nTokenID, struct FSFXChoiceEntry* Data );
	void SetTokenMapping ( int nTokenID, struct FString sValue, struct FSFXChoiceEntry* Data );
	void ClearChoiceList ( );
	bool AddChoice ( struct FSFXChoiceEntry Params );
	void SetupOptionalPane ( unsigned long bShowOptionalPane, int srOptionalPaneTitleText, int srOptionalPaneItemValuePrefixText, int srOptionalPaneValuePrefixText );
	void SetDisplayText ( int srTitle, int srSubTitle, int srAText, int srBText );
};

// Class SFXGame.SFXGameChoiceGUIData_PRCShop
// 0x0013 (0x00A0 - 0x008D)
class USFXGameChoiceGUIData_PRCShop : public USFXGameChoiceGUIData
{
public:
	struct TArray<struct FSFXChoiceEntryNoStrRef>      lstChoicesNoStrRef;                               		// 0x0090 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void AddChoiceNoStrRef ( struct FSFXChoiceEntryNoStrRef oChoice );
};

// Class SFXGame.SFXSaveLoadWidgetProxy
// 0x0010 (0x0070 - 0x0060)
class USFXSaveLoadWidgetProxy : public UObject
{
public:
	int                                                LoadingMessage;                                   		// 0x0060 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                SavingMessage;                                    		// 0x0064 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                DeletingMessage;                                  		// 0x0068 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bShowMessage : 1;                               		// 0x006C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void HideLoadingMessage ( unsigned long bDoTransition );
	void ShowLoadingMessage ( unsigned long bDoTransition, int srMessage );
	void ShowDeletingMessage ( unsigned long bDoTransition, int srMessage );
	void HideSavingMessage ( unsigned long bDoTransition );
	void ShowSavingMessage ( unsigned long bDoTransition, int srMessage );
};

// Class SFXGame.SFXSF_ReticleBase
// 0x0040 (0x00A0 - 0x0060)
class USFXSF_ReticleBase : public UObject
{
public:
	struct FString                                     m_sSFPath;                                        		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sFlashLinkageIdentifier;                        		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXSFHandler_Reticle*                       m_pHandler;                                       		// 0x0080 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_pTarget;                                        		// 0x0088 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_vHUDLocation;                                   		// 0x0090 (0x0008) [0x0000000000000000]              
	int                                                m_nFlashLayerModifier;                            		// 0x0098 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bFirstUpdate : 1;                               		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bHasInTransition : 1;                           		// 0x009C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bHasOutTransition : 1;                          		// 0x009C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bVisible : 1;                                   		// 0x009C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bInTransitionOut : 1;                           		// 0x009C (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUpdateReticleDisplay ( );
	bool eventIsUpdateRequired ( float fDeltaT );
	void eventPlayVisibleTransition ( unsigned long bVisible );
	void eventClearReticle ( unsigned long bTransition );
	void eventSetVisible ( unsigned long bVisible, unsigned long bTransition );
};

// Class SFXGame.SFXSF_ReticleCombatObject
// 0x0000 (0x00A0 - 0x00A0)
class USFXSF_ReticleCombatObject : public USFXSF_ReticleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSF_ReticleCombatTarget
// 0x0028 (0x00C8 - 0x00A0)
class USFXSF_ReticleCombatTarget : public USFXSF_ReticleBase
{
public:
	struct FVector2D                                   m_vExtents;                                       		// 0x00A0 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_vExtentShrinkDelta;                             		// 0x00A8 (0x0008) [0x0000000000000000]              
	float                                              m_fMinTargetSelectionWidth;                       		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              m_fMinTargetSelectionHeight;                      		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              m_fReticleShrinkTime;                             		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              m_fFlourishLifeTime;                              		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              m_fSelectionBoxScalingFactor;                     		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bPreviouslyInitialized : 1;                     		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDoingActionFlourish : 1;                       		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventClearReticle ( unsigned long bTransition );
};

// Class SFXGame.SFXSFHandler_AreaMap
// 0x000F (0x00A8 - 0x0099)
class USFXSFHandler_AreaMap : public UBioSFHandler
{
public:
	class UDOFAndBloomEffect*                          m_DOFEffect;                                      		// 0x009C (0x0008) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      m_bFromBrowserWheel : 1;                          		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RemoveDOFEffect ( );
	void AddDOFEffect ( class UDOFAndBloomEffect* i_DOFEffect );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void Close ( );
	void BeginClose ( );
	void ProcessPlayer ( class USFXAreaMapData* oMapData );
	void SetMap ( class USFXAreaMapData* oMapData );
	bool Initialize ( unsigned long bFromBrowserWheel );
	void PauseMenuAdditionalProcessing ( );
	void OnPanelAdded ( );
};

// Class SFXGame.SFXSFHandler_EANetworking
// 0x00F3 (0x018C - 0x0099)
class USFXSFHandler_EANetworking : public UBioSFHandler
{
public:
	struct FScriptDelegate                             __GuiCallback_SubmitIntroPage__Delegate;          		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitNucleusLogin__Delegate;       		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitMessageBox__Delegate;         		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitCreateNucleusAccount__Delegate;		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitTermsOfService__Delegate;     		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitNucleusWelcomeMessage__Delegate;		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitCerberusIntro__Delegate;      		// 0x00FC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitRedeemCode__Delegate;         		// 0x010C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitCerberusWelcomeMessage__Delegate;		// 0x011C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitCreateNucleusAccountEx__Delegate;		// 0x012C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitEmailPasswordMismatch__Delegate;		// 0x013C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitAccountDemographics__Delegate;		// 0x014C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GuiCallback_SubmitParentEmail__Delegate;        		// 0x015C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioSFHandler_Keyboard*                      m_oKeyboard;                                      		// 0x016C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_srKeyboardEmailTitle;                           		// 0x0174 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srKeyboardPasswordTitle;                        		// 0x0178 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srCerberusCodeTitle;                            		// 0x017C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nMaxEmailLength;                                		// 0x0180 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nMaxPasswordLength;                             		// 0x0184 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nMaxCerberusCodeLength;                         		// 0x0188 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Update ( float fDeltaT );
	void EnterCode ( struct FString sDefault );
	void EnterPassword ( struct FString sDefault );
	void EnterEmail ( struct FString sDefault );
	void eventOnPanelRemoved ( );
	void eventOnPanelAdded ( );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void onExternalInitialize ( );
	void ClearDelegates ( );
	void SubmitCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, unsigned long bSubmit );
	void SubmitCerberusWelcomeMessage ( );
	void SubmitParentEmail ( unsigned long bContinue, struct FString ParentEmail );
	void SubmitAccountDemographics ( unsigned long bContinue, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode );
	void SubmitRedeemCode ( unsigned long bContinue, struct FString i_sCode );
	void SubmitCerberusIntro ( unsigned char eReturnCode );
	void SubmitNucleusWelcomeMessage ( );
	void SubmitTermsOfService ( unsigned long bAccept );
	void SubmitCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bSubmit );
	void SubmitEmailPasswordMismatch ( struct FString Email, struct FString Password, unsigned char eReturnCode );
	void SubmitMessageBox ( unsigned char eReturnEnum );
	void SubmitNucleusLogin ( struct FString Email, struct FString Password, unsigned char eReturnCode );
	void SubmitIntroPage ( unsigned long bContinue );
	void GuiCallback_SubmitParentEmail ( unsigned long bContinue, struct FString ParentEmail );
	void GuiCallback_SubmitAccountDemographics ( unsigned long bContinue, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode );
	void GuiCallback_SubmitEmailPasswordMismatch ( struct FString Email, struct FString Password, unsigned char eReturnCode );
	void GuiCallback_SubmitCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, unsigned long bSubmit );
	void GuiCallback_SubmitCerberusWelcomeMessage ( );
	void GuiCallback_SubmitRedeemCode ( unsigned long bContinue, struct FString i_sCode );
	void GuiCallback_SubmitCerberusIntro ( unsigned char eReturnCode );
	void GuiCallback_SubmitNucleusWelcomeMessage ( );
	void GuiCallback_SubmitTermsOfService ( unsigned long bAccept );
	void GuiCallback_SubmitCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bSubmit );
	void GuiCallback_SubmitMessageBox ( unsigned char eReturnEnum );
	void GuiCallback_SubmitNucleusLogin ( struct FString Email, struct FString Password, unsigned char eReturnCode );
	void GuiCallback_SubmitIntroPage ( unsigned long bContinue );
	void ShowParentEmail ( );
	void ShowAccountDemographics ( struct TArray<struct FString> m_CountryCodeList, struct TArray<struct FString> m_CountryDisplayList );
	void ShowEmailPasswordMismatch ( struct FString Email, struct FString Password );
	void ShowCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, struct TArray<struct FString> m_CountryCodeList, struct TArray<struct FString> m_CountryDisplayList );
	void ShowCerberusWelcomeMessage ( );
	void ShowRedeemCode ( );
	void ShowCerberusIntro ( );
	void ShowNucleusWelcomeMessage ( );
	void ShowTermsOfService ( struct FString i_sTermsOfService, unsigned long bTOSChanged );
	void ShowCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bUnderage );
	void ShowMessageBox ( struct FString sTitle, struct FString sMessage, struct FString sButton1Text, struct FString sButton2Text, struct FString sButton3Text );
	void ShowNucleusLogin ( struct FString Email, struct FString Password, int eScreenState );
	void ShowIntroPage ( );
};

// Class SFXGame.SFXSFHandler_HUD
// 0x04E7 (0x0580 - 0x0099)
class USFXSFHandler_HUD : public UBioSFHandler
{
public:
	struct FSFXHUDSquadMemberInfo                      m_oShepardInfo;                                   		// 0x009C (0x00B4) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXHUDSquadMemberInfo                      m_oHench1Info;                                    		// 0x0150 (0x00B4) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXHUDSquadMemberInfo                      m_oHench2Info;                                    		// 0x0204 (0x00B4) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sStatusText;                                    		// 0x02B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FSFXHudDmgIndicatorPaths>     m_aDamageIndicatorPaths;                          		// 0x02C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<float>                               m_aDamageIndicatorAlphas;                         		// 0x02D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_nCurrentWeaponResource;                         		// 0x02E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sTeamStatusStartFrame;                          		// 0x02F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sWeaponIconPath;                                		// 0x0308 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sWeaponAmmoPath;                                		// 0x0318 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sWeaponClipAmmoPath;                            		// 0x0328 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sTargetNamePath;                                		// 0x0338 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sTargetStatusPath;                              		// 0x0348 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sButtonAPath;                                   		// 0x0358 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sTargetBackgroundPath;                          		// 0x0368 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sHealthBarPath;                                 		// 0x0378 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sArmourBarPath;                                 		// 0x0388 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sBioticBarPath;                                 		// 0x0398 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sShieldBarPath;                                 		// 0x03A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sResistBarOutlinePath;                          		// 0x03B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_smcNotificationPath;                            		// 0x03C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sCenterStatusPath;                              		// 0x03D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sOverheatIndicatorPath;                         		// 0x03E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sOverheatIndicatorTextPath;                     		// 0x03F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sOverheatIndicatorTextFieldPath;                		// 0x0408 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sPlayerPowerPath1;                              		// 0x0418 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sPlayerPowerPath2;                              		// 0x0428 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sShields;                                       		// 0x0438 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sArmour;                                        		// 0x0448 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sBarrier;                                       		// 0x0458 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sHealth;                                        		// 0x0468 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sOverheat;                                      		// 0x0478 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnNotificationCompleted__Delegate;              		// 0x0488 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXHUDResistances                          m_CurrentResistances;                             		// 0x0498 (0x0014) [0x0000000000000000]              
	struct FSFXHUDResistances                          m_ResistanceBarDisplayValues;                     		// 0x04AC (0x0014) [0x0000000000000000]              
	class AActor*                                      m_pCurrentTarget;                                 		// 0x04C0 (0x0008) [0x0000000000000000]              
	class ABioPlayerController*                        m_pPlayerController;                              		// 0x04C8 (0x0008) [0x0000000000000000]              
	class ABioPlayerSquad*                             m_pPlayerSquad;                                   		// 0x04D0 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_pCurrentDisplayTarget;                          		// 0x04D8 (0x0008) [0x0000000000000000]              
	int                                                m_nCurrentBarCount;                               		// 0x04E0 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentBarBackgroundX;                         		// 0x04E4 (0x0004) [0x0000000000000000]              
	float                                              m_fEffectivelyZero;                               		// 0x04E8 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentWeaponIcon;                             		// 0x04EC (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentWeaponSpareAmmo;                        		// 0x04F0 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentClipAmmo;                               		// 0x04F4 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeSinceLastWeaponUpdate;                     		// 0x04F8 (0x0004) [0x0000000000000000]              
	float                                              m_fSFWidth;                                       		// 0x04FC (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentOverheatValue;                          		// 0x0500 (0x0004) [0x0000000000000000]              
	float                                              m_fHealthBarCenterY;                              		// 0x0504 (0x0004) [0x0000000000000000]              
	float                                              m_fArmourBarCenterY;                              		// 0x0508 (0x0004) [0x0000000000000000]              
	float                                              m_fBioticBarCenterY;                              		// 0x050C (0x0004) [0x0000000000000000]              
	float                                              m_fShieldBarCenterY;                              		// 0x0510 (0x0004) [0x0000000000000000]              
	float                                              m_fStatusInitialY;                                		// 0x0514 (0x0004) [0x0000000000000000]              
	float                                              m_fStatusTextHeight;                              		// 0x0518 (0x0004) [0x0000000000000000]              
	float                                              m_fButtonAInitialY;                               		// 0x051C (0x0004) [0x0000000000000000]              
	float                                              m_fButtonAHeight;                                 		// 0x0520 (0x0004) [0x0000000000000000]              
	float                                              m_fSuperRegenThreshold;                           		// 0x0524 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fHealthShieldUpdateDelta;                       		// 0x0528 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fDamageIndicatorAlphaUpdateDelta;               		// 0x052C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fLowHealthWarning;                              		// 0x0530 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fWeaponUpdateInterval;                          		// 0x0534 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fBarAnimRate;                                   		// 0x0538 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fFullStatFadeTime;                              		// 0x053C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srStatusBarrierText;                            		// 0x0540 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srStatusBleedoutText;                           		// 0x0544 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srStatusHardenedShieldsText;                    		// 0x0548 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srStatusHeavyArmourText;                        		// 0x054C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srStatusMinimalDamageText;                      		// 0x0550 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srStatusSuperRegenText;                         		// 0x0554 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srShields;                                      		// 0x0558 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srArmour;                                       		// 0x055C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srBarrier;                                      		// 0x0560 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srHealth;                                       		// 0x0564 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srOverheat;                                     		// 0x0568 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srAmmoFull;                                     		// 0x056C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fNotificationDisplayTime;                       		// 0x0570 (0x0004) [0x0000000000000000]              
	float                                              m_fNotificationElapsedTime;                       		// 0x0574 (0x0004) [0x0000000000000000]              
	int                                                m_nNotificationFlourishId;                        		// 0x0578 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bInteractive : 1;                               		// 0x057C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bInRange : 1;                                   		// 0x057C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bTargetStatusVisible : 1;                       		// 0x057C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bInSquadCommandMode : 1;                        		// 0x057C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bWeaponVisible : 1;                             		// 0x057C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bWeaponOverheatBarVisible : 1;                  		// 0x057C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bHealthDisplayVisible : 1;                      		// 0x057C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bNotificationVisible : 1;                       		// 0x057C (0x0004) [0x0000000000000000] [0x00000080] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PulseMessage ( );
	void PulseTextMessage ( struct FString sMessage );
	void PulseFullAmmoMessage ( );
	void OnNotificationComplete ( );
	bool eventShouldDisplayWeaponIcon ( );
	void eventUpdateWeaponDisplay ( unsigned long bVisible, class AWeapon* pWeap );
	void eventUpdateResistanceDisplay ( struct FSFXHUDResistances oResistValues );
	void eventUpdateTargetStatusDisplay ( struct FSFXHUDTargetInfo* oTargetInfo );
	void UpdateResistanceBarDisplay ( float fResistPercent, struct FString sBarClipPath );
	void UpdateTargetStatusVisibility ( struct FSFXHUDTargetInfo* oTargetInfo );
	void SetTargetStatus ( struct FString sStatus, unsigned long bInteractive, unsigned long bInRange );
	void SetTargetName ( struct FString sTargetName, unsigned long bHostile );
	void SetOverheat ( float fOverheatPct, unsigned long bForce );
	void SetCenterStatus ( struct FString sText );
	struct FString eventGetStatusText ( class ABioPawn* pTarget, int nStatusFlags );
	int eventGetTargetStatusFlags ( class AActor* pTarget );
	void eventGetTargetHealthAndShields ( class AActor* pTarget, float* fHealthPct, float* fShieldsPct );
	void eventGetResistances ( class AActor* pTarget, struct FSFXHUDResistances* oResistances );
	void eventUpdateCachedPositionData ( );
	void eventInitDisplay ( );
	void eventOnAspectRatioChanged ( );
	void GameSessionEnded ( );
	void CleanupReferences ( );
	void eventOnPanelRemoved ( );
	void OnNotificationOpenAnimComplete ( );
	void ClearNotification ( );
	void ShowNotification ( float nDisplayTime, int nNumRemainingNotifications, int nPriority, struct FString sTitle, struct FString sSubtitle, struct FString sBody, class UTexture* oImage, struct FName nmAdditonalSound, int nFlourishID );
	void OnNotificationCompleted ( );
};

// Class SFXGame.SFXSFHandler_Personalization
// 0x0093 (0x012C - 0x0099)
class USFXSFHandler_Personalization : public UBioSFHandler
{
public:
	struct FScriptDelegate                             __ExternalCallback_OnComplete__Delegate;          		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ABioWorldInfo*                               m_WorldInfo;                                      		// 0x00AC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ASFXPawn_Player*                             m_oUIWorldPawn;                                   		// 0x00B4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ASFXPawn_Player*                             m_oPlayerPawn;                                    		// 0x00BC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nRotating;                                      		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              RotationDegreesPerSecond;                         		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TypeOptionTitle;                                  		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                HelmetOptionTitle;                                		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TorsoOptionTitle;                                 		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ShoulderOptionTitle;                              		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ArmOptionTitle;                                   		// 0x00DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                LegOptionTitle;                                   		// 0x00E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                SpecOptionTitle;                                  		// 0x00E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                Tint1OptionTitle;                                 		// 0x00E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                Tint2OptionTitle;                                 		// 0x00EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                PatternOptionTitle;                               		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                PatternColorOptionTitle;                          		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CasualOptionTitle;                                		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CasualID;                                         		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                FullBodyID;                                       		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                TorsoID;                                          		// 0x0104 (0x0004) [0x0000000000000000]              
	int                                                ShoulderID;                                       		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                ArmID;                                            		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                LegID;                                            		// 0x0110 (0x0004) [0x0000000000000000]              
	int                                                Tint1ID;                                          		// 0x0114 (0x0004) [0x0000000000000000]              
	int                                                Tint2ID;                                          		// 0x0118 (0x0004) [0x0000000000000000]              
	int                                                PatternID;                                        		// 0x011C (0x0004) [0x0000000000000000]              
	int                                                PatternColorID;                                   		// 0x0120 (0x0004) [0x0000000000000000]              
	int                                                HelmetID;                                         		// 0x0124 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bStopScroll : 1;                                		// 0x0128 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void onExIntDetailItemChange ( int nOptIndex, int nOptionIndex );
	int GetIdxByAppearanceID ( int Id, struct TArray<struct FCustomizableElement>* AppearanceData );
	int GetAppearanceIDByIdx ( int Index, struct TArray<struct FCustomizableElement>* AppearanceData );
	void onExIntSelectCategory ( int nCategory );
	void onExIntExit ( );
	void onExIntDoInitialize ( );
	void CancelChanges ( );
	void ApplyChanges ( );
	void AddDetailEntry ( int nEntryIndex, int nTitleText, int nIndex, struct TArray<struct FCustomizableElement>* Elements );
	bool IsAvailable ( struct FCustomizableElement Element );
	struct FString GetCleanString ( int nStringRef );
	class ASFXPawn_Player* GetUIWorldPlayerPawn ( );
	void eventUpdate ( float fDeltaT );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void InitializeUIWorld ( );
	void OnPanelRemoved ( );
	void eventOnPanelAdded ( );
	void ClearDelegates ( );
	void SetExternalCallback_OnComplete ( struct FScriptDelegate pDelegate );
	void ExternalCallback_OnComplete ( );
};

// Class SFXGame.SFXSFHandler_PhotoMode
// 0x004F (0x00E8 - 0x0099)
class USFXSFHandler_PhotoMode : public UBioSFHandler
{
public:
	struct TArray<struct FPhotoModeOptionPage>         Pages;                                            		// 0x009C (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FPhotoModeSliderOption>       SliderOptions;                                    		// 0x00AC (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FPhotoModeRangeSliderOption>  RangeSliderOptions;                               		// 0x00BC (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FPhotoModeTextSliderOption>   TextSliderOptions;                                		// 0x00CC (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	class USFXGameModePhoto*                           PhotoMode;                                        		// 0x00DC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bOptionsHidden : 1;                               		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bInitialized : 1;                                 		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ToggleOptions ( );
	void HandleOptionChanged ( unsigned char OptionId, float Value );
	void SetOption ( unsigned char OptionId, float ValueIdx );
	float GetDefaultFloatOption ( unsigned char OptionId );
	bool GetDefaultBoolOption ( unsigned char OptionId );
	void InitializePhotoMode ( );
	void MovieLoaded ( );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	void HandleButtonRefresh ( unsigned long bUsingGamepad );
	void HandleInputEvent ( unsigned char Event, float fValue );
};

// Class SFXGame.SFXSFHandler_PowerWheel
// 0x0484 (0x051D - 0x0099)
class USFXSFHandler_PowerWheel : public UBioSFHandler
{
public:
	struct FString                                     m_aMappingIconPaths[ 0x9 ];                       		// 0x009C (0x0090) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_aPowerStatePaths[ 0x8 ];                        		// 0x012C (0x0080) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXPowerWheelPawnIndices                   m_oPowerIndices;                                  		// 0x01AC (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXPowerWheelPawnIndices                   m_oWeaponIndices;                                 		// 0x01DC (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXPowerWheelButtonIcon                    m_oMapTextIcon1;                                  		// 0x020C (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXPowerWheelButtonIcon                    m_oMapTextIcon2;                                  		// 0x0220 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FSFXPowerWheelIconPower>      m_aPowerIcons;                                    		// 0x0234 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FSFXPowerWheelIconWeapon>     m_aWeaponIcons;                                   		// 0x0244 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FSFXRadarElementData>         m_aRadarElementData;                              		// 0x0254 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sTitleTextPath;                                 		// 0x0264 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sNameTextPath;                                  		// 0x0274 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sInfoTextPath;                                  		// 0x0284 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sInfoTextBGPath;                                		// 0x0294 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sUseButtonPath;                                 		// 0x02A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sUseTextPath;                                   		// 0x02B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sMapButton1Path;                                		// 0x02C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sMapText1Path;                                  		// 0x02D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sMapButton2Path;                                		// 0x02E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sMapText2Path;                                  		// 0x02F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FString>                      m_aRadarIconFramePaths;                           		// 0x0304 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sShepardBlockerPath;                            		// 0x0314 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sHench1BlockerPath;                             		// 0x0324 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sHench2BlockerPath;                             		// 0x0334 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sRadarPath;                                     		// 0x0344 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sTeam1StatusTextPath;                           		// 0x0354 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sTeam1PowerTextPath;                            		// 0x0364 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sTeam2StatusTextPath;                           		// 0x0374 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sTeam2PowerTextPath;                            		// 0x0384 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sWheelArrowPath;                                		// 0x0394 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sNotSuggestedPrefix;                            		// 0x03A4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sNotSuggestedSuffix;                            		// 0x03B4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sMap1Token;                                     		// 0x03C4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sMap2Token;                                     		// 0x03D4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sMapHench1Token;                                		// 0x03E4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sMapHench2Token;                                		// 0x03F4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                m_aWeaponStateFrames[ 0x4 ];                      		// 0x0404 (0x0010) [0x0000000000000000]              
	struct FVector                                     m_vLStickInput;                                   		// 0x0414 (0x000C) [0x0000000000000000]              
	class ABioPlayerController*                        m_pPlayerController;                              		// 0x0420 (0x0008) [0x0000000000000000]              
	class ABioPlayerSquad*                             m_pPlayerSquad;                                   		// 0x0428 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_vViewportOffsets;                               		// 0x0430 (0x0008) [0x0000000000000000]              
	class ABioPawn*                                    m_pShepardPawn;                                   		// 0x0438 (0x0008) [0x0000000000000000]              
	class ABioPawn*                                    m_pHench1Pawn;                                    		// 0x0440 (0x0008) [0x0000000000000000]              
	class ABioPawn*                                    m_pHench2Pawn;                                    		// 0x0448 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_pCurrentPlayerSelection;                        		// 0x0450 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_vCacheRadarBoundaryTopLeft;                     		// 0x0458 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_vCacheRadarBoundaryBottomRight;                 		// 0x0460 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_vBoundaryDimensions;                            		// 0x0468 (0x0008) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nProcessedSquadPopulation;                      		// 0x0470 (0x0004) [0x0000000000000000]              
	float                                              m_fButtonTextPadding;                             		// 0x0474 (0x0004) [0x0000000000000000]              
	float                                              m_fMovieWidth;                                    		// 0x0478 (0x0004) [0x0000000000000000]              
	float                                              m_fMovieHeight;                                   		// 0x047C (0x0004) [0x0000000000000000]              
	float                                              m_fRemainingRadarPulseTime;                       		// 0x0480 (0x0004) [0x0000000000000000]              
	float                                              m_fInfoTextChangeDelay;                           		// 0x0484 (0x0004) [0x0000000000000000]              
	float                                              m_fRemainingInfoTextChangeDelay;                  		// 0x0488 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeToNextVehicleRadarUpdate;                  		// 0x048C (0x0004) [0x0000000000000000]              
	float                                              m_fTimeToNextObjectiveUpdate;                     		// 0x0490 (0x0004) [0x0000000000000000]              
	float                                              m_fLastProcessedStickAngle;                       		// 0x0494 (0x0004) [0x0000000000000000]              
	float                                              m_fLastStickDeflection;                           		// 0x0498 (0x0004) [0x0000000000000000]              
	float                                              m_fLStickAngleDeltaDeg;                           		// 0x049C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nCurrentPowerIconIndex;                         		// 0x04A0 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentWeaponIconIndex;                        		// 0x04A4 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentSelectedWeapon;                         		// 0x04A8 (0x0004) [0x0000000000000000]              
	float                                              m_fCacheTargetDirection;                          		// 0x04AC (0x0004) [0x0000000000000000]              
	float                                              m_fCacheNorthDirection;                           		// 0x04B0 (0x0004) [0x0000000000000000]              
	float                                              m_fCachePathDirection;                            		// 0x04B4 (0x0004) [0x0000000000000000]              
	float                                              m_fCacheRadarBoundaryRotation;                    		// 0x04B8 (0x0004) [0x0000000000000000]              
	int                                                m_srBlocked;                                      		// 0x04BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srPawnIncapacitated;                            		// 0x04C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srWeaponSwitching;                              		// 0x04C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srWeaponOverheating;                            		// 0x04C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srWeaponReloading;                              		// 0x04CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srDisplayTitle;                                 		// 0x04D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srWeaponWheelDisplayTitle;                      		// 0x04D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srPowerWheelDisplayTitle;                       		// 0x04D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srEquip;                                        		// 0x04DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srUse;                                          		// 0x04E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srMap;                                          		// 0x04E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srOverheated;                                   		// 0x04E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srRecharging;                                   		// 0x04EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srUnavailable;                                  		// 0x04F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srRadarRangeUnits;                              		// 0x04F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srNorthText;                                    		// 0x04F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srObjective;                                    		// 0x04FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRadarDirectionChangeDelta;                     		// 0x0500 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRadarElementLocationChangeDelta;               		// 0x0504 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRadarRadius;                                   		// 0x0508 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fBoundaryShrinkFactor;                          		// 0x050C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fVehicleRadarUpdateInterval;                    		// 0x0510 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRadarObjectiveUpdateInterval;                  		// 0x0514 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bVisible : 1;                                   		// 0x0518 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bRadarVisible : 1;                              		// 0x0518 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bRadarOn : 1;                                   		// 0x0518 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bInOutTransition : 1;                           		// 0x0518 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bCanMapPlayerPowers : 1;                        		// 0x0518 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bHavePathAssistGoal : 1;                        		// 0x0518 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bPingPathAssistArrow : 1;                       		// 0x0518 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bInfoTextBackgroundVisible : 1;                 		// 0x0518 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bDesiredInfoTextBackgroundVisibility : 1;       		// 0x0518 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bWheelArrowVisible : 1;                         		// 0x0518 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      m_bObjectiveRadarOn : 1;                          		// 0x0518 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bPulsingRadar : 1;                              		// 0x0518 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      m_bSquadChanged : 1;                              		// 0x0518 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned char                                      m_ePowerWheelMode;                                		// 0x051C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventSetHenchmanMappedPower ( class ABioPawn* pPawn, struct FName nmPower );
	struct FName eventGetHenchmanMappedPower ( class ABioPawn* pPawn );
	void SetMappingIcon ( unsigned char eNewIcon, unsigned long bClear, struct FSFXPowerWheelButtonIcon* oIcon );
	void ExInt_WheelTransitionOutDone ( );
	bool GetMapBoundaryValues ( struct FVector2D* vTopLeft, struct FVector2D* vBottomRight, float* fBoundaryRotation );
	void GetRadarDirectionValues ( float* fArrowDirection, float* fNorthDirection, float* fPathingArrowDirection );
	void CollectRadarElementData ( struct TArray<struct FSFXRadarElementData>* aRadarData );
	void PulseRadar ( float fPulseTime );
	void eventUpdateRadarMapBoundaries ( );
	void eventUpdateRadarArrows ( );
	void eventUpdateRadarElementPositions ( struct TArray<struct FSFXRadarElementData>* aRadarData );
	void eventUpdateRadarDisplay ( unsigned long bObjectiveMode );
	void eventRadarVisibilityChanged ( unsigned long bVisible, unsigned long bObjectiveMode );
	void SelectCurrentWheelItem ( unsigned char EMode );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void SelectCurrentWeapon ( );
	void SortWeapons ( class ABioPawn* pPawn, struct TArray<class ASFXWeapon*>* aWeapons );
	void SetWeaponIcon ( class ASFXWeapon* pWeap, int nSlotIndex, class ABioPawn* pPawn );
	void eventSetupWeaponDisplayForPawn ( class ABioPawn* pPawn, unsigned char ePawn );
	void eventLeaveWeaponIcon ( int nIconIndex );
	void eventHoverWeaponIcon ( int nIconIndex, unsigned long bForceUpdate );
	void eventUpdateWeaponIconDisplay ( struct FSFXPowerWheelIconWeapon oIcon, struct FString sAltPath );
	void SelectWeapon ( int nWeaponIndex );
	void eventSetWeaponState ( int nWeapIndex, unsigned char eNewWeapState );
	void SetWeaponTypeDisplay ( class UBioSFPanel* pPanel, struct FString sIconPath, struct FString sIconResource, int nNewType );
	void eventSetWeaponType ( int nWeapIndex, struct FString sWeaponIconResource, int nNewWeapIcon );
	void MapCurrentPower ( unsigned char eIcon );
	void SelectCurrentPower ( );
	struct FName eventGetCurrentHenchmanOrder ( class ABioPawn* pPawn );
	void eventLeavePowerIcon ( int nIconIndex, unsigned long bSkipTransition );
	void SetInformationText ( struct FString sName, struct FString sDesc );
	void eventUpdatePowerInformationText ( struct FSFXPowerWheelIconPower oIcon );
	void eventUpdateTextDisplayForIcon ( int nIconIndex );
	void eventHoverPowerIcon ( int nIconIndex, unsigned long bSkipTransition );
	bool EvaluatePowerForTarget ( struct FSFXPowerWheelIconPower oIcon, class AActor* pTarget, struct FString* sText );
	void SetPowerIconSelected ( int nIconIndex, unsigned long bSelected );
	void SetPowerIconState ( int nIconIndex, unsigned char eNewState );
	void eventSetMapText ( struct FString sText1, unsigned char eIcon1, struct FString sText2, unsigned char eIcon2 );
	void eventSetUseText ( struct FString sText );
	void SetStatusAndPowerText ( class ABioPawn* pPawn, unsigned char ePawnID );
	void eventWheelVisibilityChanged ( unsigned long bVisible );
	void HideWeaponIcon ( class UBioSFPanel* pPanel, struct FString sPath );
	void HidePowerIconByIndex ( int nIconIndex );
	bool IsPawnBlocked ( class ABioPawn* pPawn );
	void eventInitDisplay ( );
	void eventdoHotKey ( int nIndex );
	bool eventCanIssueQueuedOrder ( class APawn* pPawn );
	bool eventCanIssueImmediateOrder ( class APawn* pPawn );
	class ABioPawn* GetPawnFromName ( struct FName nmPawn );
	void RemoveHenchman ( class ABioPawn* pPawn );
	void OnAllowCameraRotation ( unsigned long i_bValue );
	void GameSessionEnded ( );
	void eventOnPanelRemoved ( );
	void CleanupReferences ( );
	void SetupPlayerPowers ( );
	void SetWheelVisible ( unsigned long bVisible );
};

// Class SFXGame.SFXSFHandler_PCPowerWheel
// 0x073F (0x0C5C - 0x051D)
class USFXSFHandler_PCPowerWheel : public USFXSFHandler_PowerWheel
{
public:
	struct FSFXPowerWheelIconPower                     m_aQuickSlotIcons[ 0x8 ];                         		// 0x0520 (0x04A0) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXPowerWheelIconPower                     m_oDragPowerIcon;                                 		// 0x09C0 (0x0094) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXPowerWheelIconPower                     m_oDragSlotIcon;                                  		// 0x0A54 (0x0094) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXPowerWheelIconWeapon                    m_oCenterWeaponIcon;                              		// 0x0AE8 (0x006C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXPowerWheelIconWeapon                    m_oHench1WeaponIcon;                              		// 0x0B54 (0x006C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXPowerWheelIconWeapon                    m_oHench2WeaponIcon;                              		// 0x0BC0 (0x006C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector2D                                   m_vMouseDownPos;                                  		// 0x0C2C (0x0008) [0x0000000000000000]              
	struct FVector2D                                   m_vDragOffsets;                                   		// 0x0C34 (0x0008) [0x0000000000000000]              
	int                                                m_nDraggingIcon;                                  		// 0x0C3C (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentDropTarget;                             		// 0x0C40 (0x0004) [0x0000000000000000]              
	float                                              m_fQuickslotIconUpdateInterval;                   		// 0x0C44 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentQuickSlot;                              		// 0x0C48 (0x0004) [0x0000000000000000]              
	int                                                m_srMaximizeText;                                 		// 0x0C4C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srMinimizeText;                                 		// 0x0C50 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fDragStartThreshold;                            		// 0x0C54 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bDashboardWeaponsOpen : 1;                      		// 0x0C58 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDraggingPower : 1;                             		// 0x0C58 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bDraggingKey : 1;                               		// 0x0C58 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bDoingDrag : 1;                                 		// 0x0C58 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bQuickSlotExpanded : 1;                         		// 0x0C58 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bQuickSlotVisible : 1;                          		// 0x0C58 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bEvalQuickSlotPowers : 1;                       		// 0x0C58 (0x0004) [0x0000000000000000] [0x00000040] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ExInt_CollapsePlayerWeapons ( );
	void SetQuickSlotIconSelected ( int nIconIndex, unsigned long bSelected );
	void doHotKey ( int nIndex );
	void LeaveQuickSlot ( int nSlotID );
	void HoverQuickSlot ( int nSlotID );
	void UpdateQuickSlotDisplay ( int nIcon );
	bool HandleQuickSlotMouseDown ( struct FString sIconID );
	void ExInt_IconMouseDown ( struct FString sIconID );
	bool HandleQuickSlotMouseUp ( struct FString sIconID );
	void ExInt_IconMouseUp ( struct FString sIconID );
	bool HandleQuickSlotRollOut ( struct FString sIconID );
	void ExInt_IconRollOut ( struct FString sIconID );
	bool HandleQuickSlotRollOver ( struct FString sIconID );
	void ExInt_IconRollOver ( struct FString sIconID );
	unsigned char FindIconIndexFromPath ( struct FString sIconID, int* nFoundIcon );
	void SetupQuickSlotPowers ( );
	void SetupQuickSlotKeys ( );
	void SetQuickSlotState ( unsigned long bExpand, unsigned long bSkipTransition );
	void SwapHenchmanWeapon ( class ABioPawn* pHench );
	void ExpandPlayerWeapons ( );
	void ClosePlayerWeapons ( );
	void SelectWeapon ( int nWeaponIndex );
	void eventSetWeaponState ( int nWeapIndex, unsigned char eNewWeapState );
	void SortWeapons ( class ABioPawn* pPawn, struct TArray<class ASFXWeapon*>* aWeapons );
	void eventSetMapText ( struct FString sText1, unsigned char eIcon1, struct FString sText2, unsigned char eIcon2 );
	void eventSetUseText ( struct FString sText );
	void eventWheelVisibilityChanged ( unsigned long bVisible );
	void eventInitDisplay ( );
	void OnAllowCameraRotation ( unsigned long i_bValue );
	void CleanupReferences ( );
	void RemoveHenchman ( class ABioPawn* pPawn );
	void NewSetQuickSlotPower ( int nSlot, int nDraggingIconID, unsigned long bDraggingPower, unsigned long bSilently );
};

// Class SFXGame.SFXSFHandler_Reticle
// 0x00E0 (0x0179 - 0x0099)
class USFXSFHandler_Reticle : public UBioSFHandler
{
public:
	struct FString                                     m_aCrosshairPaths[ 0x4 ];                         		// 0x009C (0x0040) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class AActor*>                       m_aTargets;                                       		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class USFXSF_ReticleBase*>           m_aReticles;                                      		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_aCrosshairRawBuffer[ 0x3 ];                     		// 0x00FC (0x000C) [0x0000000000000000]              
	class ASFXCameraNativeBase*                        m_pCameraManager;                                 		// 0x0108 (0x0008) [0x0000000000000000]              
	class ABioPlayerController*                        m_pPlayerController;                              		// 0x0110 (0x0008) [0x0000000000000000]              
	class UBioPlayerInput*                             m_pPlayerInput;                                   		// 0x0118 (0x0008) [0x0000000000000000]              
	class UBioEpicPawnBehavior*                        m_pPlayerBehavior;                                		// 0x0120 (0x0008) [0x0000000000000000]              
	class ABioPlayerSquad*                             m_pPlayerSquad;                                   		// 0x0128 (0x0008) [0x0000000000000000]              
	float                                              m_fTimeSinceLastUpdate;                           		// 0x0130 (0x0004) [0x0000000000000000]              
	float                                              m_fCacheCrosshairRadius;                          		// 0x0134 (0x0004) [0x0000000000000000]              
	int                                                m_nCrosshairBufferIndex;                          		// 0x0138 (0x0004) [0x0000000000000000]              
	int                                                m_nCacheWeaponAmmo;                               		// 0x013C (0x0004) [0x0000000000000000]              
	int                                                m_nCacheSniperZoom;                               		// 0x0140 (0x0004) [0x0000000000000000]              
	int                                                m_nCacheSniperDistance;                           		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              m_fSFWidth;                                       		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              m_fSFHeight;                                      		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              m_fScrn2SF_YOffset;                               		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              m_fScrn2SF_YScale;                                		// 0x0154 (0x0004) [0x0000000000000000]              
	float                                              m_fScrn2SF_XScale;                                		// 0x0158 (0x0004) [0x0000000000000000]              
	int                                                m_nMaxReticleDistance;                            		// 0x015C (0x0004) [0x0000000000000000]              
	float                                              m_fUpdateInterval;                                		// 0x0160 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fSelectionBoxScalingFactor;                     		// 0x0164 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fScreenChangeDelta;                             		// 0x0168 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srDistanceUnit;                                 		// 0x016C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fCrosshairAccuracyModifier;                     		// 0x0170 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bSelectionInvalidated : 1;                      		// 0x0174 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_fCacheTargetInSights : 1;                       		// 0x0174 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bReticleVisible : 1;                            		// 0x0174 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bShowHeavyDetails : 1;                          		// 0x0174 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bShowSniperDetails : 1;                         		// 0x0174 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned char                                      m_eCurrentCrosshair;                              		// 0x0178 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ExInt_ReticleVisible ( );
	void ExInt_OutTransitionComplete ( struct FString sPath );
	void ExInt_InTransitionComplete ( struct FString sPath );
	int eventGetWeaponAmmo ( unsigned long bClipOnly );
	struct FString eventGetWeaponAmmoString ( unsigned long bClipOnly );
	unsigned char eventGetDesiredCrosshairFromWeapon ( );
	float eventGetCrosshairRadius ( );
	void ProcessImpacts ( unsigned long bIsHeadshot );
	void Reset ( );
	void GameSessionEnded ( );
	void CleanupReferences ( );
	void eventOnPanelRemoved ( );
};

// Class SFXGame.SFXSFHandler_Save
// 0x00C4 (0x015D - 0x0099)
class USFXSFHandler_Save : public UBioSFHandler
{
public:
	struct FDouble                                     CheckingDataStartTime;                            		// 0x009C (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct TArray<struct FSaveGUIAreaInfo>             AreaData;                                         		// 0x00A4 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultImageName;                                 		// 0x00B4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FSaveGUIRecord>               SaveList;                                         		// 0x00C4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ImagePackageName;                                 		// 0x00D4 (0x0010) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	class UTexture2D*                                  DefaultAreaImage;                                 		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxSaves;                                         		// 0x00EC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                PendingOverwriteIndex;                            		// 0x00F0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                PreparedSaveSize;                                 		// 0x00F4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                DefaultAreaNameText;                              		// 0x00F8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                AutoSaveText;                                     		// 0x00FC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                ChapterSaveText;                                  		// 0x0100 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                QuickSaveText;                                    		// 0x0104 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                SaveGameText;                                     		// 0x0108 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                SaveDisplayText;                                  		// 0x010C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                NewGameText;                                      		// 0x0110 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                TimePlayedText;                                   		// 0x0114 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                LastPlayedText;                                   		// 0x0118 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                LastPlayedTimeText;                               		// 0x011C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                OverwriteSaveGameText;                            		// 0x0120 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                ConfirmOverwriteSaveGameText;                     		// 0x0124 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CancelOverwriteSaveGameText;                      		// 0x0128 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                DeleteGameText;                                   		// 0x012C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                ConfirmDeleteGameText;                            		// 0x0130 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CancelDeleteGameText;                             		// 0x0134 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                InsufficentSpaceText;                             		// 0x0138 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                InsufficentSpaceTextPC;                           		// 0x013C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                InsufficentSpaceTextPS3;                          		// 0x0140 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                InsufficentSpaceOverwriteTextPS3;                 		// 0x0144 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                InsufficentSpaceAcknowledgedText;                 		// 0x0148 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CheckingSaveDataText;                             		// 0x014C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              CheckingDataMessageDelay;                         		// 0x0150 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              CheckingDataMessageMinimum;                       		// 0x0154 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bWaitingOnMsgBox : 1;                             		// 0x0158 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bEnumeratingSaves : 1;                            		// 0x0158 (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bCheckingDataComplete : 1;                        		// 0x0158 (0x0004) [0x0000000000002001] [0x00000004] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bCheckingDataMessageVisible : 1;                  		// 0x0158 (0x0004) [0x0000000000002001] [0x00000008] ( CPF_Edit | CPF_Transient )
	unsigned char                                      GuiMode;                                          		// 0x015C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool UpdateCheckingDataMessage ( int Message );
	void DisplayInsufficientSpaceMessage ( int AdditionalBytesNeeded );
	void CheckFreeSpace ( struct FSFXSaveGameCommandEventArgs Args );
	void QueryFreeSpace ( struct FSFXSaveGameCommandEventArgs Args );
	void SetInputEnabled ( unsigned long B );
	void PrepareSaveGame ( );
	int GetNewSaveIdx ( );
	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	bool eventGetPlayerData ( struct FString* FirstName, int* LastName, int* ClassName, int* Level );
	void eventOnPanelAdded ( );
	void HandleEvent ( unsigned char Command, struct TArray<struct FString>* lstArguments );
	void Callback_DeviceSelectionComplete ( unsigned long bWasSuccessful );
	void ResetGui ( struct FSFXSaveGameCommandEventArgs Args );
	void DeleteGameCallback ( struct FSFXSaveGameCommandEventArgs Args );
	void Callback_ConfirmDelete ( unsigned long bAPressed, int context );
	void Callback_ConfirmOverwrite ( unsigned long bAPressed, int context );
	void EndInitializeSaveList ( struct FSFXSaveGameCommandEventArgs Args );
	void BeginInitializeSaveList ( );
	class USFXEngine* GetEngine ( );
	class ABioPlayerController* GetBioPlayerController ( );
};

// Class SFXGame.SFXSFHandler_Load
// 0x0054 (0x01B1 - 0x015D)
class USFXSFHandler_Load : public USFXSFHandler_Save
{
public:
	struct TArray<struct FSaveGUICareerRecord>         CareerList;                                       		// 0x0160 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FSFXSaveDescriptor>           CorruptedSaveGames;                               		// 0x0170 (0x0010) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	int                                                LoadGameLoseProgressText;                         		// 0x0180 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                ConfirmLoadGameText;                              		// 0x0184 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CancelLoadGameText;                               		// 0x0188 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CharNameText;                                     		// 0x018C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                DeleteCareerText;                                 		// 0x0190 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                ConfirmDeleteCareerText;                          		// 0x0194 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CancelDeleteCareerText;                           		// 0x0198 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CorruptSaveWarningText;                           		// 0x019C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                ConfirmDeleteCorruptText;                         		// 0x01A0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CancelDeleteCorruptText;                          		// 0x01A4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CurrentCareerIndex;                               		// 0x01A8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bFromMainMenu : 1;                                		// 0x01AC (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned char                                      LoadMode;                                         		// 0x01B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void GameSessionEnded ( );
	void OnStorageDeviceChanged ( );
	void eventOnPanelRemoved ( );
	void eventOnPanelAdded ( );
	void HandleEvent ( unsigned char Command, struct TArray<struct FString>* lstArguments );
	void DeleteCareer ( int SaveIdx, class UMassEffectGuiManager* GuiMan );
	void LoadCareer ( int SaveIdx, class UMassEffectGuiManager* GuiMan );
	void DeleteGame ( int SaveIdx, class UMassEffectGuiManager* GuiMan );
	void LoadGame ( int SaveIdx, class UMassEffectGuiManager* GuiMan );
	void Initialize ( );
	void eventCheckForCorruptSaves ( );
	void Callback_ConfirmDeleteCorruptSaves ( unsigned long bAPressed, int context );
	void ResetGui ( struct FSFXSaveGameCommandEventArgs Args );
	void SaveCommandCallback_InitializeCareers ( struct FSFXSaveGameCommandEventArgs Args );
	void Callback_ConfirmDeleteCareer ( unsigned long bAPressed, int CareerIdx );
	void LoadGameCallback ( struct FSFXSaveGameCommandEventArgs Args );
	void Callback_ConfirmLoadGame ( unsigned long bAPressed, int context );
	void FillCareerListCallback_InitializeLoadList ( );
	void InitImportManager ( );
	void EndInitializeLoadList ( struct FSFXSaveGameCommandEventArgs Args );
	void BeginInitializeLoadList ( );
	void InitializeLoadList ( int CareerIdx );
	void EndInitializeCareers ( struct FSFXSaveGameCommandEventArgs Args );
	void BeginInitializeCareers ( );
};

// Class SFXGame.SFXSFHandler_Slideshow
// 0x0073 (0x010C - 0x0099)
class USFXSFHandler_Slideshow : public UBioSFHandler
{
public:
	struct FSFXSlideshowEntry                          m_CurrentSlide;                                   		// 0x009C (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFXSlideshowParams                         m_ShowParams;                                     		// 0x00CC (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SlideshowFinished__Delegate;                    		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fCurrentSlideElapsedTime;                       		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentSlideIndex;                             		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                m_nAdjacentPreloadCount;                          		// 0x0104 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bWaitingForInit : 1;                            		// 0x0108 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bBeginWhenDoneInit : 1;                         		// 0x0108 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bCanGoNext : 1;                                 		// 0x0108 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bCanGoPrev : 1;                                 		// 0x0108 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bCanExit : 1;                                   		// 0x0108 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void TryExitShow ( );
	void TryAdvanceShow ( unsigned long bForward );
	void ExInt_OnInitializationComplete ( );
	void ExInt_OnTransitionComplete ( );
	void EndSlideshow ( unsigned long bFadeToBlack );
	void BeginSlideshow ( );
	void PreloadAdjacentSlides ( );
	void AdvanceShow ( unsigned long bForward, unsigned long bAutoAdvanced );
	void UpdateNavButtonDisplay ( unsigned long bCanGoNext, unsigned long bCanGoPrev, unsigned long bCanExit );
	void Update ( float fDeltaT );
	void OnPanelAdded ( );
	void SetTransitionOptions ( unsigned long bFadeIn, unsigned long bFadeOut, float fFadeScalar );
	void PlaySlideshow ( struct FScriptDelegate onFinished, struct FSFXSlideshowParams* oParams );
	void SlideshowFinished ( class USFXSFHandler_Slideshow* slideshow );
};

// Class SFXGame.BioCameraDebugger
// 0x000C (0x006C - 0x0060)
class UBioCameraDebugger : public UObject
{
public:
	int                                                m_anFlag[ 0x3 ];                                  		// 0x0060 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool GetFlag ( unsigned char eFlag );
	void SetFlag ( unsigned char eFlag, unsigned long B );
};

// Class SFXGame.BioCameraZoom
// 0x0064 (0x00C4 - 0x0060)
class UBioCameraZoom : public UObject
{
public:
	struct FBioZoomFocusConfig                         m_focusConfig;                                    		// 0x0060 (0x002C) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FBioZoomMagnificationConfig                 m_magnificationConfig;                            		// 0x008C (0x0010) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                m_nCurrentMagnificationLevel;                     		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              m_fFOVTarget;                                     		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              m_fFOVRate;                                       		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              m_fFOVMin;                                        		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              m_fFOVMax;                                        		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              m_fCamStickScalarTarget;                          		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              m_fCamStickScalarRate;                            		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              m_fCamStickScalarMin;                             		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              m_fFocusDistance;                                 		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              m_fFocusDistanceTarget;                           		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
	void Tick ( float TimeDelta, float FOV, float CamStickScalar );
	int GetCurrentMagnificationLevel ( );
	void Focus ( float fDistance, class ABioWorldInfo* pWorldInfo );
};

// Class SFXGame.SFXCameraMode
// 0x01B8 (0x0218 - 0x0060)
class USFXCameraMode : public UObject
{
public:
	struct FVector                                     m_avLockedClipPlanePt[ 0x8 ];                     		// 0x0060 (0x0060) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_avLockedHookPlanePt[ 0x8 ];                     		// 0x00C0 (0x0060) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_avLockedNewClipPlanePt[ 0x8 ];                  		// 0x0120 (0x0060) [0x0000000000002000]              ( CPF_Transient )
	struct FTPOV                                       m_pov;                                            		// 0x0180 (0x001C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     Offset;                                           		// 0x019C (0x000C) [0x0000000000000000]              
	struct FVector                                     HookOffset;                                       		// 0x01A8 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vLockedCameraLocation;                          		// 0x01B4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vLockedHook;                                    		// 0x01C0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vLockedNewCameraLocation;                       		// 0x01CC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       HookName;                                         		// 0x01D8 (0x0008) [0x0000000000000000]              
	struct FName                                       CameraName;                                       		// 0x01E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioPlayerController*                        Owner;                                            		// 0x01E8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXCameraInput*                             Input;                                            		// 0x01F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       LastCameraCollisionActor;                         		// 0x01F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioCameraDebugger*                          Debugger;                                         		// 0x0200 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              FOV;                                              		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionDistance;                                		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fAspectRatio;                                   		// 0x0210 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsCameraShakeEnabled : 1;                        		// 0x0214 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCollisionEnabled : 1;                            		// 0x0214 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bInstantTransition : 1;                           		// 0x0214 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bConstrainAspectRatio : 1;                      		// 0x0214 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bUseCollisionSource : 1;                        		// 0x0214 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FVector GetActorCameraHook ( );
	struct FVector GetCollisionCameraHook ( );
	bool CheckLoop ( class USFXCameraMode* M, int RecurseLevel );
	void DrawHUD ( class UBioCheatManager* M );
	struct FRotator GetCurrentShake ( );
	bool IsCollisionEnabled ( );
	void Initialize ( class ABioPlayerController* NewOwner );
	void OnUnPossess ( );
	void OnPossess ( class APawn* NewPawn );
	void MakeInactive ( );
	void MakeActive ( );
	void eventAimAtPoint ( struct FVector V );
	void Tick ( float fTimeDelta );
	struct FVector GetCameraLocation ( );
	void DrawHook ( struct FVector V, class AActor* Actor );
	void eventModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
	void ComputeClipPlaneRect ( float fFov, float fNearClipPlane, float* fWidth, float* fHeight );
	void DoCameraCollisionNative ( struct FVector CollisionHook, class AActor* A, struct FVector* V, struct FRotator* R );
	void DoCameraCollision ( class AActor* A, struct FVector* V, struct FRotator* R );
};

// Class SFXGame.SFXCameraInput
// 0x0018 (0x0078 - 0x0060)
class USFXCameraInput : public UObject
{
public:
	struct FVector2D                                   CameraSensitivity;                                		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeToReachFullSpeed;                             		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxCameraRotationSpeed;                           		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StickDeadZone;                                    		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bUseExplorationSensitivity : 1;                 		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioCameraUtility
// 0x0004 (0x021C - 0x0218)
class UBioCameraUtility : public USFXCameraMode
{
public:
	float                                              m_fCameraCollisionTestPointRange;                 		// 0x0218 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioCameraBehavior
// 0x0000 (0x021C - 0x021C)
class UBioCameraBehavior : public UBioCameraUtility
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
};

// Class SFXGame.BioCameraBehaviorConversation
// 0x00B4 (0x02D0 - 0x021C)
class UBioCameraBehaviorConversation : public UBioCameraBehavior
{
public:
	class UClass*                                      pProceduralCamera;                                		// 0x021C (0x0008) [0x0000000000000000]              
	struct FVector                                     m_vFixedCamPosition;                              		// 0x0224 (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_rFixedCamRotation;                              		// 0x0230 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vProceduralCamPosition;                         		// 0x023C (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_rProceduralCamRotation;                         		// 0x0248 (0x000C) [0x0000000000000000]              
	struct FBioStageDOFData                            m_tDOFData;                                       		// 0x0254 (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_rRotationOffset;                                		// 0x0260 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vPrevFixedCamPos;                               		// 0x026C (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_rPrevFixedCamRot;                               		// 0x0278 (0x000C) [0x0000000000000000]              
	struct FBioStageDOFData                            m_tPrevDOFData;                                   		// 0x0284 (0x000C) [0x0000000000000000]              
	class AActor*                                      ViewSource;                                       		// 0x0290 (0x0008) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x0298 (0x0008) [0x0000000000000000]              
	class UAnimSet*                                    m_pIdleCamAnimSet;                                		// 0x02A0 (0x0008) [0x0000000000000000]              
	struct FName                                       m_nProceduralCameraClass;                         		// 0x02A8 (0x0008) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fNearPlane;                                     		// 0x02B0 (0x0004) [0x0000000000000000]              
	float                                              CAMERA_FOV;                                       		// 0x02B4 (0x0004) [0x0000000000000000]              
	float                                              m_fLateralOffset;                                 		// 0x02B8 (0x0004) [0x0000000000000000]              
	float                                              m_fPrevCamFOV;                                    		// 0x02BC (0x0004) [0x0000000000000000]              
	float                                              m_fPrevNearPlane;                                 		// 0x02C0 (0x0004) [0x0000000000000000]              
	float                                              m_fIdleCamTimeIndex;                              		// 0x02C4 (0x0004) [0x0000000000000000]              
	int                                                m_idleCamAnimIndex;                               		// 0x02C8 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDOFSettingDisabled : 1;                        		// 0x02CC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bSavedData : 1;                                 		// 0x02CC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bIdleCamEnabled : 1;                            		// 0x02CC (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
	void InternalModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
	void DrawHUD ( class UBioCheatManager* M );
	void eventGetProceduralCam ( unsigned long bInvert, struct FVector* vCamLocation, struct FRotator* rCamRotation );
	void BlendIdleCameraAnimation ( );
	void InitProceduralCameraClass ( );
	void Reset ( );
	void MakeInactive ( );
	void Initialize ( class ABioPlayerController* NewOwner );
	void ForcePOV ( );
	void ShutDown ( );
	void Tick ( float TimeDelta );
};

// Class SFXGame.BioCameraBehaviorGalaxy
// 0x0378 (0x0594 - 0x021C)
class UBioCameraBehaviorGalaxy : public UBioCameraBehavior
{
public:
	struct FString                                     m_sSelectableObject;                              		// 0x021C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sCenterObject;                                  		// 0x022C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sCrossHairObject;                               		// 0x023C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sCameraObject;                                  		// 0x024C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sPlanetEvent;                                   		// 0x025C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class AActor*>                       m_pScaleformObjects;                              		// 0x026C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FSFXGalaxyMapSelector>        m_SystemSelectors;                                		// 0x027C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FSFXGalaxyMapSelector>        m_ClusterSelectors;                               		// 0x028C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FSFXGalaxyMapSelector>        m_GalaxySelectors;                                		// 0x029C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class AActor*>                       m_pDynamicClusterPath;                            		// 0x02AC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class AActor*>                       m_pDynamicObjects;                                		// 0x02BC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sBuyFuelSound_PctFullRTPCName;                  		// 0x02CC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sShipTravelSound_SpeedRTPCName;                 		// 0x02DC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sShipTravelSound_ThrustRTPCName;                		// 0x02EC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sShipTravelSound_FuelQtyRTPCName;               		// 0x02FC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sShipTravelSound_SystemClusterRTPCName;         		// 0x030C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UWwiseBaseSoundObject*>        m_pShipHalfFuelVO;                                		// 0x031C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UWwiseBaseSoundObject*>        m_pShipNoFuelClusterVO;                           		// 0x032C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UWwiseBaseSoundObject*>        m_pShipNoFuelClusterReturnVO;                     		// 0x033C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UWwiseBaseSoundObject*>        m_pShipNoFuelSystemVO;                            		// 0x034C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScreenShakeStruct                          ClusterTravelShake;                               		// 0x035C (0x0070) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vShipDesiredDirection;                          		// 0x03CC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vZoomLocation;                                  		// 0x03D8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vZoomDelta;                                     		// 0x03E4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_rZoomRotation;                                  		// 0x03F0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vLastCameraLocation;                            		// 0x03FC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USFXGalaxy*                                  m_pGalaxyMap;                                     		// 0x0408 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXCluster*                                 m_pCurrentCluster;                                		// 0x0410 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXSystem*                                  m_pCurrentSystem;                                 		// 0x0418 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioPlanet*                                  m_pCurrentPlanet;                                 		// 0x0420 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pCenterObject;                                  		// 0x0428 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pCrossHairObject;                               		// 0x0430 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pCameraObject;                                  		// 0x0438 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pLastSelectedObject;                            		// 0x0440 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pSelectedObject;                                		// 0x0448 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pSelectedCluster;                               		// 0x0450 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pSelectedSystem;                                		// 0x0458 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pSelectedPlanet;                                		// 0x0460 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pMassRelaySystem;                               		// 0x0468 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pFuelEllipseObject;                             		// 0x0470 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pMassRelayObject;                               		// 0x0478 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pRedMassRelayObject;                            		// 0x0480 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pDepotObject;                                   		// 0x0488 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ADynamicSMActor*                             m_pTemplatePlanet;                                		// 0x0490 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBio2DA*                                     m_pMapTable;                                      		// 0x0498 (0x0008) [0x0000000000000000]              
	class UBio2DA*                                     m_pPlotPlanetTable;                               		// 0x04A0 (0x0008) [0x0000000000000000]              
	class UForceFeedbackWaveform*                      ClusterTravelFF;                                  		// 0x04A8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseAudioComponent*                        m_pAudioComponent;                                		// 0x04B0 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UWwiseBaseSoundObject*                       m_pErrorSound;                                    		// 0x04B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseBaseSoundObject*                       m_pBuyFuelSound;                                  		// 0x04C0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseBaseSoundObject*                       m_pBuyFuelSoundStop;                              		// 0x04C8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseBaseSoundObject*                       m_pBuyFuelSound_Full;                             		// 0x04D0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseBaseSoundObject*                       m_pBuyProbeSound;                                 		// 0x04D8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseBaseSoundObject*                       m_pShipTravelSound_Start;                         		// 0x04E0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseBaseSoundObject*                       m_pShipTravelSound_Stop;                          		// 0x04E8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseBaseSoundObject*                       m_pShipOutOfFuel_Start;                           		// 0x04F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseBaseSoundObject*                       m_pShipOutOfFuel_Stop;                            		// 0x04F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMovementScalar;                                		// 0x0500 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMovementScalarGalaxy;                          		// 0x0504 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMovementScalarCluster;                         		// 0x0508 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMovementScalarSystem;                          		// 0x050C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRotationScalar;                                		// 0x0510 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fShipCurrentRotationSpeed;                      		// 0x0514 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fShipCurrentMovementSpeed;                      		// 0x0518 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fShipMinRotationSpeed;                          		// 0x051C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fShipMaxRotationSpeed;                          		// 0x0520 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fShipControlDeadzone;                           		// 0x0524 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fShipSystemAccel;                               		// 0x0528 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fShipSystemDeccel;                              		// 0x052C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fShipClusterAccel;                              		// 0x0530 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fShipClusterDeccel;                             		// 0x0534 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nCurrentState;                                  		// 0x0538 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxOrbitDistance;                              		// 0x053C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPlanarPitch;                                   		// 0x0540 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fZoomTime;                                      		// 0x0544 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetDescription;                             		// 0x0548 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMissionDescription;                            		// 0x054C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetImageIndex;                              		// 0x0550 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetMap;                                     		// 0x0554 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nButtonLabel;                                   		// 0x0558 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nExitMap;                                       		// 0x055C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nActiveWorld;                                   		// 0x0560 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nScanRange;                                     		// 0x0564 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nHighlightWorld;                                		// 0x0568 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPlanetRotation;                                		// 0x056C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetEventConditional;                        		// 0x0570 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetEventParameter;                          		// 0x0574 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetEventTransition;                         		// 0x0578 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetEventTransParameter;                     		// 0x057C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_srPlanetEventMessage;                           		// 0x0580 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ClusterTravelShakeTime;                           		// 0x0584 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ClusterTravelFFTime;                              		// 0x0588 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastNoFuelMessageTime;                         		// 0x058C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bTransitionDown : 1;                            		// 0x0590 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bFirstStage : 1;                                		// 0x0590 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bPlanetUsable : 1;                              		// 0x0590 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bPlanetScanable : 1;                            		// 0x0590 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bPaused : 1;                                    		// 0x0590 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bRefreshPlanetUsable : 1;                       		// 0x0590 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bRebuildPlanetRingCache : 1;                    		// 0x0590 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bSelectedPlanetLastFrame : 1;                   		// 0x0590 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bUseInternalPlanetEvent : 1;                    		// 0x0590 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bCanExploreCluster : 1;                         		// 0x0590 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bSystemSunVisible : 1;                          		// 0x0590 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool TriggerEvent ( struct FName sEvent, struct FName nParameter );
	struct FVector GetCameraLocation ( );
	void eventSetExplorationAchievementCompleted ( );
	void eventUpdateClusterTravelEffects ( float TimeDelta );
	void eventOutOfFuelPenalty ( float fDistToDepot );
	void eventBurnFuel ( float fFuel );
	float eventGetFuelEfficiency ( );
	float eventGetMaxFuel ( );
	float eventGetRemainingFuel ( );
	int eventGetNumCredits ( );
	float eventGetMaxProbes ( );
	int eventGetRemainingProbes ( );
	void HandleRevealLandingSite ( );
	bool HandleSelectPlanet ( );
	void Tick ( float TimeDelta );
};

// Class SFXGame.BioCameraBehaviorSpectator
// 0x0038 (0x0254 - 0x021C)
class UBioCameraBehaviorSpectator : public UBioCameraBehavior
{
public:
	struct TArray<class APlayerStart*>                 m_aSpectateSpawnLocation;                         		// 0x021C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AActor*                                      ViewSource;                                       		// 0x022C (0x0008) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x0234 (0x0008) [0x0000000000000000]              
	float                                              m_fLockRange;                                     		// 0x023C (0x0004) [0x0000000000000000]              
	float                                              m_fLockHeight;                                    		// 0x0240 (0x0004) [0x0000000000000000]              
	float                                              m_fLockPitch;                                     		// 0x0244 (0x0004) [0x0000000000000000]              
	float                                              m_fLockYaw;                                       		// 0x0248 (0x0004) [0x0000000000000000]              
	int                                                m_nSpectateCurrentLocation;                       		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bSuppliedLocalizedParams : 1;                   		// 0x0250 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
	void SetTarget ( class AActor* NewTarget );
	void MakeInactive ( );
	void Reset ( );
	void SetTargetLocalizedCameraParams ( struct FVector vPosition, struct FRotator rRotation, struct FRotator rLockRotation );
	void GetTargetLocalizedCameraParams ( struct FVector* vPosition, struct FRotator* rRotation, struct FRotator* rLockRotation );
};

// Class SFXGame.SFXCameraModifier_ScreenShake
// 0x0083 (0x0100 - 0x007D)
class USFXCameraModifier_ScreenShake : public UCameraModifier
{
public:
	struct TArray<struct FScreenShakeStruct>           Shakes;                                           		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScreenShakeStruct                          TestShake;                                        		// 0x0090 (0x0070) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV );
	void UpdateScreenShake ( float DeltaTime, struct FScreenShakeStruct* Shake, struct FTPOV* OutPOV );
	void StartNewShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency );
	struct FScreenShakeStruct ComposeNewShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency );
	float InitializeOffset ( unsigned char Param );
	struct FScreenShakeStruct InitializeShake ( struct FScreenShakeStruct NewShake );
	void AddScreenShake ( struct FScreenShakeStruct* NewShake );
	void RemoveScreenShake ( struct FName ShakeName );
	void RemoveAllScreenShakes ( );
};

// Class SFXGame.SFXCameraNativeBase
// 0x0088 (0x05A8 - 0x0520)
class ASFXCameraNativeBase : public ACamera
{
public:
	struct TArray<class USFXCameraMode*>               CameraModes;                                      		// 0x0520 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FSFXCameraNativeBaseTraceInfo               m_aTraceInfo;                                     		// 0x0530 (0x0028) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    AdditiveRotation;                                 		// 0x0558 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    SubtractiveRotation;                              		// 0x0564 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USFXCameraMode_Interpolate*                  SlideTransition;                                  		// 0x0570 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXCameraMode_Interpolate*                  InstantTransition;                                		// 0x0578 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXCameraMode*                              CurrentCameraMode;                                		// 0x0580 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXCameraMode*                              LastGoodMode;                                     		// 0x0588 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   CameraStick;                                      		// 0x0590 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   MovementStick;                                    		// 0x0598 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              AspectRatio;                                      		// 0x05A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bDisabled : 1;                                    		// 0x05A4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bFreeCamActive : 1;                               		// 0x05A4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bIgnoreSlowMo : 1;                              		// 0x05A4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bCameraSwitchEnabled : 1;                       		// 0x05A4 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventAddScreenShake ( struct FScreenShakeStruct Shake );
	void eventCreateIPECommands ( class UBioInGamePropertyEditor* IPE, class UBioPropertyEditorBaseNode* Parent );
	float BioAdjustFOVForViewport ( float inHorizFOV, class APawn* CameraTargetPawn );
	void OnUnPossess ( );
	void OnPossess ( class APawn* pPawn );
	class AActor* LineCheck ( unsigned long TraceActors, struct FVector Extent, int ExtraTraceFlags, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* HitNormal, struct FVector* TraceEnd );
	void ResetHiddenActors ( );
	void TraceCamera ( );
	struct FVector WorldToScreenSnapToEdge ( float i_fSafeZoneX, float i_fSafeZoneY, struct FVector* vWorldLoc );
	struct FVector WorldToCanonicalScreen ( struct FVector* vWorldLoc );
	bool GetTrace ( class AActor** oHit, struct FVector* vLocation, struct FVector* vNormal );
};

// Class SFXGame.BioCameraShake
// 0x009A (0x00FA - 0x0060)
class UBioCameraShake : public UObject
{
public:
	struct FRawDistributionFloat                       m_rawIntensityVsDistanceDistribution;             		// 0x0060 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       m_rawFadeInDistribution;                          		// 0x0084 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       m_rawFadeOutDistribution;                         		// 0x00A8 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	class UBio2DA*                                     m_database;                                       		// 0x00CC (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       m_recordId;                                       		// 0x00D4 (0x0008) [0x0000000000000000]              
	float                                              m_startTime;                                      		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_duration;                                       		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_radius;                                         		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_intensity;                                      		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fadeInDuration;                                 		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fadeOutDuration;                                		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_isRandomVariant : 1;                            		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      Type;                                             		// 0x00F8 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      Variant;                                          		// 0x00F9 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioCameraShakeInterface
// 0x0000 (0x0060 - 0x0060)
class UBioCameraShakeInterface : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FRotator ComputeCameraRotationDelta ( );
};

// Class SFXGame.BioPawnCameraShakeInterface
// 0x0058 (0x00B8 - 0x0060)
class UBioPawnCameraShakeInterface : public UBioCameraShakeInterface
{
public:
	struct TArray<class ABioVisualEffect*>             m_pendingRequests;                                		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0070 (0x0048) UNKNOWN PROPERTY: MapProperty SFXGame.BioPawnCameraShakeInterface.m_NodeToEffectMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnPawnDestroyed ( );
};

// Class SFXGame.BioCapability
// 0x002E (0x008E - 0x0060)
class UBioCapability : public UObject
{
public:
	class APawn*                                       m_oMember;                                        		// 0x0060 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       m_nmTechnique;                                    		// 0x0068 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                m_nSubTechnique;                                  		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fRating;                                        		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fMinRange;                                      		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fMaxRange;                                      		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fBestRange;                                     		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fTmpRange;                                      		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bCanCasterMoveDuring : 1;                       		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      m_nCapType;                                       		// 0x008C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      m_nCapMode;                                       		// 0x008D (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAiController
// 0x014D (0x0611 - 0x04C4)
class ABioAiController : public AAIController
{
public:
	struct TArray<struct FName>                        AILogFilter;                                      		// 0x04C4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FEnemyInfo>                   EnemyList;                                        		// 0x04D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FDelayUpdateInfo>             DelayUpdateList;                                  		// 0x04E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class AActor*>                       IgnoredTargets;                                   		// 0x04F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class ABioBaseSquad*>                IgnoredSquads;                                    		// 0x0504 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FCoverInfo                                  Cover;                                            		// 0x0514 (0x000C) [0x0000000000000000]              
	struct FCoverInfo                                  CoverGoal;                                        		// 0x0520 (0x000C) [0x0000000000000000]              
	struct FCoverInfo                                  LastCover;                                        		// 0x052C (0x000C) [0x0000000000000000]              
	struct FVector                                     MovePoint;                                        		// 0x0538 (0x000C) [0x0000000000000000]              
	class APawn*                                       oKiller;                                          		// 0x0544 (0x0008) [0x0000000000000000]              
	class AFileLog*                                    AILogFile;                                        		// 0x054C (0x0008) [0x0000000000000000]              
	class AActor*                                      FireTarget;                                       		// 0x0554 (0x0008) [0x0000000000000000]              
	class AActor*                                      ForcedTarget;                                     		// 0x055C (0x0008) [0x0000000000000000]              
	class AActor*                                      PreferredTarget;                                  		// 0x0564 (0x0008) [0x0000000000000000]              
	class ABioAiController*                            OldController;                                    		// 0x056C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    MyBP;                                             		// 0x0574 (0x0008) [0x0000000000000000]              
	class UBioPawnBehavior*                            MyBPBehavior;                                     		// 0x057C (0x0008) [0x0000000000000000]              
	class AActor*                                      MoveGoal;                                         		// 0x0584 (0x0008) [0x0000000000000000]              
	class AActor*                                      SearchGoalActor;                                  		// 0x058C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              InterpEnemyLocSpeed;                              		// 0x0594 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              Response_MinEnemySeenTime;                        		// 0x0598 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              Response_MinEnemyHearTime;                        		// 0x059C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              TargetAcquisitionTime;                            		// 0x05A0 (0x0004) [0x0000000000000000]              
	int                                                BurstFireCount;                                   		// 0x05A4 (0x0004) [0x0000000000000000]              
	float                                              BurstFireDelay;                                   		// 0x05A8 (0x0004) [0x0000000000000000]              
	float                                              WeaponAimDelay;                                   		// 0x05AC (0x0004) [0x0000000000000000]              
	int                                                RemainingBurstFireCount;                          		// 0x05B0 (0x0004) [0x0000000000000000]              
	float                                              AimInstability;                                   		// 0x05B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastInstabilityTime;                              		// 0x05B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AI_Acc_InstabilityDecayRate;                      		// 0x05BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AI_Acc_Base;                                      		// 0x05C0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AI_Acc_Target;                                    		// 0x05C4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AI_AccMod_Move;                                   		// 0x05C8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AI_AccMod_TargMove;                               		// 0x05CC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AI_AccMod_BriefAcquire;                           		// 0x05D0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AI_AccMod_BriefVisibility;                        		// 0x05D4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AI_AccMod_ShortRange;                             		// 0x05D8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AI_AccMod_MediumRange;                            		// 0x05DC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AI_AccMod_LongRange;                              		// 0x05E0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              EnemyDistance_Short;                              		// 0x05E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EnemyDistance_Medium;                             		// 0x05E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EnemyDistance_Long;                               		// 0x05EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EnemyDistance_Melee;                              		// 0x05F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fActivateTime;                                  		// 0x05F4 (0x0004) [0x0000000000000000]              
	float                                              MoveOffset;                                       		// 0x05F8 (0x0004) [0x0000000000000000]              
	float                                              AdjustToSlotTime;                                 		// 0x05FC (0x0004) [0x0000000000000000]              
	float                                              m_fMobTargetMoveTolerance;                        		// 0x0600 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nFireLineObstructionCount;                      		// 0x0604 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nFireLineObstructionFrequency;                  		// 0x0608 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAILogging : 1;                                   		// 0x060C (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      bAILogToWindow : 1;                               		// 0x060C (0x0004) [0x0000000000004001] [0x00000002] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDebug_AI : 1;                                    		// 0x060C (0x0004) [0x0000000000004001] [0x00000004] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDebug_AIRange : 1;                               		// 0x060C (0x0004) [0x0000000000004001] [0x00000008] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDebug_AIEnemyList : 1;                           		// 0x060C (0x0004) [0x0000000000004001] [0x00000010] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDebug_ThreatRadius : 1;                          		// 0x060C (0x0004) [0x0000000000004001] [0x00000020] ( CPF_Edit | CPF_Config )
	unsigned long                                      bWeaponFiring : 1;                                		// 0x060C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bFailedToFire : 1;                                		// 0x060C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bAcquireNewCover : 1;                             		// 0x060C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bHighCoverOnly : 1;                               		// 0x060C (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bReevaluatePath : 1;                              		// 0x060C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bReachedMoveGoal : 1;                             		// 0x060C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bReachedCover : 1;                                		// 0x060C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bMovingToCover : 1;                               		// 0x060C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      m_bCheckLOS : 1;                                  		// 0x060C (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned char                                      PendingCoverAction;                               		// 0x0610 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnLastManStanding ( );
	void RemoveIgnoredSquad ( class ABioBaseSquad* oSquad );
	void AddIgnoredSquad ( class ABioBaseSquad* oSquad );
	void RemoveIgnoredTarget ( class AActor* oTarget );
	void AddIgnoredTarget ( class AActor* oTarget );
	class AActor* GetPreferredTarget ( );
	void SetPreferredTarget ( class AActor* oTarget );
	class AActor* GetForcedTarget ( );
	void SetForcedTarget ( class AActor* oTarget );
	void eventGetBehaviourList ( struct TArray<struct FName>* Behaviours );
	bool IsTargetInFiringArc ( class ABioPawn* pPawn, class AActor* pTarget, float fFiringArcAsDot );
	bool HasLOSToTarget ( class AActor* pTarget, float* fTimeOfHit );
	void SetBestTargetCoverAction ( unsigned char BestAction );
	bool CanAttack ( class AActor* oTarget, struct FVector AttackOrigin );
	void NotifyLimbDetached ( unsigned char ePartGroup );
	void Initialize ( );
	void eventOnEnteredPlaypen ( );
	void eventOnLeftPlaypen ( );
	void NotifyUnableToFireFromOpen ( );
	void NotifyCastAt ( class APawn* Attacker, class USFXPower* Power );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void eventNotifyEnemyVisible ( int EnemyIdx, float TimeSinceSeen );
	void eventNotifyNewEnemy ( class APawn* NewEnemy );
	void PawnDied ( class APawn* inPawn );
	float GetRouteCacheDistance ( );
	float GetMoveTimeOutDuration ( );
	void MoveToSlot ( struct FVector vSlotLocation );
	void AdjustToSlot ( int TargetSlotIdx );
	void NotifyReachedCoverSlot ( int SlotIdx );
	void NotifyReachedCover ( );
	bool GetCoverAction ( struct FCoverInfo ChkCover, class AActor* ChkTarget, unsigned long bSetPendingCoverAction, unsigned char* AttackerCoverAction, unsigned char* TargetCoverAction );
	bool IsPeeking ( );
	bool IsLeaning ( );
	bool SetCoverType ( );
	void UnClaimCover ( );
	bool ClaimCover ( struct FCoverInfo NewCover );
	bool eventIsAtCover ( );
	bool HasValidCover ( );
	void eventUnPossess ( );
	void eventPossess ( class APawn* NewPawn, unsigned long bVehicleTransition );
	bool FindNearestOpenLocation ( struct FVector vStartLocation, class APawn* oTarget, int nMaxShellsToCheck, struct FVector* vFoundLocation );
	void PushOntoRouteCache ( class ANavigationPoint* Marker );
	class AActor* GetLastObjectInRouteCache ( class AActor* oMoveTarget );
	class AActor* DecrementRouteCache ( );
	int RouteCacheSize ( );
	void ClearRouteCache ( );
	void RestoreAI ( );
	void ChangeAI ( class UClass* NewAIClass, unsigned long bCacheOldController );
	void DrawDebug ( class ABioHUD* HUD );
	void eventAILog_Internal ( struct FString LogText, struct FName LogCategory, unsigned long bForce );
	void eventTick ( float DeltaTime );
	bool eventPlayerActivate ( class AActor* Target_ );
	void eventLookAtPawn ( class APawn* oLookTarget, int nRank );
	void eventOnLeavingStasis ( );
	void eventOnEnteringStasis ( );
	void OnStreamingLevelLeavingStasis ( );
	void OnStreamingLevelEnteringStasis ( );
	class UBioEpicPawnBehavior* GetPawnBehavior ( class APawn* oPawn );
	void BioSetAdjustLocation ( struct FVector vAdjustLoc );
	void MobTarget ( class AActor* oTarget, float fMoveTolerance );
	bool AdjustSteeringMoveSpeed ( struct FVector vSteering );
	bool GetSteeringVector ( struct FVector* vSteering );
	void SteeringMovement ( );
	class AActor* GetTarget ( );
	bool ExploreMode ( float fDelaySeconds );
	bool ReadyMode ( float fDelaySeconds );
	void eventInvalidateCover ( );
	bool IsValidCover ( struct FCoverInfo* TestCover );
	bool GetPawnCover ( class APawn* ChkPawn, struct FCoverInfo* out_Cover );
	bool GetCover ( class APawn* ChkPawn, struct FCoverInfo* out_Cover );
	bool IsCoverExposedToAnEnemy ( class APawn* TestEnemy, unsigned long bActualLocation, struct FCoverInfo* TestCover, float* out_ExposedScale );
	bool DirectWalkCheck ( class AActor* pTarget, struct FVector* vTarget );
	void PrecisionMoveTo ( struct FVector vLoc, struct FRotator rRot );
	bool IsSwitchingWeapons ( );
	bool ShouldAutoReload ( );
	bool IsReloading ( );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	void NotifyWeaponFired ( class AWeapon* W, unsigned char FireMode );
	bool ShouldStopFiring ( );
	bool ShouldRefire ( );
	void StopFiring ( );
	void eventStartFiring ( );
	void NotifyFireLineBlocked ( );
	void RefireWeapon ( );
	void PollRefireWeapon ( );
	bool FireWeapon ( int NewBurstCount, float NewBurstDelay );
	void ModifyBurstDelay ( class ASFXWeapon* Weapon, float* BurstDelay );
	bool FireWeaponBurst ( );
	bool HandleFireLineObstruction ( );
	bool IsFriendlyBlockingFireLine ( );
	bool IsFireLineObstructed ( );
	void eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void UpdateAccuracy ( );
	void ResetAimInstability ( );
	struct FVector GetAimLocation ( int EnemyIdx, struct FVector StartLoc );
	bool CanFireAt ( class AActor* ChkTarget, struct FVector ViewPt, unsigned long bUseEyeLocation, unsigned long bUseRotation );
	bool HasValidTarget ( class AActor* TestTarget );
	bool HasValidEnemy ( class APawn* TestEnemy );
	bool HasAnyEnemies ( );
	struct FName GetSquadName ( );
	bool eventAddEnemy ( class APawn* NewEnemy, struct FName BroadcastSquad, unsigned long bForceNotice, unsigned long bSkipBroadcast );
	void NotifyNearMiss ( struct FVector HitLocation );
	void CheckNearMiss ( class APawn* Shooter, class AWeapon* W, struct FVector WeapLoc, struct FVector LineDir, struct FVector HitLocation );
	bool CanHearPawn ( class APawn* Heard, float Loudness, struct FName NoiseType );
	void eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FName NoiseType );
	bool CanSeePawn ( class APawn* Seen );
	void eventSeeMonster ( class APawn* Seen );
	void eventSeePlayer ( class APawn* Seen );
	void AddDelayedUpdate ( int EnemyIdx, unsigned char Type, struct FName EventName, float Delay );
	void UpdateAllEnemyInfo ( );
	void eventAutoNotifyEnemy ( );
	void eventAutoAcquireEnemy ( );
	void FillEnemyList ( );
	bool IsMediumRange ( struct FVector TestLocation );
	bool IsShortRange ( struct FVector TestLocation );
	float TimeSinceEnemyVisible ( int Idx );
	void InterpEnemyLocation ( int Idx );
	bool IsEnemyVisibleByIndex ( int Idx );
	void SetKnownEnemyInfo ( int EnemyIdx, class APawn* EnemyPawn, struct FVector EnemyLoc );
	struct FVector GetEnemyLocationByIndex ( int Idx, unsigned char LT );
	struct FVector GetEnemyLocation ( class APawn* TestPawn, unsigned char LT );
	struct FVector GetFireTargetLocation ( unsigned char LT );
	int GetEnemyIndex ( class APawn* TestPawn );
	bool UpdateEnemyInfo ( int Idx, unsigned char Type, struct FName EventName );
	bool IsFriendly ( class AController* Other );
	bool IsHostile ( class AController* Other );
	void MapName_Hench_Teleport ( float X, float Y );
	void MapName_Hench_FailToPath ( float X, float Y );
	void BioOnPawnActionStateChanged ( );
};

// Class SFXGame.SFXAI_NativeBase
// 0x0040 (0x0651 - 0x0611)
class ASFXAI_NativeBase : public ABioAiController
{
public:
	struct TArray<class UClass*>                       CustomActionClasses;                              		// 0x0614 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UBioCustomAction*>             CustomActions;                                    		// 0x0624 (0x0010) [0x0000000004422001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	class ANavigationPoint*                            m_AIGoHereTarget;                                 		// 0x0634 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMantleCostModifier;                            		// 0x063C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastShotAtTime;                                   		// 0x0640 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nEnabledFlags;                                  		// 0x0644 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fNextTimeForReachableCheck;                     		// 0x0648 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bAIGoHereTargetArrived : 1;                     		// 0x064C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bDisableAIOnRagdoll : 1;                        		// 0x064C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bCanSkipNodes : 1;                              		// 0x064C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned char                                      CurrentCustomAction;                              		// 0x0650 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DebugResetNavWeights ( );
	void SetMoveTimer ( struct FVector* vMove );
	void eventUpdateMovementActions ( );
	bool IsSpecialMoveAfterMoveTarget ( );
	bool CanSkipCurrentPathNode ( );
	void SmoothPathMovement ( );
	void MoveTowardLocation ( struct FVector vLocation, float fOffset );
	bool AdjustSteeringMoveSpeed ( struct FVector vSteering );
	bool GetSteeringVector ( struct FVector* vSteering );
	void eventGetActorToFollow ( class AActor** oActor, struct FVector* vLocation );
	bool eventEnableAI ( unsigned long bEnable, int nRequestedBy );
	bool eventCanInterruptCurrentState ( );
	bool eventCanDoCustomAction ( unsigned char CAction );
	bool eventGetCurrentCustomAction ( class UBioCustomAction** pAction );
	bool IsActorInLevel ( class AActor* oActor, class ULevel* oLevel );
	void eventBioClearCrossLevelReferences ( class ULevel* oLevel );
};

// Class SFXGame.BioCheatManager
// 0x008D (0x00FD - 0x0070)
class UBioCheatManager : public UCheatManager
{
public:
	struct TArray<struct FProfileData>                 AllProfiles;                                      		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FString>                      m_aPowerList;                                     		// 0x0080 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     PendingLoadGameDebugName;                         		// 0x0090 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __ProfileHandler__Delegate;                       		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ProfileUtility__Delegate;                       		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      ProfileTarget;                                    		// 0x00C0 (0x0008) [0x0000000000000000]              
	struct FName                                       ProfileSubTarget;                                 		// 0x00C8 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   TopLeft;                                          		// 0x00D0 (0x0008) [0x0000000000000000]              
	int                                                CurrentColumn;                                    		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              ColumnWidth;                                      		// 0x00DC (0x0004) [0x0000000000000000]              
	struct FColor                                      ProfileTitleColor;                                		// 0x00E0 (0x0004) [0x0000000000000000]              
	struct FColor                                      ProfileHeaderColor;                               		// 0x00E4 (0x0004) [0x0000000000000000]              
	struct FColor                                      ProfileTextColor;                                 		// 0x00E8 (0x0004) [0x0000000000000000]              
	struct FColor                                      ProfileHighlightColor;                            		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              ProfilesTime;                                     		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ProfilesDisplayTime;                              		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bProfileHidesGUI : 1;                             		// 0x00F8 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_bShowAngstIcons : 1;                            		// 0x00F8 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bShowAllProfiles : 1;                             		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bShowPowerAiming : 1;                           		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bEnablePowerCooldown : 1;                       		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bShowPowerImpactText : 1;                       		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bShowPowerList : 1;                             		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned char                                      CurrentProfile;                                   		// 0x00FC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UseIconicShepard ( unsigned long ShouldUse );
	void LogImportedME2FaceCode ( );
	void LogImportedME1FaceCode ( );
	void LogFaceCode ( );
	void LogSliders ( );
	void LogMorphHeadInfo ( class UBioMorphFace* MorphHead );
	class UBioMorphFace* GetCurrentPlayerMorphHead ( );
	void LogMorphHead ( struct FName actorName );
	void BioFixStepUp ( float InFactor );
	void BioReportInefficientUnrealScript ( );
	void BioDumpMemory ( );
	void TestString ( struct FString S );
	bool ParseVectorFromFlexibleFormat ( struct FString sInput, struct FVector* vResult );
	void CCFemale ( );
	void CCMale ( );
	void IgnorePlayer ( unsigned long bIgnore );
	void ToggleThreatRadius ( struct FString PawnName );
	void HideLoadingMessage ( );
	void TestLoadingMessage ( float fTime );
	void HideSavingMessage ( );
	void TestSavingMessage ( float fSaveTime );
	void TestPulseFullAmmo ( );
	void DumpSFXObjectPool ( );
	void PauseNotifications ( unsigned long bPause );
	void Test_Notifications ( );
	void PowersWhileVisible ( );
	void HolsterWeapon ( struct FString nmPawn );
	void ResetAlwaysPlay ( );
	void Speak ( unsigned char EventID, struct FString sInstigator, struct FString sRecipient );
	void ShowOnlineMarketplace ( );
	void ASyncSkeletal ( struct FString Param );
	void LogProperties ( );
	void LogActorClasses ( );
	void LogActorUnclassified ( );
	void LogActorArtPlaceables ( );
	void LogActorPrefabInstances ( );
	void LogActorEmitters ( );
	void LogActorSkelMeshes ( );
	void LogActorPawns ( );
	void LogAnimSequences ( );
	void EnableFaceFX ( unsigned long bEnable );
	void ReadAchievements ( int TitleId );
	void UnlockAllGamerpics ( );
	void UnlockAchievementRange ( int Start, int End );
	void UnlockAllAchievements ( );
	void UnlockAchievement ( unsigned char AchievementId );
	void TogglePlayersOnly ( );
	void DebugSetPlotState ( struct FName Type, struct FName plotVarName, float Value );
	void GetPlotVariableID ( struct FName plotVarName );
	void HideWwiseVolumeLocations ( struct FString nmVolume );
	void ShowWwiseVolumeLocations ( struct FString nmVolume );
	void CerberusDLC ( unsigned long bAvail );
	void UpdateHealth ( );
	void UpdateShields ( );
	void UpdateBonusListCache ( );
	void ApplyAchPartyDamageBonus ( );
	void ApplyAchPartyHealthBonus ( );
	class UClass* FindSFXGameEffectClass ( struct FString ClassName );
	void CloseGui ( struct FName HandlerId );
	void OpenGui ( struct FName HandlerId );
	void DisplayTime ( );
	void ProfileDifficulty ( );
	void SaveCommandCallback_LoadGame ( struct FSFXSaveGameCommandEventArgs Args );
	void LoadExternalSave ( struct FString SavePath );
	void LoadGame ( struct FString LoadName );
	void SaveGame_Callback ( struct FSFXSaveGameCommandEventArgs Args );
	void SaveGame ( struct FString SaveName );
	bool ImportAllCareersXenon ( int TargetDeviceId );
	void ImportAllCareers_OnDeviceSelectionComplete ( unsigned long bWasSuccessful );
	void ImportAllCareers ( );
	void SetUgly ( int Ugliness );
	void GetIntimidate ( );
	void GetCharm ( );
	void SetRenegade ( int nPoints );
	void GetRenegade ( );
	void SetParagon ( int nPoints );
	void GetParagon ( );
	void Splitscreen ( );
	void UpdateSplitscreenPlayers ( unsigned long bCreatePlayers );
	void Unreaper ( );
	void TeleportHenchman ( struct FString nmPawn );
	void ShowDebugText ( unsigned long bShow );
	void GUICMD ( struct FName nmPanelTag, struct FString sCmd, struct FString sArg1, struct FString sArg2 );
	void ResetTalents ( struct FString nmPawn );
	void ProfileEffects ( );
	void RemoveEffect ( struct FString nmPawn, struct FString EffectClassName );
	void GiveEffectWithValue ( struct FString nmPawn, struct FString EffectClassName, float Value );
	void GiveEffect ( struct FString nmPawn, struct FString EffectClassName );
	void RemovePower ( struct FString nmPawn, class UClass* PowerClass );
	void SetRank ( struct FString nmPawn, class UClass* PowerClass, float fRank );
	void GivePower ( struct FString nmPawn, struct FString PowerClassName );
	class UClass* FindPowerClass ( struct FString PowerClassName );
	void MapPower ( struct FName PowerName );
	void GetMorinth ( );
	void SetMorinth ( unsigned long Value );
	void GetSpecialist ( );
	void SetSpecialist ( struct FString Henchman );
	void GetFireTeam ( );
	void SetFireTeam ( struct FString Henchman );
	void GetHenchmanAppearance ( struct FString Henchman );
	void SetHenchmanAppearance ( struct FString Henchman, int Value );
	void GetHenchmanAvailable ( struct FString Henchman );
	void SetHenchmanAvailable ( struct FString Henchman, unsigned long Value );
	void GetHenchmanKnown ( struct FString Henchman );
	void SetHenchmanKnown ( struct FString Henchman, unsigned long Value );
	void GetHenchmanDead ( struct FString Henchman );
	void SetHenchmanDead ( struct FString Henchman, unsigned long Value );
	void GetHenchmanSpecialization ( struct FString Henchman );
	void SetHenchmanSpecialization ( struct FString Henchman, unsigned long Value );
	void GetHenchmanLoyalty ( struct FString Henchman );
	void SetHenchmanLoyalty ( struct FString Henchman, unsigned long Value );
	int GetHenchIsDeadGVarIndex ( struct FString Henchman );
	class AActor* eventGetHenchmanByName ( struct FString sName );
	struct FString GetHenchName ( int Henchman );
	int GetHenchIndex ( struct FString Henchman );
	struct FString GetHenchCodename ( struct FString Henchman );
	void DisplayNegotiate ( );
	void MainMenu_ClearNotifications ( );
	void MainMenu_AddCerberusItem ( struct FString i_sTitle, struct FString i_sInfo );
	void BlazeTest_ShowCerberusWelcomeMessage ( );
	void BlazeTest_ShowParentEmail ( );
	void BlazeTest_ShowAccountDemographics ( );
	void BlazeTest_ShowRedeemCode ( );
	void BlazeTest_ShowCerberusIntro ( );
	void BlazeTest_ShowNucleusWelcomeMessage ( );
	void BlazeTest_ShowTermsOfService ( struct FString i_sTermsOfService, unsigned long bTOSChanged );
	void BlazeTest_ShowCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear );
	void BlazeTest_ShowCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bUnderage );
	void BlazeTest_ShowEmailPasswordMismatch ( struct FString Email, struct FString Password );
	void BlazeTest_ShowMessageBox ( struct FString sTitle, struct FString sMessage, struct FString sButton1Text, struct FString sButton2Text, struct FString sButton3Text );
	void BlazeTest_ShowNucleusLogin ( struct FString Email, struct FString Password, int eScreenState );
	void BlazeTest_ShowIntroPage ( );
	void BlazeTest_DestroyGui ( );
	void BlazeTest_CreateGui ( );
	void BlazeTestConsumeCode ( struct FString sCode );
	void BlazeTestJacobStory ( );
	void BlazeTestSetAutoLoginOption ( unsigned long bAutoLogin );
	void BlazeTestSetNucleusSuccessful ( unsigned long bArg, unsigned long bSave );
	void BlazeTestSetCerberusRefused ( unsigned long bArg, unsigned long bSave );
	void BlazeTestSetNucleusRefused ( unsigned long bArg, unsigned long bSave );
	void BlazeTestReconnect ( unsigned char connectMode );
	void BlazeTestAcceptTOS ( unsigned long bAccept );
	void BlazeTestDisconnect ( );
	void ForceEndRagdoll ( );
	void DebugCoverCheck ( );
	void AdjustMediGel ( int nMediGelAdjust );
	void AdjustCredits ( int nCreditAdjust );
	void SetAimAssistValues ( struct FVector2D Adhesion, float AimCorrection, struct FVector2D Friction );
	void PrintMuzzleLoc ( struct FString Target );
	void CamToggleHook ( );
	void CamToggleDebug ( );
	void CamLockCollision ( );
	void ProfileScaleform ( );
	void ProfileTrilogy ( );
	void ProfileME1Import ( );
	void ProfileHenchmen ( );
	void ProfileTicket ( );
	void ProfileAnimTree ( );
	void ProfileLocomotion ( );
	void ProfileLookAt ( );
	void ProfileDesignBudget ( );
	void ProfileCamera ( );
	void ProfileAnim ( );
	void ProfileGestures ( );
	void ProfileConversationBug ( );
	void ProfileConversation ( );
	void EvalCover ( );
	void ProfileDoor ( );
	void ProfileCover ( );
	void ProfileCooldown ( );
	void ToggleAngstIcons ( );
	void ProfileAngst ( );
	void DisplayAngstInfo ( unsigned long bShowIcons, unsigned long bShowProfileData );
	void DisplayAngstWeaponRange ( class ABioPawn* oPawn, unsigned long bShowIcons, unsigned long bShowProfileData );
	void TestTreasure ( );
	void ValidateTechSheet ( class USFXPlotTreasure* oTreasure );
	void ValidateTreasureSheet ( class USFXPlotTreasure* oTreasure );
	void ValidateResourcesSheet ( class USFXPlotTreasure* oTreasure );
	void Validate ( class USFXPlotTreasure* oTreasure );
	void ProfileTech ( );
	void ProfileTreasure ( );
	void UnlockAllTech ( int I );
	void UnlockAllResearch ( unsigned long B );
	void UnlockAllTreasure ( unsigned long B );
	void ProfileBonuses ( );
	void ProfileMultipliers ( );
	void DrawTargetLineUtility ( );
	void DrawAIUtility ( );
	void ProfilePower ( );
	void SetProfileChoseMorinth ( unsigned long ChoseMorinth );
	void ProfileGameSettings ( );
	void ProfileVehicle ( );
	void ProfilePawn ( );
	void ProfileCombatStats ( );
	void ClearCombatStats ( );
	void ProfileCombat ( );
	void LockDifficulty ( float fDifficulty );
	void ProfileSysDesign ( );
	void EmptyInventory ( );
	void ShowBodyDamage ( class ABioPawn* TargetPawn, unsigned char PartGroup );
	void ProfileDamage ( );
	struct FString PrettyFloat ( float F, int decimals );
	void Actors ( class UClass* ActorClass );
	void Playpens ( );
	void SetBoolByID ( int PlotID, unsigned long nValue );
	void SetBoolByName ( struct FName nmVar, unsigned long nValue );
	void SetIntByName ( struct FName nmVar, int nValue );
	void AwardTreasure ( int nTreasureId );
	void Distance ( struct FString nmActor1, struct FString nmActor2 );
	void EnableAllAI ( unsigned long bEnable );
	void EnableAI ( struct FName nmPawn, unsigned long bEnable );
	void SetPowerPercent ( struct FName nmPawn, float fPercent );
	void DebugMoveToGoal ( struct FName nmPawn, struct FName nmGoalActor, float fOffsetDistance );
	void DebugMoveToCover ( struct FName nmPawn, struct FName nmLink, int nSlot );
	void DebugDraw_Ammo ( class ABioHUD* HUD );
	void DebugAmmo ( );
	void DebugDraw_Distance ( class ABioHUD* HUD );
	void DebugDistance ( );
	void DebugDraw_LOD ( class ABioHUD* HUD );
	void DebugLOD ( );
	void DebugDraw_AI ( class ABioHUD* HUD );
	void DebugAI ( struct FName Category );
	void DebugWeapon ( );
	void DebugFriction ( );
	void DebugAdhesion ( );
	void DebugBioticCharge ( );
	void DebugDraw_Health ( class ABioHUD* HUD );
	void DebugHealth ( );
	void DebugZoomSnap ( );
	void DebugVoc ( );
	void RemoveAIFilter ( struct FName nmFilter );
	void AddAIFilter ( struct FName nmFilter );
	void AILog ( struct FString nmPawn, unsigned long bEnable );
	void SetAutoRightUpForceAndTorque ( float fUpLiftForce, float fUprightTorque );
	void SetVehicleCOMOffsetZ ( float fOffsetZ );
	void Mark ( struct FString sComment );
	void ClearDebugLines ( );
	void GameOver ( );
	void eventAddPowerInfoToList ( struct FString sPowerInfo );
	void DisplayPowerList ( class ABioHUD* oHUD );
	void ClearPowerList ( );
	void TogglePowerList ( );
	void SetCurvePixelError ( struct FName nmPanel, float fError );
	void ToggleEdgeAA ( struct FName nmPanel );
	void DisplayPowerImpactText ( class ABioHUD* oHUD );
	void TogglePowerImpact ( );
	void InitPlotManagerValueByIndex ( int nIndex, struct FString sVariableType, float fValue );
	void DumpPlotManagerValueByIndex ( int nIndex, struct FString sVariableType );
	void EnablePowerCooldown ( unsigned long bEnable );
	void UsePower ( struct FName nmPawn, struct FName nmPower );
	void HideStrings ( unsigned long i_bHide );
	void DisplayStringID ( unsigned long i_bDisplay );
	void GrantAllCodex ( );
	void CodexAudit ( );
	void JournalAudit ( );
	void FeignDeath ( struct FName nmPawn, unsigned long B );
	void TogglePowerAiming ( );
	void SkynetSavegame ( struct FString sFilename );
	void SkynetScreenshot ( struct FString sFilename );
	float GetPowerField ( class UBioPawnBehavior* targetBehavior, struct FName PowerName, struct FName FieldName );
	void NotFun ( );
	void SkynetToggleNucleusTelemetry ( );
	void SkynetToggleSessionDisplay ( );
	void SkynetToggleVerboseMode ( );
	void SkynetToggleSilentMode ( );
	void SkynetToggleQAPaths ( );
	void GiveSuperGun ( );
	void SetPlayerSquadMin1Health ( unsigned long B );
	void Min1Health ( unsigned long B );
	void ToggleSFHUD ( );
	void DownloadContent ( );
	void ShowMarketplaceUI ( );
	void GiveItem ( struct FString sTarget, struct FName nmItemLabel );
	void ResetWeapons ( struct FString sTarget );
	class UClass* FindWeaponClass ( struct FString WeaponClassName );
	void BasicWeapons ( );
	void InitFuelEfficiency ( float fEff );
	void InitMaxFuel ( float FMax );
	void InitFuel ( float fAmt );
	void InitAmmo ( int nAmmo );
	void InitProbes ( int nResource );
	void InitMedigel ( int nMedigel );
	void InitPlatinum ( int nResource );
	void InitSalvage ( int nSalvage );
	void InitIridium ( int nResource );
	void InitEezo ( int nResource );
	void InitPalladium ( int nResource );
	void InitCredits ( int nCredits );
	void InitResource ( unsigned char eResourceType, int nAmt );
	void EnableDamage ( unsigned long B );
	class AActor* GetUIWorldActor ( );
	class AActor* GetActorFromString ( struct FString Str );
	void TestFalling ( struct FName nmTarget );
	void TestRagdoll ( struct FString sWhitespaceDelimitedArguments );
	void DebugSpawnPrefab ( int nTestNum );
	void TestPrefab ( int nTestNum );
	void BioTransition ( int nTransition, int nParam );
	void BioLoadState ( int nSaveStateSlot );
	void BioSaveState ( int nSaveStateSlot );
	void GiveTalentPoints ( int nNumPoints );
	void ShowVocInfo ( struct FString PawnTag, struct FString eventStr );
	void DebugVocLine ( struct FString InInstigator, struct FString Recipient, struct FString eventStr );
	void DebugVocSystem ( unsigned long bEnable );
	void GiveXP ( float XPValue );
	void TestConditionals ( );
	void SetVehicleCamRadiusPoint ( int nIndex, float fDegVal, float fScaleVal );
	void BioClearCrossLevelReferences ( class ULevel* pLevel );
	void ForceEnableCCD ( unsigned long bValue );
	void SetGCDebugPackage ( struct FString sPackageName );
	void SetLocation ( struct FString sDestination );
	void OutputBugReportXML ( unsigned long bCreateSavegame, unsigned long bCreateScreenshot );
	void GetLocation ( );
	void StasisParty ( unsigned long bValue );
	void Damage ( struct FString Target, float Amount );
	void KillSelf ( );
	void KillParty ( );
	void KillEnemies ( );
	void KillTarget ( );
	void RenderHUD ( class ABioHUD* InHUD );
	void AT ( struct FName newArea, struct FName StartPoint );
	struct FString GetStateNameByIdx ( class AController* AI, int Idx );
	int GetNumStates ( class AController* AI );
	struct FString GetLatentAction ( class AController* AI );
	void eventSetProfileColumn ( int ColumnIdx );
	float eventGetProfileColumnCoord ( );
	void eventDrawProfileText ( struct FString Text, unsigned long Highlight );
	void eventDrawProfileHeaderText ( struct FString Text );
	void DrawProfileTitle ( );
	void DrawCurrentProfile ( );
	void Profile ( struct FName Keyword, struct FString Target, struct FName SubTarget );
	void DrawProfiles ( );
	void Profiles ( float TimeToDisplay );
	void Slomo ( float T );
	void ResetTrilogyData ( );
	void ResetTrilogyStat ( int ProfileSettingId );
	void IncrementTrilogyStat ( int ProfileSettingId, int Amount );
	void ResetGrinder ( unsigned char Id );
	void IncrementGrinder ( unsigned char Id );
	class ASFXHeavyWeapon* GetHeavyWeapon ( );
	void ProfileUtility ( );
	void ProfileHandler ( );
};

// Class SFXGame.BioPlayerInput
// 0x015E (0x0365 - 0x0207)
class UBioPlayerInput : public UPlayerInput
{
public:
	struct FMap_Mirror                                 InputTimers;                                      		// 0x0208 (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FInterpCurveFloat                           LookStickResponseCurve;                           		// 0x0250 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpCurveFloat                           MouseDampeningCurve;                              		// 0x0264 (0x0014) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FStaticKeyBind>               StaticConsoleBinds;                               		// 0x0278 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FStaticKeyBind>               StaticPCBinds;                                    		// 0x0288 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FStaticKeyBind>               m_aFlyCamConsoleBinds;                            		// 0x0298 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FDebugMenuEntry>              DebugMenu;                                        		// 0x02A8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FDebugMenuEntry>              DebugSubMenu;                                     		// 0x02B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              AxisBuffer[ 0x6 ];                                		// 0x02C8 (0x0018) [0x0000000000000000]              
	float                                              LastAxisBuffer[ 0x6 ];                            		// 0x02E0 (0x0018) [0x0000000000000000]              
	struct FVector                                     AccumulatedAimVector;                             		// 0x02F8 (0x000C) [0x0000000000000000]              
	struct FName                                       m_nmMappedPower;                                  		// 0x0304 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmMappedPower2;                                 		// 0x030C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmMappedPower3;                                 		// 0x0314 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              aGuiStrafe;                                       		// 0x031C (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aGuiBaseY;                                        		// 0x0320 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aGuiTurn;                                         		// 0x0324 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aGuiLookUp;                                       		// 0x0328 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aGuiMouseX;                                       		// 0x032C (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aGuiMouseY;                                       		// 0x0330 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              MoveStickMag;                                     		// 0x0334 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RawJoyUpDown;                                     		// 0x0338 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GuiDeadzone;                                      		// 0x033C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_KeyInputDisabled;                               		// 0x0340 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCurConvSelection;                              		// 0x0344 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fConversationReplyLeftRight;                    		// 0x0348 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fConversationReplyUpDown;                       		// 0x034C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fQuickOrderTime;                                		// 0x0350 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              AccumulatedRotationSpeed;                         		// 0x0354 (0x0004) [0x0000000000000000]              
	int                                                CoverRemapThresholdPC;                            		// 0x0358 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CoverRemapThreshold;                              		// 0x035C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUseMouseDampening : 1;                           		// 0x0360 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned char                                      bWantsToZoom;                                     		// 0x0364 (0x0001) [0x0000000000000004]              ( CPF_Input )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ToggleFlyCam ( );
	void GhostMoveDown ( unsigned long bState );
	void GhostMoveUp ( unsigned long bState );
	void eventCancelReload ( );
	void RemapControlsByRotation ( struct FRotator DeltaRot, float* NewRight, float* NewUp );
	void UpdateViewRotation ( float DeltaTime );
	void eventPlayerInput ( float DeltaTime );
	void PostProcessInput ( float DeltaTime );
	void AdjustMouseSensitivity ( float FOVScale );
	void PreProcessInput ( float DeltaTime );
	float ComputeStickResponse ( float RawStickValue, class USFXCameraInput* Input, float DeltaTime );
	bool IsEnterMenuButtonAssignmentSwapped ( );
	bool IsKeyInputIgnored ( );
	void IgnoreKeyInput ( unsigned long bValue );
	void eventSetInputDisabled ( unsigned long bValue );
	bool eventGetInputDisabled ( );
	void DebugExecInputCommands ( struct FString Cmd, unsigned long bButtonPressed );
	struct FString GetBind ( unsigned long Control, unsigned long Shift, unsigned long Alt, struct FName* Key );
	bool IsCombatEnabled ( );
	bool ActivatePower ( struct FName nmPower, class AActor* oTarget, struct FVector vTargetLocation, struct FVector vOriginalCameraLocation, struct FRotator rOriginalCameraRotation );
};

// Class SFXGame.BioPlayerSelection
// 0x004A (0x00AA - 0x0060)
class UBioPlayerSelection : public UObject
{
public:
	struct TArray<class AActor*>                       m_lSelectionsInRange;                             		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      m_oCurrentSelectionTarget;                        		// 0x0070 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_oLastSelectionTarget;                           		// 0x0078 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_oPendingSelectionTarget;                        		// 0x0080 (0x0008) [0x0000000000000000]              
	class ULensFlareComponent*                         SelectionFlareComp;                               		// 0x0088 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_fPendingSelectionChangedTime;                   		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SelectionFarRange;                                		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SelectionFarAngle;                                		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SelectionCloseRange;                              		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SelectionCloseAngle;                              		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bCurrentSelectionIsCombatTarget : 1;            		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bCurrentSelectionObstructed : 1;                		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned char                                      m_eCurrentSelectionMode;                          		// 0x00A8 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_ePreviousSelectionMode;                         		// 0x00A9 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetSelectionIconMaterialParam ( struct FName Param, int Value );
	bool IsSelectable ( class AActor* oTarget );
	void UpdateSelection ( );
	void FindCurrentSelectionTarget ( );
};

// Class SFXGame.CoverGoalConstraint
// 0x0004 (0x0064 - 0x0060)
class UCoverGoalConstraint : public UObject
{
public:
	int                                                ConstraintEvaluationPriority;                     		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetDumpString ( );
	void eventInit ( class UGoal_AtCover* GoalEvaluator );
};

// Class SFXGame.CovGoal_AvoidEnemies
// 0x0010 (0x0074 - 0x0064)
class UCovGoal_AvoidEnemies : public UCoverGoalConstraint
{
public:
	struct TArray<struct FEnemyData>                   Enemies;                                          		// 0x0064 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventInit ( class UGoal_AtCover* GoalEvaluator );
};

// Class SFXGame.CovGoal_Enemies
// 0x0010 (0x0074 - 0x0064)
class UCovGoal_Enemies : public UCoverGoalConstraint
{
public:
	struct TArray<struct FValidEnemyCacheDatum>        ValidEnemyCache;                                  		// 0x0064 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventInit ( class UGoal_AtCover* GoalEvaluator );
};

// Class SFXGame.CovGoal_GoalProximity
// 0x0010 (0x0074 - 0x0064)
class UCovGoal_GoalProximity : public UCoverGoalConstraint
{
public:
	float                                              BestGoalDist;                                     		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinGoalDist;                                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxGoalDist;                                      		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHardLimits : 1;                                  		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.CovGoal_MovementDistance
// 0x0014 (0x0078 - 0x0064)
class UCovGoal_MovementDistance : public UCoverGoalConstraint
{
public:
	float                                              BestCoverDist;                                    		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxCoverDist;                                     		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinCoverDist;                                     		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinDistTowardGoal;                                		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMoveTowardGoal : 1;                              		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHardConstraint : 1;                              		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIgnoreCoverOutOfRange : 1;                       		// 0x0074 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.CovGoal_TeammateProximity
// 0x0018 (0x007C - 0x0064)
class UCovGoal_TeammateProximity : public UCoverGoalConstraint
{
public:
	float                                              fTeammateMinDistanceSq;                           		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fProximityPenalty;                                		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSquadLeaderProximityPenalty;                     		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTeammateMaxDistanceSq;                           		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxDistancePenalty;                              		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRestrictMaxDistance : 1;                         		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.CovGoal_WeaponRange
// 0x0018 (0x007C - 0x0064)
class UCovGoal_WeaponRange : public UCoverGoalConstraint
{
public:
	float                                              fClosePenalty;                                    		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFarPenalty;                                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fIdealWeaponRange;                                		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              fLongWeaponRange;                                 		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              fShortWeaponRange;                                		// 0x0074 (0x0004) [0x0000000000000000]              
	unsigned long                                      bHardConstraint : 1;                              		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Init ( class UGoal_AtCover* GoalEvaluator );
};

// Class SFXGame.Goal_AtCover
// 0x0038 (0x00B4 - 0x007C)
class UGoal_AtCover : public UPathGoalEvaluator
{
public:
	struct TArray<class UCoverGoalConstraint*>         CoverGoalConstraints;                             		// 0x007C (0x0010) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class ASFXAI_NativeBase*                           AI;                                               		// 0x008C (0x0008) [0x0000000000000000]              
	class ACoverSlotMarker*                            BestMarker;                                       		// 0x0094 (0x0008) [0x0000000000000000]              
	class AActor*                                      TetherActor;                                      		// 0x009C (0x0008) [0x0000000000000000]              
	int                                                BestRating;                                       		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                MaxToRate;                                        		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumMarkersTested;                                 		// 0x00AC (0x0004) [0x0000000000000000]              
	unsigned long                                      MoveTowardsGoalActor : 1;                         		// 0x00B0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetDumpString ( );
	void eventAddCoverGoalConstraint ( class UCoverGoalConstraint* Constraint );
	void RateSlotMarker ( class ACoverSlotMarker* Marker, class APawn* Pawn, int BaseRating );
	void InitNative ( );
	void Init ( class ASFXAI_NativeBase* oAI, class AActor* GoalActor );
};

// Class SFXGame.Goal_AtGoHereCover
// 0x0000 (0x00B4 - 0x00B4)
class UGoal_AtGoHereCover : public UGoal_AtCover
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Goal_AwayFromPosition
// 0x0028 (0x00A4 - 0x007C)
class UGoal_AwayFromPosition : public UPathGoalEvaluator
{
public:
	struct FVector                                     AvoidPos;                                         		// 0x007C (0x000C) [0x0000000000000000]              
	struct FVector                                     AvoidDir;                                         		// 0x0088 (0x000C) [0x0000000000000000]              
	class ANavigationPoint*                            BestNode;                                         		// 0x0094 (0x0008) [0x0000000000000000]              
	int                                                MaxDist;                                          		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                BestRating;                                       		// 0x00A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventRecycle ( );
	bool FleeFrom ( class APawn* P, struct FVector InAvoidPos, int InMaxDist );
};

// Class SFXGame.SFXPath_AvoidClaimedCover
// 0x0000 (0x006C - 0x006C)
class USFXPath_AvoidClaimedCover : public UPathConstraint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool AvoidClaimedCover ( class ABioPawn* P );
};

// Class SFXGame.SFXPath_AvoidFireFromCover
// 0x0018 (0x0084 - 0x006C)
class USFXPath_AvoidFireFromCover : public UPathConstraint
{
public:
	struct TArray<struct FEnemyCoverInfo>              EnemyList;                                        		// 0x006C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ASFXAI_Core*                                 AI;                                               		// 0x007C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Recycle ( );
	bool AvoidFireFromCover ( class APawn* P, unsigned long bCheckPlayerOnly );
};

// Class SFXGame.SFXPath_AvoidPlayer
// 0x0000 (0x006C - 0x006C)
class USFXPath_AvoidPlayer : public UPathConstraint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool AvoidPlayer ( class ABioPawn* Pawn );
};

// Class SFXGame.SFXPath_WithinPlaypen
// 0x0004 (0x0070 - 0x006C)
class USFXPath_WithinPlaypen : public UPathConstraint
{
public:
	unsigned long                                      m_bOnlyAvoidSubtractive : 1;                      		// 0x006C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool WithinPlaypen ( class ABioPawn* P, unsigned long bAvoidSubtractive );
};

// Class SFXGame.BioConversation
// 0x0330 (0x0390 - 0x0060)
class UBioConversation : public UObject
{
public:
	struct FMap_Mirror                                 m_mapPawnProps;                                   		// 0x0060 (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<int>                                 m_StartingList;                                   		// 0x00A8 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct TArray<struct FBioDialogEntryNode>          m_EntryList;                                      		// 0x00B8 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct TArray<struct FBioDialogReplyNode>          m_ReplyList;                                      		// 0x00C8 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct TArray<struct FBioDialogSpeaker>            m_SpeakerList;                                    		// 0x00D8 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct TArray<struct FBioDialogLookat>             m_LookAtList;                                     		// 0x00E8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FBioDialogScript>             m_ScriptList;                                     		// 0x00F8 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct TArray<int>                                 m_lstCurrentReplyIndices;                         		// 0x0108 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sAreaCode;                                      		// 0x0118 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FBioSavedActorPos>            m_aFSPrevPositions;                               		// 0x0128 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sCurrentSubTitle;                               		// 0x0138 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sCurrentFaceFXAnim;                             		// 0x0148 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UFaceFXAnimSet*>               m_aMaleFaceSets;                                  		// 0x0158 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<class UFaceFXAnimSet*>               m_aFemaleFaceSets;                                		// 0x0168 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<class UWwiseBaseSoundObject*>        m_aMaleSoundObjects;                              		// 0x0178 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UWwiseBaseSoundObject*>        m_aFemaleSoundObjects;                            		// 0x0188 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<int>                                 m_aPreLoadNodesVisited;                           		// 0x0198 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class ABioPawn*>                     m_aExtraParticipants;                             		// 0x01A8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UAnimSequence*>                PreloadAnimations;                                		// 0x01B8 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x01C8 (0x0048) UNKNOWN PROPERTY: MapProperty SFXGame.BioConversation.m_CachedLightingState
	struct FBioNextLightingData                        m_tNextLightingOverride;                          		// 0x0210 (0x0058) [0x0000000000002000]              ( CPF_Transient )
	struct FBioNextCamData                             m_tNextCamOverride;                               		// 0x0268 (0x0038) [0x0000000000002000]              ( CPF_Transient )
	struct FBioInterruptReplyInfo                      m_tInterruptInfo;                                 		// 0x02A0 (0x0014) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     vLineOfAction;                                    		// 0x02B4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pConversationOwner;                             		// 0x02C0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pConversationPlayer;                            		// 0x02C8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pSpeaker;                                       		// 0x02D0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_oPreviousSpeaker;                               		// 0x02D8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pListener;                                      		// 0x02E0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioSeqAct_StartConversation*                m_pKismetStart;                                   		// 0x02E8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioStage*                                   m_stage;                                          		// 0x02F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseBaseSoundObject*                       m_pCurrentSound;                                  		// 0x02F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USequence*                                   MatineeSequence;                                  		// 0x0300 (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class UFaceFXAnimSet*                              FaceFXSet;                                        		// 0x0308 (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class UFaceFXAnimSet*                              m_pNonSpeakerFaceFXSet;                           		// 0x0310 (0x0008) [0x0000000000000000]              
	class UWwiseBaseSoundObject*                       m_pPreLoadingSoundCue;                            		// 0x0318 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nResRefID;                                      		// 0x0320 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                m_nCurrentEntry;                                  		// 0x0324 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fStartTime;                                     		// 0x0328 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nSelectedReply;                                 		// 0x032C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCurrentReply;                                  		// 0x0330 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_intimacy;                                       		// 0x0334 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fShowRepliesOffset;                             		// 0x0338 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fShowLastLineOffset;                            		// 0x033C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fNodePlayTimer;                                 		// 0x0340 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fInterruptRange;                                		// 0x0344 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSubtitleTimingModifier;                        		// 0x0348 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fSubtitleTimingMinimum;                         		// 0x034C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fVOPreloadDelayTime;                            		// 0x0350 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nNodeStateFlags;                                		// 0x0354 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRemainingVOLength;                             		// 0x0358 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRemainingLastLineSubtitleDelay;                		// 0x035C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nDelayedReplyChoice;                            		// 0x0360 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      m_colSubtitleColor;                               		// 0x0364 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fAudioHitchBuffer;                              		// 0x0368 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPreLoadTimer;                                  		// 0x036C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPreLoadStartDelay;                             		// 0x0370 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_srPreLoadedStrRef;                              		// 0x0374 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fDefaultInterruptWindowDuration;                		// 0x0378 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              m_fDefaultInterruptWindowStart;                   		// 0x037C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                m_nTeleLinesHit;                                  		// 0x0380 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nTeleLinesSkipped;                              		// 0x0384 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTeleAverageSkipTime;                           		// 0x0388 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bOneLinerConversation : 1;                      		// 0x038C (0x0004) [0x0000000000020001] [0x00000001] ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bUseFixedCameras : 1;                             		// 0x038C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bConversationEnded : 1;                         		// 0x038C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bHasAttachedCameraTrack : 1;                    		// 0x038C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bHasAttachedDOFTrack : 1;                       		// 0x038C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bSkipRequested : 1;                             		// 0x038C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bForceUnskippable : 1;                          		// 0x038C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bDisplayNonAmbientName : 1;                     		// 0x038C (0x0004) [0x0000000000006000] [0x00000080] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bSkipProtectionDisabled : 1;                    		// 0x038C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bAmbient : 1;                                   		// 0x038C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bPutPlayerIntoCombat : 1;                       		// 0x038C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      m_bDisableTargeting : 1;                          		// 0x038C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      m_bSkippable : 1;                                 		// 0x038C (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      m_bFailed : 1;                                    		// 0x038C (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      m_bInterrupted : 1;                               		// 0x038C (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      m_bKismetInitiated : 1;                           		// 0x038C (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      m_bConversationOver : 1;                          		// 0x038C (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      m_bEnableLookAtWithStage : 1;                     		// 0x038C (0x0004) [0x0000000000006000] [0x00020000] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bPlayerIsFemale : 1;                            		// 0x038C (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      m_bNoGestures : 1;                                		// 0x038C (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      m_bForceShowReplies : 1;                          		// 0x038C (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      m_bCleanupNeeded : 1;                             		// 0x038C (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      m_bEarlyTermination : 1;                          		// 0x038C (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      m_bRemoveWeapons : 1;                             		// 0x038C (0x0004) [0x0000000000006000] [0x00800000] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bPlayingNonTextLine : 1;                        		// 0x038C (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      m_bNextLinePreLoadEnabled : 1;                    		// 0x038C (0x0004) [0x0000000000006000] [0x02000000] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bPlayerSexIsValid : 1;                          		// 0x038C (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      m_bVerifyPreLoadingCorrectness : 1;               		// 0x038C (0x0004) [0x0000000000006000] [0x08000000] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bAutoAdvanceSkippableLinesWithNoVO : 1;         		// 0x038C (0x0004) [0x0000000000006000] [0x10000000] ( CPF_Transient | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDisableCamera ( unsigned long bDisableCamera );
	bool SelectInterruption ( );
	bool NeedToDisplayInterrupt ( );
	void SetCustomInterruptWindow ( float fStart, float fDuraton );
	void EnableCustomInterruptWindow ( );
	bool TickInterruptionData ( float fDelta );
	void MissingLipSync ( );
	void MissingVO ( );
	unsigned char GetReplyGUIStyle ( int nIndex );
	bool FinishEntryNode ( int nEntryIndex );
	bool NeedToDisplayReplies ( );
	void StopScript ( struct FString Script );
	int GetReplyExportID ( int nIndex );
	int GetReplyCategory ( int nIndex );
	struct FString GetReplyParaphraseText ( int nIndex );
	struct FString GetReplyText ( int nIndex, unsigned long bParse );
	struct FString GetEntryText ( unsigned long bParse );
	class AActor* GetSpeaker ( int nIndex );
	void UpdateFacing ( );
	void UpdateLookAtTargets ( float fDeltaT );
	void UpdateLookAtList ( class ABioPawn* pBioPawn );
	void switchToAmbient ( unsigned long bWasNonAmbient );
	bool IsAmbient ( );
	bool WaitingForReply ( );
	bool SkipNode ( );
	bool FinishSelectedReply ( );
	bool QueueReply ( int nReply );
	bool SelectReply ( int nReply );
	bool UpdateConversation ( float fDeltaT );
	void EndConversation ( );
	bool StartConversation ( class AActor* aOwner, class AActor* aPlayer );
	class AActor* GetConversationObject ( int nObjectIndex, unsigned long bNoisyErrors );
	void SetPositionRotator ( class AActor* pActor, struct FVector Position, struct FRotator facing );
};

// Class SFXGame.BioStage
// 0x00BE (0x0348 - 0x028A)
class ABioStage : public AActor
{
public:
	struct FMap_Mirror                                 m_mapPlacement;                                   		// 0x028C (0x0048) [0x0000000000023001]              ( CPF_Edit | CPF_Native | CPF_Transient | CPF_EditConst )
	struct TArray<struct FBioStageCameraCustom>        m_CameraCustomList;                               		// 0x02D4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     m_vOldPositon;                                    		// 0x02E4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x02F0 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioStageType*                               Type;                                             		// 0x02F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_sSpeakerTag;                                    		// 0x0300 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_sListenerTag;                                   		// 0x0308 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_sCurrentCamera;                                 		// 0x0310 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              m_fHeightAdjust;                                  		// 0x0318 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fStageZ;                                        		// 0x031C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSpeakerFeetZ;                                  		// 0x0320 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSpeakerEyeHeight;                              		// 0x0324 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCameraHeightDelta;                             		// 0x0328 (0x0004) [0x0000000000000000]              
	float                                              m_fCameraPitchDelta;                              		// 0x032C (0x0004) [0x0000000000000000]              
	float                                              m_fCameraYawDelta;                                		// 0x0330 (0x0004) [0x0000000000000000]              
	float                                              m_fCameraFOVDelta;                                		// 0x0334 (0x0004) [0x0000000000000000]              
	float                                              m_fCameraNearPlaneDelta;                          		// 0x0338 (0x0004) [0x0000000000000000]              
	float                                              m_fCameraFocusInnerRadiusDelta;                   		// 0x033C (0x0004) [0x0000000000000000]              
	float                                              m_fCameraFocusDistanceDelta;                      		// 0x0340 (0x0004) [0x0000000000000000]              
	unsigned long                                      Enabled : 1;                                      		// 0x0344 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDoHeightAdjustment : 1;                        		// 0x0344 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bLookAtActive : 1;                              		// 0x0344 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bDOFActive : 1;                                 		// 0x0344 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bDisableProceduralCameraAdjust : 1;             		// 0x0344 (0x0004) [0x0000000000006000] [0x00000010] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bPositionLocked : 1;                            		// 0x0344 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ProfileStage ( class ABioHUD* HUD );
	void SetActorToNode ( class AActor* aInput, struct FName nmNodeName );
};

// Class SFXGame.BioCustomAction
// 0x0031 (0x0091 - 0x0060)
class UBioCustomAction : public UObject
{
public:
	struct FVector                                     PreciseDestination;                               		// 0x0060 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FRotator                                    PreciseRotation;                                  		// 0x006C (0x000C) [0x0000000000000002]              ( CPF_Const )
	class ABioPawn*                                    oPawn;                                            		// 0x0078 (0x0008) [0x0000000000000000]              
	float                                              SpeedModifier;                                    		// 0x0080 (0x0004) [0x0000000000004003]              ( CPF_Edit | CPF_Const | CPF_Config )
	float                                              LastCanDoCustomActionTime;                        		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PreciseRotationInterpolationTime;                 		// 0x0088 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bLockPawnRotation : 1;                            		// 0x008C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bBreakFromCover : 1;                              		// 0x008C (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bDisableMovement : 1;                             		// 0x008C (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bDisableLook : 1;                                 		// 0x008C (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bDisableCollision : 1;                            		// 0x008C (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bDisablePhysics : 1;                              		// 0x008C (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bDisableLeftHandIK : 1;                           		// 0x008C (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      bIgnoreDamage : 1;                                		// 0x008C (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bNotifyKnockedOutOfCover : 1;                     		// 0x008C (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	unsigned long                                      bCameraFocusOnPawn : 1;                           		// 0x008C (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bLastCanDoCustomAction : 1;                       		// 0x008C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bIgnoreInputForCustomAction : 1;                  		// 0x008C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bReachPreciseDestination : 1;                     		// 0x008C (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bReachedPreciseDestination : 1;                   		// 0x008C (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	unsigned long                                      bReachPreciseRotation : 1;                        		// 0x008C (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned long                                      bReachedPreciseRotation : 1;                      		// 0x008C (0x0004) [0x0000000000000002] [0x00008000] ( CPF_Const )
	unsigned long                                      bForcePrecisePosition : 1;                        		// 0x008C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned char                                      VocalizationEvent;                                		// 0x0090 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTickCustomAction ( float fDeltaTime );
	void PlayForceFeedback ( class UForceFeedbackWaveform* FF );
	void PlayScreenShake ( struct FScreenShakeStruct Shake );
	void RootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta );
	void RootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void TogglePawnCollision ( unsigned long bToggleOn );
	void eventReachedPrecisePosition ( );
	void SetFacePreciseRotation ( struct FRotator RotationToFace, float InterpolationTime );
	void SetReachPreciseDestination ( struct FVector DestinationToReach );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void AnimNotify ( class UAnimNodeSequence* SeqNode, class UBioAnimNotify_CustomAction* NotifyObject );
	bool NotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	void PawnLeftCover ( );
	void ContinueCustomAction ( );
	void PauseCustomAction ( );
	void StopCustomAction ( );
	void StartCustomAction ( );
	bool InternalCanDoCustomAction ( );
	bool CanDoCustomAction ( );
};

// Class SFXGame.BioCustomAction_KroganCharge
// 0x0045 (0x00D6 - 0x0091)
class UBioCustomAction_KroganCharge : public UBioCustomAction
{
public:
	struct TArray<class AActor*>                       m_oHitTargets;                                    		// 0x0094 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FBodyStance                                 BS_Start;                                         		// 0x00A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FBodyStance                                 BS_Miss;                                          		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FBodyStance                                 BS_Hit;                                           		// 0x00BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oChargeTarget;                                  		// 0x00C8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bHitTarget : 1;                                 		// 0x00D0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      m_ChargeAction;                                   		// 0x00D4 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_NextAction;                                     		// 0x00D5 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void StartCustomAction ( );
	bool PlayHitAnim ( class AActor* oHitTarget );
	struct FBodyStance GetBodyStance ( unsigned char eAction );
};

// Class SFXGame.BioDefine
// 0x0000 (0x0060 - 0x0060)
class UBioDefine : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioFSM
// 0x0010 (0x0070 - 0x0060)
class UBioFSM : public UObject
{
public:
	struct TArray<class UBioState*>                    PlaceableStates;                                  		// 0x0060 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UBioState* GetStateByIndex ( int Index );
	void DEBUG_DumpStates ( class ABioPlayerController* BPC );
	class UBioState* eventGetState ( struct FName RequestedState );
};

// Class SFXGame.BioFSMComponent
// 0x0041 (0x00A1 - 0x0060)
class UBioFSMComponent : public UObject
{
public:
	struct FScriptDelegate                             OnTransition;                                     		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnTransitionDelegate__Delegate;                 		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioFSM*                                     FSMData;                                          		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioState*                                   CurrentState;                                     		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioState*                                   PendingState;                                     		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioTransition*                              PendingTransition;                                		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PendingStateChange;                               		// 0x00A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsTransitioning ( );
	void eventCallTransitionDelegate ( struct FName From, struct FName To );
	void eventTransitionStarted ( );
	bool eventHasState ( struct FName ToState );
	class UBioState* SetState ( struct FName ToState, struct FName NamedTransition, unsigned long IgnoreTransition, unsigned long bForceStateNow );
	class UBioTransition* eventGetTransition ( struct FName ToState, struct FName NamedTransition );
	void TransitionComplete ( );
	void OnTransitionDelegate ( struct FName FromState, struct FName ToState, unsigned long bCallCPP );
};

// Class SFXGame.BioState
// 0x0024 (0x0084 - 0x0060)
class UBioState : public UObject
{
public:
	struct TArray<class UBioTransition*>               StateTransitions;                                 		// 0x0060 (0x0010) [0x0000000004420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	struct FName                                       StateName;                                        		// 0x0070 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FName                                       AnimationName;                                    		// 0x0078 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bFinishAnimationBeforeTransition : 1;             		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UBioTransition* GetTransition ( struct FName ToState, struct FName NamedTransition );
	bool HasTransitionTo ( struct FName ToState, struct FName NamedTransition );
};

// Class SFXGame.BioTransition
// 0x0018 (0x0078 - 0x0060)
class UBioTransition : public UObject
{
public:
	struct FName                                       TransitionToState;                                		// 0x0060 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FName                                       TransitionOptionalName;                           		// 0x0068 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FName                                       AnimationName;                                    		// 0x0070 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEventNotifier
// 0x0098 (0x00F8 - 0x0060)
class UBioEventNotifier : public UObject
{
public:
	struct TArray<struct FBioDisplayNotice>            m_lstNotices;                                     		// 0x0060 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FBioTalentNotice>             m_lstTalentNotices;                               		// 0x0070 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     sWwiseMusicVolumeRTPCName;                        		// 0x0080 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     sWwiseParaReneRTPCName;                           		// 0x0090 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class ABioPawn*                                    TalentNoticeInputCharacter;                       		// 0x00A0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioSFHandler_MessageBox*                    m_oTalentNotifyBoxHandler;                        		// 0x00A8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                srTalentOk;                                       		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srTalentSkipRemainder;                            		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srLevelUp;                                        		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srQuestAdded;                                     		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srQuestUpdated;                                   		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srQuestCompleted;                                 		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srCodexEntry;                                     		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srParagonReceived;                                		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srRenegadeReceived;                               		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srMedigel;                                        		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSalvage;                                        		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srMap;                                            		// 0x00DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srAbility;                                        		// 0x00E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nParagonPlotVar;                                  		// 0x00E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nRenegadePlotVar;                                 		// 0x00E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nWwiseMusicVolumeRTPCPlotVar;                     		// 0x00EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fPassivePopupDisplayTime;                         		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bNoticesNotarized : 1;                          		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bEnabled : 1;                                   		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bTalentNoticeReady : 1;                         		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bHUDAcknowledgedTalentNotify : 1;               		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bDissableTallentNotifications : 1;                		// 0x00F4 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RemoveTalentNotify ( class ABioPawn* oCharacter );
	void AddTalentNotifyStringRef ( int nTalentIcon, int srTalentName, class ABioPawn* pPawn );
	void AddTalentNotifyString ( int nTalentIcon, struct FString sTalentName, class ABioPawn* pPawn );
	void OnTalentNoticeInput ( unsigned long bAPressed, int nContext );
	bool PendingTalentNotify ( class ABioPawn* oCharacter );
	void ShowTalentNotify ( class ABioPawn* oCharacter );
	void AddNotice ( int nType, int nContext, int nTimeToLive, int nIconIndex, int srTitle, struct FString strTitle, int nQuantity, int nQuantMin, int nQuantMax );
	void NotarizeNotices ( );
	void HasListChanged ( );
	void RetrieveNotices ( struct TArray<struct FBioDisplayNotice>* lstNotices );
};

// Class SFXGame.BioSFScreenTip
// 0x000C (0x006C - 0x0060)
class UBioSFScreenTip : public UObject
{
public:
	int                                                Default_Body;                                     		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PC_Body;                                          		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PS3_Body;                                         		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXModule_Locomotion
// 0x008D (0x00F9 - 0x006C)
class USFXModule_Locomotion : public USFXModule
{
public:
	struct FRotator                                    PawnDesiredRotation;                              		// 0x006C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     PawnAcceleration;                                 		// 0x0078 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     MoveStartInitialPos;                              		// 0x0084 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    Pawn;                                             		// 0x0090 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNode*                                   AnimNode;                                         		// 0x0098 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              MovingLeanYaw[ 0x2 ];                             		// 0x00A0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                StateTag;                                         		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TickTag;                                          		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PawnMoveStartFwdAngle;                            		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PawnMoveStartFwdSpeed;                            		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PawnMoveStartFwdAccelerationTimer;                		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PawnMoveStartSidewayAccelerationTimer;            		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PawnMoveStartStopTimerThreshold;                  		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PawnMoveStandTurnDistanceThreshold;               		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PawnMoveStandTurnRotRate;                         		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PawnMoveStopTimerThreshold;                       		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PawnMoveStopRestartTimerThreshold;                		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StateTimer;                                       		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StateSpeed;                                       		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MovingLean;                                       		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MovingIncline;                                    		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveStartInitialYaw;                              		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveStartRelYaw;                                  		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveStartLastYaw;                                 		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveStartIdleTimer;                               		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      MoveStartStopping : 1;                            		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      CurrentState;                                     		// 0x00F8 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetAcceleration ( struct FVector Acceleration );
	void SetDesiredRotation ( struct FRotator DesiredRotation );
};

// Class SFXGame.SFXProjectile_Trajectory
// 0x0000 (0x02F0 - 0x02F0)
class ASFXProjectile_Trajectory : public AProjectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void eventDestroyed ( );
	void Tick ( float DeltaTime );
	void PostBeginPlay ( );
	void RunPhysicsSimulationTilEnd ( float GrenadeLifeSpan );
};

// Class SFXGame.SFXWeapon_NativeBase
// 0x0008 (0x03D5 - 0x03CD)
class ASFXWeapon_NativeBase : public AWeapon
{
public:
	unsigned long                                      bWeaponExpanded : 1;                              		// 0x03D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInstantExpansion : 1;                            		// 0x03D0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceReplayAnimation : 1;                        		// 0x03D0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDrawingWeaponBlendOut : 1;                       		// 0x03D0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bReloadWeaponBlendOut : 1;                        		// 0x03D0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bIsZoomed : 1;                                    		// 0x03D0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned char                                      VocalizationType;                                 		// 0x03D4 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventCalculateCoverLeanOutOffset ( unsigned char Direction, unsigned char Type, struct FVector* Offset );
	void eventPrecacheVFX ( );
	void FireAmmunition ( );
	bool IsZoomed ( );
};

// Class SFXGame.BioGestChainNode
// 0x000C (0x006C - 0x0060)
class UBioGestChainNode : public UObject
{
public:
	class UBioEvtSysTrackGesture*                      m_pGestTrack;                                     		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                m_nIndex;                                         		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGestChainTree
// 0x0010 (0x007C - 0x006C)
class UBioGestChainTree : public UBioGestChainNode
{
public:
	struct TArray<class UBioGestChainNode*>            m_aChildren;                                      		// 0x006C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGestureAnimSetMgr
// 0x0060 (0x00C0 - 0x0060)
class UBioGestureAnimSetMgr : public UObject
{
public:
	struct FMap_Mirror                                 m_mapAnimSetRefCount;                             		// 0x0060 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct TArray<struct FBioGestDataKey>              m_aNewGestureData;                                		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fGestureBlendTime;                              		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nGestureState;                                  		// 0x00BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetPoseRMRotation ( unsigned long bEnabled );
};

// Class SFXGame.BioGestureRulesData
// 0x0190 (0x01F0 - 0x0060)
class UBioGestureRulesData : public UObject
{
public:
	struct FMultiMap_Mirror                            m_mapARPUCurves;                                  		// 0x0060 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 m_mapPoses;                                       		// 0x00A8 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FMultiMap_Mirror                            m_mapTransitions;                                 		// 0x00F0 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FMultiMap_Mirror                            m_mapGestures;                                    		// 0x0138 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct TArray<struct FBioARPUBodyConfig>           m_aARPUItems;                                     		// 0x0180 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FBioGestPose>                 m_aPosesTemp;                                     		// 0x0190 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FBioGestTransition>           m_aTransTemp;                                     		// 0x01A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FBioGestGesture>              m_aGestTemp;                                      		// 0x01B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FName>                        m_aGestureGroups;                                 		// 0x01C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FName>                        m_aPoseGroups;                                    		// 0x01D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       m_nmDefaultGestGroup;                             		// 0x01E0 (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmDefaultPoseGroup;                             		// 0x01E8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGestureRuntimeData
// 0x00C8 (0x0128 - 0x0060)
class UBioGestureRuntimeData : public UObject
{
public:
	struct FMap_Mirror                                 m_mapAnimSetOwners;                               		// 0x0060 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 m_mapMeshProps;                                   		// 0x00A8 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FBioWeaponPropData                          m_tWeaponPropData;                                		// 0x00F0 (0x0028) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sGlobalDefaultPose;                             		// 0x0118 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGestures
// 0x0018 (0x0078 - 0x0060)
class USFXGestures : public UObject
{
public:
	struct FString                                     GesturesPackageName;                              		// 0x0060 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UBioGestureRuntimeData*                      m_pRuntimeData;                                   		// 0x0070 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LoadRuntimeData ( );
};

// Class SFXGame.SFXSeqAct_CaptureSceneTexture
// 0x0010 (0x0108 - 0x00F8)
class USFXSeqAct_CaptureSceneTexture : public USequenceAction
{
public:
	class UTextureRenderTarget2D*                      Destination;                                      		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                ViewId;                                           		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FilterFactor;                                     		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGUIBox
// 0x0050 (0x00B0 - 0x0060)
class UBioGUIBox : public UObject
{
public:
	struct FCanvasProperties                           m_canvasProperties;                               		// 0x0060 (0x0024) [0x0000000000000000]              
	class UFont*                                       m_font;                                           		// 0x0084 (0x0008) [0x0000000000000000]              
	struct FColor                                      m_colorBackground;                                		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      m_colorForeground;                                		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nCanvasWidth;                                   		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                m_nCanvasHeight;                                  		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              m_fX;                                             		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              m_fY;                                             		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              m_fWidth;                                         		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              m_fHeight;                                        		// 0x00A8 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bComputeDrawParameters : 1;                     		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Draw ( class UCanvas* oCanvas );
	void SetFont ( class UFont* Font );
	void PopCanvasProperties ( class UCanvas* oCanvas );
	void PushCanvasProperties ( class UCanvas* oCanvas );
	void RenderContent ( class UCanvas* oCanvas );
	void ComputeDrawParameters ( class UCanvas* oCanvas );
	bool ShouldRender ( );
};

// Class SFXGame.BioDebugMenu
// 0x0024 (0x00D4 - 0x00B0)
class UBioDebugMenu : public UBioGUIBox
{
public:
	struct TArray<struct FString>                      m_aMenuEntries;                                   		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColor                                      m_colorSelected;                                  		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nSelectedEntry;                                 		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                m_nScrollPosition;                                		// 0x00C8 (0x0004) [0x0000000000000000]              
	int                                                m_nMaxScrollPosition;                             		// 0x00CC (0x0004) [0x0000000000000000]              
	int                                                m_nLineCount;                                     		// 0x00D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ScrollUp ( );
	void ScrollDown ( );
	void RenderContent ( class UCanvas* oCanvas );
	void ComputeDrawParameters ( class UCanvas* oCanvas );
	bool ShouldRender ( );
	void Clear ( );
	void AddEntry ( struct FString sMenuEntry );
};

// Class SFXGame.BioMessageBox
// 0x0030 (0x00E0 - 0x00B0)
class UBioMessageBox : public UBioGUIBox
{
public:
	struct TArray<struct FString>                      m_aRawText;                                       		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FString>                      m_aWrappedText;                                   		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nScrollPosition;                                		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                m_nLineCount;                                     		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                m_nMaxScrollPosition;                             		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              StartDrawTime;                                    		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PageUp ( );
	void PageDown ( );
	void ScrollUp ( );
	void ScrollDown ( );
	void RenderContent ( class UCanvas* oCanvas );
	bool eventHasText ( );
	void SetTextArray ( struct TArray<struct FString>* aText );
	void SetText ( struct FString S );
	bool ShouldRender ( );
	void ComputeDrawParameters ( class UCanvas* oCanvas );
};

// Class SFXGame.BioHUD
// 0x00A0 (0x0664 - 0x05C4)
class ABioHUD : public AHUD
{
public:
	struct TArray<struct FScriptDelegate>              DebugDrawList;                                    		// 0x05C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DebugDraw__Delegate;                            		// 0x05D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      m_oActorForInfoDisplay;                           		// 0x05E4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UMaterial*                                   oGUIMaterial;                                     		// 0x05EC (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  SafeAreaTexture;                                  		// 0x05F4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioMessageBox*                              m_messageBox;                                     		// 0x05FC (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioDebugMenu*                               m_oDebugMenu;                                     		// 0x0604 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              m_fNextTimeToShowCover;                           		// 0x060C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCanvasOrgX;                                    		// 0x0610 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCanvasOrgY;                                    		// 0x0614 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SafeAreaRatioX;                                   		// 0x0618 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SafeAreaRatioY;                                   		// 0x061C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nFontTestType;                                    		// 0x0620 (0x0004) [0x0000000000000000]              
	float                                              m_fSafeXOffset;                                   		// 0x0624 (0x0004) [0x0000000000000000]              
	float                                              m_fSafeYOffset;                                   		// 0x0628 (0x0004) [0x0000000000000000]              
	int                                                m_textX;                                          		// 0x062C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_textY;                                          		// 0x0630 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_lineHeight;                                     		// 0x0634 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_charWidth;                                      		// 0x0638 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_leftColumnX;                                    		// 0x063C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_rightColumnX;                                   		// 0x0640 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_farrightColumnX;                                		// 0x0644 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_topRowY;                                        		// 0x0648 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastSaveStartTime;                                		// 0x064C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              LastSaveEndTime;                                  		// 0x0650 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FColor                                      YellowColor;                                      		// 0x0654 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      OrangeColor;                                      		// 0x0658 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      DarkGreyColor;                                    		// 0x065C (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      m_bShowPlayerLocation : 1;                        		// 0x0660 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDisplayActorInfo : 1;                          		// 0x0660 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bLockActorInfo : 1;                             		// 0x0660 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bShowCover : 1;                                 		// 0x0660 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bShowCoverRotation : 1;                         		// 0x0660 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bShowCoverNames : 1;                            		// 0x0660 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bDisplaySafeArea : 1;                             		// 0x0660 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bFontTest : 1;                                    		// 0x0660 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bDisplayingSave : 1;                              		// 0x0660 (0x0004) [0x0000000000002001] [0x00000100] ( CPF_Edit | CPF_Transient )
	unsigned long                                      m_bUseGeneratedItemNames : 1;                     		// 0x0660 (0x0004) [0x0000000000006000] [0x00000200] ( CPF_Transient | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsFinalReleaseBuild ( );
	void eventDisplayNavWeight ( class AActor* ProfileTarget, class ANavigationPoint* Nav );
	void DrawAngstIcon ( class AActor* oActor );
	void ShowReachSpecs ( struct FName nmNavigationPoint );
	void DisplayRouteInfo ( class APawn* pPawn, struct FColor PathColor, unsigned long bDrawPathOnly );
	void UpdateCoverNames ( );
	void ShowCoverNames ( );
	void UpdateCover ( unsigned long bShowRotation );
	void ShowCover ( unsigned long bShowRotation );
	void UpdateActorInfo ( );
	void HideLocation ( );
	void ShowLocation ( );
	void SetActorForActorInfo ( struct FName nmActor );
	void LockActorInfo ( );
	void DisplayActorInfo ( );
	void SetGUITexture ( struct FString sMaterial );
	void eventDrawTextWithColor ( struct FString valuename, struct FString Value, struct FColor LabelColor, struct FColor DataColor );
	void eventDrawText ( struct FString valuename, struct FString Value, struct FColor LabelColor, struct FColor DataColor );
	void DrawCircle ( float fX, float fY, float Radius );
	void CDrawSquare ( int nSize );
	bool PointInsideBox ( float X, float Y, float CX, float CY, float nSize );
	void GetBoxCoordsFromAngle ( float X, float Y, float Size, float Angle, float* XSt, float* YSt );
	bool BoxesIntersecting ( int X1, int Y1, int nSize1, int X2, int Y2, int nSize2 );
	void CDrawVertLine ( float X, float Y1, float Y2 );
	void CDrawHorzLine ( float X1, float X2, float Y );
	void ConnectBoxes ( float X1, float Y1, float nSize1, float X2, float Y2, float nSize2 );
	struct FString LoadTestTextStringFromFile ( );
	float SmartWrapStringToArray ( struct FString sText, int nTextWidth, struct TArray<struct FString>* OutArray );
	void DrawFakeShadowText ( int X, int Y, struct FColor DrawColor, struct FString sText );
	void DrawEngineHUD ( );
	bool IsDrawing ( struct FScriptDelegate DebugDrawFunc );
	void SetDebugDraw ( struct FScriptDelegate DebugDrawFunc );
	void DebugDraw ( class ABioHUD* H );
	void DrawDebugCrossHair ( );
	void DrawSelection ( );
	void DrawHUD ( );
	void eventPostRender ( );
	void DoFontTest ( );
	void DrawTestFontString ( int Y, struct FString sFontName, struct FString sTestString );
	void DrawTestFont ( int Y, struct FString sFontName, int nPoint, unsigned long bScaled, float fScale );
	void ToggleSafeArea ( );
	void DisplaySafeArea ( );
	void eventProfileConversationExtra ( class UBioConversation* oCurConv );
	struct FVector eventProxyCanvasProject ( struct FVector V );
	void eventProxyCanvasDrawMaterialTile ( class UMaterialInstanceConstant* Mat, float XL, float YL );
	void eventProxyCanvasSetPos ( float X, float Y );
	struct FLinearColor eventProxyMakeLinearColor ( float R, float G, float B, float A );
	void ViewportDeProject ( class ULocalPlayer* LocalPlayerOwner, struct FVector ScreenLocation, struct FVector* OutLocation, struct FVector* OutDirection );
	int DisplaySquadMember ( int X, int Y, class UBioPawnBehavior* targetBehavior, class ABioPawn* oBP );
	int DisplaySquad_QA ( int X, int Y, class UBioPawnBehavior* targetBehavior );
	int DisplayStateStack ( int X, int Y, class ABioAiController* oController );
	struct FName GetNameOfEnumEntry ( int nIndex, struct FString EnumName );
	void DisplayIcon ( class UMaterialInstanceConstant* oMatInstance, struct FVector vWorldLocation, unsigned long bScaleWithDistance, float fMinTextureSize, float fMaxTextureSize, float fScaleRange );
	void ProfileDesignBudgetGeneral ( );
	void ProfileLookAt ( class UBioActorBehavior* targetActorBehavior );
	void ProfileCover ( class UBioActorBehavior* targetActorBehavior );
	void ProfileAnim ( class UBioActorBehavior* targetActorBehavior );
	void ProfileGestures ( class UBioActorBehavior* targetActorBehavior );
	void ProfileConversation ( class UBioActorBehavior* targetActorBehavior );
	void ProfileConversationBug ( class UBioActorBehavior* targetActorBehavior );
};

// Class SFXGame.BioSubtitles
// 0x0022 (0x0082 - 0x0060)
class UBioSubtitles : public UObject
{
public:
	struct FString                                     m_sSubtitle;                                      		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColor                                      m_FontColor;                                      		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeRemaining;                                 		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              m_FontSize;                                       		// 0x0078 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bAlert : 1;                                     		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bSubtitleVisible : 1;                           		// 0x007C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bNewSubtitle : 1;                               		// 0x007C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      m_DefaultRenderMode;                              		// 0x0080 (0x0001) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      m_CurrentRenderMode;                              		// 0x0081 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void MoveTopBottomElements ( float fPixelOffset );
	void Enforce16x9 ( );
	void HideSubtitle ( );
	void ShowSubtitle ( struct FString strSubtitle, int nRenderMode, int nColor, int nAlpha, unsigned long bAlert );
	void UpdateSubtitles ( float fDeltaT, unsigned long bAllowSubtitle, unsigned long bIsConversationActive );
	bool GetAlert ( );
	void SetAlert ( unsigned long bAlert );
	struct FColor GetFontColor ( );
	void SetFontColor ( struct FColor oColor );
	struct FString GetSubtitle ( );
	void SetSubtitle ( struct FString strSubtitle, int nSize );
	void ClearHistory ( );
	unsigned char SetRenderMode ( unsigned char RenderMode, unsigned long bForceDisplay );
	unsigned char GetRenderMode ( );
	bool HasSubtitle ( );
	void DisplaySubtitle ( struct FString sSubtitle, float fDuration, int nSize );
};

// Class SFXGame.BioUIWorld
// 0x0218 (0x0278 - 0x0060)
class UBioUIWorld : public UObject
{
public:
	struct FPostProcessSettings                        m_CurrentPostProcessSettings;                     		// 0x0060 (0x00E0) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FPointer>                     m_aCommandQueue;                                  		// 0x0140 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<class AActor*>                       m_aoInitialActors;                                		// 0x0150 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FString                                     m_sMapFile;                                       		// 0x0160 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FAppliedVFXPair>              m_AppliedVFX;                                     		// 0x0170 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FPointer                                    m_pWorld;                                         		// 0x0180 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    m_pCriticalSection;                               		// 0x0188 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0190 (0x0048) UNKNOWN PROPERTY: MapProperty SFXGame.BioUIWorld.m_mSpawnedPawnMap
	struct FBioConvLightingData                        m_CustomLightingData;                             		// 0x01D8 (0x004C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FName                                       m_fnCameraActorName;                              		// 0x0224 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class ACameraActor*                                m_pCameraActor;                                   		// 0x022C (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UBioVFXTemplate*                             m_pFullBioticEffectTemplate;                      		// 0x0234 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioVFXTemplate*                             m_pHalfBioticEffectTemplate;                      		// 0x023C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioVFXTemplate*                             m_pTechToolEffectTemplate;                        		// 0x0244 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioVisualEffect*                            m_pFullBioticEffect;                              		// 0x024C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioVisualEffect*                            m_pHalfBioticEffect;                              		// 0x0254 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioVisualEffect*                            m_pTechToolEffect;                                		// 0x025C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioSFHandler_NewCharacter*                  m_oNCHandler;                                     		// 0x0264 (0x0008) [0x0000000000000000]              
	class UPostProcessChain*                           m_PostProcessChain;                               		// 0x026C (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bEnabled : 1;                                   		// 0x0274 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      m_bLoaded : 1;                                    		// 0x0274 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventClearScarFromPawn ( class ABioPawn* PawnToClear );
	void RotatePawn ( class ABioPawn* a_pOriginalPawn, struct FRotator a_newRot );
	class ABioPawn* GetSpawnedPawn ( class ABioPawn* a_pOriginalPawn );
	void FlushPendingCommands ( );
	void HidePawn ( class ABioPawn* a_pOriginalPawn, unsigned long bHidden );
	void SetAnimSet ( class ABioPawn* SourcePawn, class UAnimSet* AnimSet );
	void ClearVFX ( class ABioPawn* SourcePawn );
	void ApplyVFXTemplate ( class ABioPawn* SourcePawn, class UBioVFXTemplate* Template );
	void AttachOmnitool ( class ABioPawn* a_pSourcePawn, unsigned long a_fnClassName );
	void PrimeTextures ( class ABioPawn* a_pSourcePawn );
	void AttachBioticsAndTech ( class ABioPawn* a_pSourcePawn, struct FName a_fnClassName );
	void MovePawn ( class ABioPawn* a_pOriginalPawn, struct FName a_fnNewLocation );
	void SwapPawn ( class ABioPawn* a_pSourcePawn, struct FName a_fnSourceVarName, class ABioPawn* a_pOtherPawn, struct FName a_fnOtherVarName );
	void ResetActors ( );
	void SetBoolVariable ( struct FName a_fnVariableName, unsigned long a_bValue );
	void SetNameVariable ( struct FName a_fnVariableName, struct FName a_nmValue );
	void SetObjectVariable ( struct FName a_fnVariableName, class UObject* a_pValue );
	void UpdateHeadGearVisibility ( class ABioPawn* pOriginalPawn );
	void UpdateAppearance ( class ABioPawn* a_pOriginalPawn, class UAnimSet* a_AnimSet, int a_Flags );
	void DestroyPawn ( class ABioPawn* a_pOriginalPawn );
	void SpawnPawn ( class ABioPawn* a_pOriginalPawn, struct FName a_fnSpawnLocation, struct FName a_fnSpawnVariable, class UAnimSet* InAnimSet, struct FName a_fnRemoteEvent, int a_Flags );
	void TriggerEvent ( struct FName a_fnEventName, class AActor* a_pCaller );
};

// Class SFXGame.SFXConsole
// 0x0004 (0x0264 - 0x0260)
class USFXConsole : public UConsole
{
public:
	unsigned long                                      bShift : 1;                                       		// 0x0260 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString RetrieveClipboard ( );
	int FindBreak ( struct FString CurrentString, int CurrentStringPos, unsigned long bForward );
	bool FindNextMatchingHistory ( struct FString CurrentString, int CurrentStringPos, int* outNextHistory );
	bool CommonInputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	void FindNextMatchingAutoComplete ( int CurrentStringPos, struct FString* CurrentString );
	class UObject* FindObjectUnqualified ( struct FString ObjectName, class UClass* ObjectClass );
	struct FString FindNextPropertyMatching ( class UClass* C, struct FString PropertyPrefix, struct FString AfterThisProperty );
	bool InputChar ( int ControllerId, struct FString Unicode );
	void SaveHistory ( );
	void LoadHistory ( );
	bool InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	void PostRender_Console ( class UCanvas* Canvas );
	void StartTyping ( struct FString Text );
	void ClearOutput ( );
	void ConsoleCommand ( struct FString Command );
	struct FString PreParseCommand ( struct FString Command );
	class AActor* GetCameraActor ( );
	void PurgeCommandFromHistory ( struct FString Command );
	void Initialized ( );
};

// Class SFXGame.BioInGamePropertyEditor
// 0x00B0 (0x0110 - 0x0060)
class UBioInGamePropertyEditor : public UObject
{
public:
	struct FString                                     m_sFooterText;                                    		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sFileName;                                      		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sEditableRootName;                              		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sCameraRootName;                                		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sAnimNodeName;                                  		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sNewLoadSaveNodeName;                           		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sStateNodeName;                                 		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sActionMappingName;                             		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioPropertyEditorBaseNode*                  m_oPropertyEditorNodes;                           		// 0x00E0 (0x0008) [0x0000000000000000]              
	float                                              m_fHUDRelativePropertyEditorOriginX;              		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              m_fHUDRelativePropertyEditorOriginY;              		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              m_fPropertyEditorSizeX;                           		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              m_fPropertyEditorSizeY;                           		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              m_fPropertyEditorRelativeColumnOneX;              		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              m_fPropertyEditorRelativeColumnTwoX;              		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              m_fPropertyEditorRelativeColumnThreeX;            		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              m_fPropertyEditorRelativeColumnY;                 		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              m_fColumnHeight;                                  		// 0x0108 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsActive : 1;                                  		// 0x010C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDebugBones : 1;                                		// 0x010C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bSortByType : 1;                                		// 0x010C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bSortByName : 1;                                		// 0x010C (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString filterString ( struct FString Input );
	void DrawToHUD ( class ABioHUD* oHUD );
	void CreateCommand ( class UBioPropertyEditorBaseNode* Parent, struct FString CmdName, struct FString Command );
	void CreateObjectNode ( class UBioPropertyEditorBaseNode* Parent, class UObject* O, struct FString ObjName );
	void eventCreateGameplayNodes ( class UBioPropertyEditorBaseNode* Parent );
	void DrawBones ( class ABioHUD* oHUD );
	bool PerformRightShoulderAction ( );
	bool PerformLeftShoulderAction ( );
	bool PerformRightTriggerAction ( );
	bool PerformLeftTriggerAction ( );
	bool ActivateMainMenu ( );
	bool PerformLeftAction ( );
	bool PerformRightAction ( );
	bool PerformDownAction ( );
	bool PerformUpAction ( );
	bool PerformDeactivateAction ( );
	bool PerformActivateAction ( );
	bool CreateNodeTestData ( );
	bool WriteTreeDataToHUD ( class ABioHUD* oHUD );
	bool UpdateSystem ( float fDeltaTime );
	bool DeactivateSystem ( );
	bool ActivateSystem ( );
	bool Initialize ( );
};

// Class SFXGame.BioPropertyEditorBaseNode
// 0x0064 (0x00C4 - 0x0060)
class UBioPropertyEditorBaseNode : public UObject
{
public:
	struct FString                                     m_sNodeDisplayName;                               		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UBioPropertyEditorBaseNode*>   m_aChildren;                                      		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UBioPropertyEditorBaseNode*>   m_aTraversedStack;                                		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sParentGenName;                                 		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioInGamePropertyEditor*                    m_oTop;                                           		// 0x00A0 (0x0008) [0x0000000000000000]              
	class UBioPropertyEditorBaseNode*                  m_oParent;                                        		// 0x00A8 (0x0008) [0x0000000000000000]              
	int                                                m_nCurrentlySelectedChild;                        		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                m_nScrollBoxFirstIndex;                           		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                m_nScrollBoxSize;                                 		// 0x00B8 (0x0004) [0x0000000000000000]              
	struct FColor                                      m_colour;                                         		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                m_nGeneration;                                    		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UBioInGamePropertyEditor* getTop ( );
	struct FString getDisplayText ( unsigned long selectable );
	struct FColor getColour ( );
	void setColour ( struct FColor Col );
	void RightShoulderAction ( );
	void LeftShoulderAction ( );
	void RightTriggerAction ( );
	void LeftTriggerAction ( );
	void DecrementCurrentSelection ( );
	void IncrementCurrentSelection ( );
	class UBioPropertyEditorBaseNode* GetSelectablesParent ( );
	class UBioPropertyEditorBaseNode* GetSelectedChildOnStackTop ( );
	class UBioPropertyEditorBaseNode* GetSelectedChild ( );
	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorBoneNode
// 0x0010 (0x00D4 - 0x00C4)
class UBioPropertyEditorBoneNode : public UBioPropertyEditorBaseNode
{
public:
	class USkeletalMesh*                               m_oSkeletalMesh;                                  		// 0x00C4 (0x0008) [0x0000000000000000]              
	int                                                m_iLodIndex;                                      		// 0x00CC (0x0004) [0x0000000000000000]              
	int                                                m_iBoneIndex;                                     		// 0x00D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorLevelNode
// 0x0010 (0x00D4 - 0x00C4)
class UBioPropertyEditorLevelNode : public UBioPropertyEditorBaseNode
{
public:
	struct FString                                     m_sCommand;                                       		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorLoadNode
// 0x0010 (0x00D4 - 0x00C4)
class UBioPropertyEditorLoadNode : public UBioPropertyEditorBaseNode
{
public:
	struct FString                                     Filename;                                         		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DecrementCurrentSelection ( );
	void IncrementCurrentSelection ( );
	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorPropertyNode
// 0x0028 (0x00EC - 0x00C4)
class UBioPropertyEditorPropertyNode : public UBioPropertyEditorBaseNode
{
public:
	struct FString                                     m_sValueString;                                   		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sDeliminator;                                   		// 0x00D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    Base;                                             		// 0x00E4 (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool MakeNodes ( struct FString thisOneOnly );
	void SetObject ( class UObject* O );
	void DecrementCurrentSelection ( );
	void IncrementCurrentSelection ( );
	void RightTriggerAction ( );
	void LeftTriggerAction ( );
	struct FString getDisplayText ( unsigned long selectable );
	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorArrayNode
// 0x0008 (0x00F4 - 0x00EC)
class UBioPropertyEditorArrayNode : public UBioPropertyEditorPropertyNode
{
public:
	class UProperty*                                   m_Property;                                       		// 0x00EC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorEditableNode
// 0x0021 (0x010D - 0x00EC)
class UBioPropertyEditorEditableNode : public UBioPropertyEditorPropertyNode
{
public:
	class UProperty*                                   prop;                                             		// 0x00EC (0x0008) [0x0000000000000000]              
	class UProperty*                                   m_arrayProperty;                                  		// 0x00F4 (0x0008) [0x0000000000000000]              
	int                                                integerVal;                                       		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              floatVal;                                         		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              StepSize;                                         		// 0x0104 (0x0004) [0x0000000000000000]              
	unsigned long                                      boolVal : 1;                                      		// 0x0108 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      alreadyEdited : 1;                                		// 0x0108 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      byteVal;                                          		// 0x010C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void AcceptNewValue ( );
	void DoChange ( float Delta );
	void RightTriggerAction ( );
	void LeftTriggerAction ( );
	void DecrementCurrentSelection ( );
	void IncrementCurrentSelection ( );
	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorEditNode
// 0x0014 (0x0100 - 0x00EC)
class UBioPropertyEditorEditNode : public UBioPropertyEditorPropertyNode
{
public:
	class UProperty*                                   prop;                                             		// 0x00EC (0x0008) [0x0000000000000000]              
	float                                              StepSize;                                         		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              floatVal;                                         		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                otherVal;                                         		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString getDisplayText ( unsigned long selectable );
	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorReadOnlyNode
// 0x0010 (0x00FC - 0x00EC)
class UBioPropertyEditorReadOnlyNode : public UBioPropertyEditorPropertyNode
{
public:
	struct FString                                     sDisplay;                                         		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorSaveNode
// 0x0010 (0x00D4 - 0x00C4)
class UBioPropertyEditorSaveNode : public UBioPropertyEditorBaseNode
{
public:
	struct FString                                     Filename;                                         		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DecrementCurrentSelection ( );
	void IncrementCurrentSelection ( );
	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorVolatileNode
// 0x0000 (0x00C4 - 0x00C4)
class UBioPropertyEditorVolatileNode : public UBioPropertyEditorBaseNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool SelectionAction ( );
};

// Class SFXGame.BioEvtSysTrackGestureAudHelper
// 0x004C (0x00AC - 0x0060)
class UBioEvtSysTrackGestureAudHelper : public UObject
{
public:
	class UMaterial*                                   m_pRightArrow;                                    		// 0x0060 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmValidPoseEnum;                                		// 0x0068 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmValidGestureEnum;                             		// 0x0070 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmValidGestureFilter;                           		// 0x0078 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmGestureGroupsEnum;                            		// 0x0080 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmValidPoseFilter;                              		// 0x0088 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmPoseGroupsEnum;                               		// 0x0090 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmAllPosesFilter;                               		// 0x0098 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nOldGestureFilter;                              		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nOldPoseFilter;                                 		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bReloadPreviewAnimsets : 1;                     		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bAllowMovingChainKeys : 1;                      		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bAllPoseGroupsLoaded : 1;                       		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioInterpTrackInstMove
// 0x0003 (0x00CC - 0x00C9)
class UBioInterpTrackInstMove : public UInterpTrackInstMove
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioInterpTrackMove
// 0x000A (0x00E8 - 0x00DE)
class UBioInterpTrackMove : public UInterpTrackMove
{
public:
	struct FName                                       FacingController;                                 		// 0x00E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioScalarParameterInstTrack
// 0x0004 (0x0064 - 0x0060)
class UBioScalarParameterInstTrack : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                       		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioScalarParameterTrack
// 0x0014 (0x00BC - 0x00A8)
class UBioScalarParameterTrack : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioVisualEffect*                            m_pParentEffect;                                  		// 0x00B0 (0x0008) [0x0000000000000000]              
	float                                              InterpValue;                                      		// 0x00B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioVectorParameterInstTrack
// 0x000C (0x006C - 0x0060)
class UBioVectorParameterInstTrack : public UInterpTrackInst
{
public:
	struct FVector                                     ResetVector;                                      		// 0x0060 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioVectorParameterTrack
// 0x001C (0x00C4 - 0x00A8)
class UBioVectorParameterTrack : public UInterpTrackVectorBase
{
public:
	struct FVector                                     InterpValue;                                      		// 0x00A8 (0x000C) [0x0000000000000000]              
	struct FName                                       PropertyName;                                     		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioVisualEffect*                            m_pParentEffect;                                  		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioVisualEffectTrack
// 0x0018 (0x00A8 - 0x0090)
class UBioVisualEffectTrack : public UInterpTrack
{
public:
	struct TArray<struct FBioVisualEffectTrackKey>     VisualEffects;                                    		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ABioVisualEffect*                            Properties;                                       		// 0x00A0 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioVisualEffectTrackInst
// 0x000C (0x006C - 0x0060)
class UBioVisualEffectTrackInst : public UInterpTrackInst
{
public:
	class ABioVisualEffect*                            m_VFX;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	float                                              LastUpdatePosition;                               		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Create ( class ABioVisualEffect* Base );
};

// Class SFXGame.SFXConvAuditionHelperInterface
// 0x0000 (0x0060 - 0x0060)
class USFXConvAuditionHelperInterface : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameInterpTrack
// 0x0000 (0x00A8 - 0x00A8)
class USFXGameInterpTrack : public UBioInterpTrack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioConvNodeTrackDebug
// 0x0010 (0x00B8 - 0x00A8)
class UBioConvNodeTrackDebug : public USFXGameInterpTrack
{
public:
	struct TArray<struct FString>                      m_aDbgStrings;                                    		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioEvtSysTrackDOF
// 0x0024 (0x00CC - 0x00A8)
class UBioEvtSysTrackDOF : public USFXGameInterpTrack
{
public:
	struct TArray<struct FBioDOFTrackData>             m_aDOFData;                                       		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_fDOFDefaultBlurKernel;                          		// 0x00B8 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fDOFDefaultExponent;                            		// 0x00BC (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fDOFDefaultFStop;                               		// 0x00C0 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fDOFDefaultMaxNearBlur;                         		// 0x00C4 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fDOFDefaultMaxFarBlur;                          		// 0x00C8 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioEvtSysTrackFuncShot
// 0x0018 (0x00C0 - 0x00A8)
class UBioEvtSysTrackFuncShot : public USFXGameInterpTrack
{
public:
	struct TArray<struct FBioFuncShotData>             m_aShotData;                                      		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       m_nmOldShotType;                                  		// 0x00B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioEvtSysTrackInterrupt
// 0x0010 (0x00B8 - 0x00A8)
class UBioEvtSysTrackInterrupt : public USFXGameInterpTrack
{
public:
	struct TArray<struct FBioInterruptTrackData>       m_aInterruptData;                                 		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioEvtSysTrackSubtitles
// 0x0010 (0x00B8 - 0x00A8)
class UBioEvtSysTrackSubtitles : public USFXGameInterpTrack
{
public:
	struct TArray<struct FBioSubtitleTrackData>        m_aSubtitleData;                                  		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioEvtSysTrackSwitchCamera
// 0x0010 (0x00B8 - 0x00A8)
class UBioEvtSysTrackSwitchCamera : public USFXGameInterpTrack
{
public:
	struct TArray<struct FBioCameraSwitchData>         m_aCameras;                                       		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioEvtSysTrackVOElements
// 0x000C (0x00B4 - 0x00A8)
class UBioEvtSysTrackVOElements : public USFXGameInterpTrack
{
public:
	int                                                m_nStrRefID;                                      		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fJCutOffset;                                    		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIgnoreExportShrinking : 1;                     		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bIgnoreExportGrowing : 1;                       		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioInterpTrackRotationMode
// 0x0010 (0x00B8 - 0x00A8)
class UBioInterpTrackRotationMode : public USFXGameInterpTrack
{
public:
	struct TArray<struct FRotationModeTrackKey>        EventTrack;                                       		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
};

// Class SFXGame.SFXGameActorInterpTrack
// 0x000D (0x00B5 - 0x00A8)
class USFXGameActorInterpTrack : public USFXGameInterpTrack
{
public:
	struct FName                                       m_nmFindActor;                                    		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bActorChanged : 1;                              		// 0x00B0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      m_eFindActorMode;                                 		// 0x00B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEvtSysTrackGesture
// 0x002E (0x00E3 - 0x00B5)
class UBioEvtSysTrackGesture : public USFXGameActorInterpTrack
{
public:
	struct TArray<struct FBioGestureData>              m_aGestures;                                      		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       nmStartingPoseSet;                                		// 0x00C8 (0x0008) [0x0000000000000000]              
	struct FName                                       nmStartingPoseAnim;                               		// 0x00D0 (0x0008) [0x0000000000000000]              
	float                                              m_fStartPoseOffset;                               		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bARPUGenerated : 1;                             		// 0x00DC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bAutoGenFemaleTrack : 1;                        		// 0x00DC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bUseDynamicAnimsets : 1;                        		// 0x00DC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      ePoseFilter;                                      		// 0x00E0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eStartingPose;                                    		// 0x00E1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eOverrideType;                                    		// 0x00E2 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioEvtSysTrackLighting
// 0x0013 (0x00C8 - 0x00B5)
class UBioEvtSysTrackLighting : public USFXGameActorInterpTrack
{
public:
	struct TArray<struct FBioConvLightingData>         m_aLightingKeys;                                  		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioEvtSysTrackLookAt
// 0x0013 (0x00C8 - 0x00B5)
class UBioEvtSysTrackLookAt : public USFXGameActorInterpTrack
{
public:
	struct TArray<struct FBioLookAtTrackData>          m_aLookAtKeys;                                    		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioEvtSysTrackProp
// 0x0013 (0x00C8 - 0x00B5)
class UBioEvtSysTrackProp : public USFXGameActorInterpTrack
{
public:
	struct TArray<struct FBioPropTrackData>            m_aPropKeys;                                      		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float PropWepActionTimingDisableIK ( class UObject* pWeaponIn );
	void PropWepActionExecuteDisableIK ( class UObject* pWeaponIn, class ABioPawn* pActor );
	float PropWepActionTimingEnableIK ( class UObject* pWeaponIn );
	void PropWepActionExecuteEnableIK ( class UObject* pWeaponIn, class ABioPawn* pActor );
	float PropWepActionTimingFireWithTracer ( class UObject* pWeaponIn );
	void PropWepActionExecuteFireWithTracer ( class UObject* pWeaponIn, class ABioPawn* pActor );
	float PropWepActionTimingReload ( class UObject* pWeaponIn );
	void PropWepActionExecuteReload ( class UObject* pWeaponIn, class ABioPawn* pActor );
	float PropWepActionTimingCollapse ( class UObject* pWeaponIn );
	void PropWepActionExecuteCollapse ( class UObject* pWeaponIn, class ABioPawn* pActor );
	float PropWepActionTimingExpand ( class UObject* pWeaponIn );
	void PropWepActionExecuteExpand ( class UObject* pWeaponIn, class ABioPawn* pActor );
	float PropWepActionTimingFire ( class UObject* pWeaponIn );
	void PropWepActionExecuteFire ( class UObject* pWeaponIn, class ABioPawn* pActor );
	float FindPartSysMaxDuration ( class UParticleSystem* pParticleSystem, int* nLooping );
	class USkeletalMesh* eventGetWeaponMesh ( class UClass* cWeaponIn );
	void eventPropUnequipWeapon ( class ABioPawn* pActor, class UObject* pWeaponIn, int nSpawned );
	void eventPropUnequipWeaponForInst ( class UClass* cWeapon, class UBioEvtSysTrackPropInst* pInst );
	void eventPropEquipWeapon ( class UClass* cWeapon, class UBioEvtSysTrackPropInst* pInst );
	class UObject* eventPropGetPawnWeapon ( class UClass* cWeapon, class UBioEvtSysTrackPropInst* pInst );
	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioEvtSysTrackSetFacing
// 0x0013 (0x00C8 - 0x00B5)
class UBioEvtSysTrackSetFacing : public USFXGameActorInterpTrack
{
public:
	struct TArray<struct FBioSetFacingData>            m_aFacingKeys;                                    		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXInterpTrackPlayFaceOnlyVO
// 0x0013 (0x00C8 - 0x00B5)
class USFXInterpTrackPlayFaceOnlyVO : public USFXGameActorInterpTrack
{
public:
	struct TArray<struct FBioFOVOTrackData>            m_aFOVOKeys;                                      		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetNewTrackSubMenuName ( );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXGameInterpTrackCustom
// 0x0000 (0x00A8 - 0x00A8)
class USFXGameInterpTrackCustom : public USFXGameInterpTrack
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class AActor* GetGroupLinkedActor ( class UInterpTrackInst* TrackInst );
	class UObject* GetObjectRef ( class UBioSeqVar_ObjectFindByTag* FindByTagVar );
	struct FString eventGetNewTrackSubMenuName ( );
};

// Class SFXGame.SFXInterpTrackAttachCrustEffect
// 0x0028 (0x00D0 - 0x00A8)
class USFXInterpTrackAttachCrustEffect : public USFXGameInterpTrackCustom
{
public:
	struct TArray<struct FSFXAttachCrustEffectTrackData> m_aCrustEffectKeyData;                            		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UBioSeqVar_ObjectFindByTag*>   m_aTarget;                                        		// 0x00B8 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	class UBioVFXTemplate*                             oEffect;                                          		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTriggerKey ( class UBioInterpTrackInst* pTrackInst, unsigned long bAttach, float fLifeTime );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXInterpTrackAttachToActor
// 0x0034 (0x00DC - 0x00A8)
class USFXInterpTrackAttachToActor : public USFXGameInterpTrackCustom
{
public:
	struct TArray<class UBioSeqVar_ObjectFindByTag*>   m_aTarget;                                        		// 0x00A8 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     RelativeOffset;                                   		// 0x00B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RelativeRotation;                                 		// 0x00C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDetach : 1;                                      		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHardAttach : 1;                                  		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseRelativeOffset : 1;                           		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseRelativeRotation : 1;                         		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTriggerKey ( class UBioInterpTrackInst* pTrackInst );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXInterpTrackAttachVFXToObject
// 0x002C (0x00D4 - 0x00A8)
class USFXInterpTrackAttachVFXToObject : public USFXGameInterpTrackCustom
{
public:
	struct TArray<class UBioSeqVar_ObjectFindByTag*>   m_aAttachToTarget;                                		// 0x00A8 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     m_vOffset;                                        		// 0x00B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmSocketOrBone;                                 		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             m_oEffect;                                        		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTriggerKey ( class UBioInterpTrackInst* pTrackInst );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXInterpTrackBlackScreen
// 0x0018 (0x00C0 - 0x00A8)
class USFXInterpTrackBlackScreen : public USFXGameInterpTrackCustom
{
public:
	struct TArray<struct FSFXBlackScreenTrackData>     m_aBlackScreenKeyData;                            		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UBioSeqAct_BlackScreen*                      m_BlackScreenSeq;                                 		// 0x00B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXInterpTrackDestroy
// 0x0010 (0x00B8 - 0x00A8)
class USFXInterpTrackDestroy : public USFXGameInterpTrackCustom
{
public:
	struct TArray<class UBioSeqVar_ObjectFindByTag*>   m_aTarget;                                        		// 0x00A8 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTriggerKey ( class UBioInterpTrackInst* pTrackInst );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXInterpTrackForceLightEnvUpdate
// 0x0008 (0x00B0 - 0x00A8)
class USFXInterpTrackForceLightEnvUpdate : public USFXGameInterpTrackCustom
{
public:
	class UBioSeqAct_ForceLightEnvUpdate*              m_SeqForceUpdateLight;                            		// 0x00A8 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXInterpTrackLightEnvQuality
// 0x0018 (0x00C0 - 0x00A8)
class USFXInterpTrackLightEnvQuality : public USFXGameInterpTrackCustom
{
public:
	struct TArray<struct FSFXLightEnvTrackData>        m_aLightEnvKeyData;                               		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UBioSeqAct_SetLightEnvQuality*               m_LightEnvSeq;                                    		// 0x00B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXInterpTrackMovieBase
// 0x0010 (0x00B8 - 0x00A8)
class USFXInterpTrackMovieBase : public USFXGameInterpTrackCustom
{
public:
	struct TArray<struct FSFXMoviePlayStateData>       m_aMovieKeyData;                                  		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventKeyDataArrayName ( );
};

// Class SFXGame.SFXInterpTrackMovieBink
// 0x0010 (0x00C8 - 0x00B8)
class USFXInterpTrackMovieBink : public USFXInterpTrackMovieBase
{
public:
	struct FString                                     m_sMovieName;                                     		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventKeyDataDisplayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXInterpTrackMovieTexture
// 0x0008 (0x00C0 - 0x00B8)
class USFXInterpTrackMovieTexture : public USFXInterpTrackMovieBase
{
public:
	class UTextureMovie*                               m_oTextureMovie;                                  		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXInterpTrackSetEnvEffectIntensity
// 0x0018 (0x00C0 - 0x00A8)
class USFXInterpTrackSetEnvEffectIntensity : public USFXGameInterpTrackCustom
{
public:
	struct TArray<struct FSFXEnvEffectIntensityTrackData> m_aEnvEffIntKeyData;                              		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UBioSeqAct_SetEnvironmentEffectIntensity*    m_EnvEffIntensitySeq;                             		// 0x00B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXInterpTrackSetPlayerNearClipPlane
// 0x0010 (0x00B8 - 0x00A8)
class USFXInterpTrackSetPlayerNearClipPlane : public USFXGameInterpTrackCustom
{
public:
	struct TArray<struct FSFXNearClipTrackData>        m_aNearClipKeyData;                               		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXInterpTrackSetWeaponInstant
// 0x0020 (0x00C8 - 0x00A8)
class USFXInterpTrackSetWeaponInstant : public USFXGameInterpTrackCustom
{
public:
	struct TArray<struct FSFXWeaponClassData>          m_aWeaponClassKeyData;                            		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UBioSeqVar_ObjectFindByTag*                  m_PawnRefTag;                                     		// 0x00B8 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class ABioPawn*                                    m_Pawn;                                           		// 0x00C0 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXInterpTrackToggleBase
// 0x0028 (0x00D0 - 0x00A8)
class USFXInterpTrackToggleBase : public USFXGameInterpTrackCustom
{
public:
	struct TArray<struct FSFXToggleTrackData>          m_aToggleKeyData;                                 		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UBioSeqVar_ObjectFindByTag*>   m_aTarget;                                        		// 0x00B8 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	class AActor*                                      m_TargetActor;                                    		// 0x00C8 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetupToggleSequenceOp ( class USequenceOp* Seq, unsigned long bToggle, unsigned long bEnable );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXInterpTrackToggleAffectedByHitEffects
// 0x0000 (0x00D0 - 0x00D0)
class USFXInterpTrackToggleAffectedByHitEffects : public USFXInterpTrackToggleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTriggerKey ( class UBioInterpTrackInst* pTrackInst, unsigned long bToggle, unsigned long bEnable );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXInterpTrackToggleHidden
// 0x0000 (0x00D0 - 0x00D0)
class USFXInterpTrackToggleHidden : public USFXInterpTrackToggleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTriggerKey ( class UBioInterpTrackInst* pTrackInst, unsigned long bToggle, unsigned long bEnable );
	struct FString eventKeyDataDisplayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXInterpTrackToggleLightEnvironment
// 0x0008 (0x00D8 - 0x00D0)
class USFXInterpTrackToggleLightEnvironment : public USFXInterpTrackToggleBase
{
public:
	class UBioSeqAct_ToggleLightEnv*                   m_LightEnvSeq;                                    		// 0x00D0 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventKeyDataDisplayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXGameInterpTrackWwiseMicLock
// 0x0014 (0x00BC - 0x00A8)
class USFXGameInterpTrackWwiseMicLock : public USFXGameInterpTrack
{
public:
	struct TArray<struct FBioMicLockData>              m_aMicLockKeys;                                   		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bUnlockAtEnd : 1;                               		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.SFXGameInterpTrackInst
// 0x0000 (0x0064 - 0x0064)
class USFXGameInterpTrackInst : public UBioInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEvtSysTrackDOFInst
// 0x0008 (0x006C - 0x0064)
class UBioEvtSysTrackDOFInst : public USFXGameInterpTrackInst
{
public:
	float                                              m_fInterpolateElapsed;                            		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCurEffect;                                     		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEvtSysTrackFuncShotInst
// 0x0000 (0x0064 - 0x0064)
class UBioEvtSysTrackFuncShotInst : public USFXGameInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEvtSysTrackInterruptInst
// 0x0008 (0x006C - 0x0064)
class UBioEvtSysTrackInterruptInst : public USFXGameInterpTrackInst
{
public:
	class UBioConversation*                            m_pConv;                                          		// 0x0064 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEvtSysTrackSubtitlesInst
// 0x0000 (0x0064 - 0x0064)
class UBioEvtSysTrackSubtitlesInst : public USFXGameInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEvtSysTrackSwitchCameraInst
// 0x0008 (0x006C - 0x0064)
class UBioEvtSysTrackSwitchCameraInst : public USFXGameInterpTrackInst
{
public:
	class UBioEvtSysTrackDOF*                          m_pDOFTrack;                                      		// 0x0064 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEvtSysTrackVOElementsInst
// 0x0000 (0x0064 - 0x0064)
class UBioEvtSysTrackVOElementsInst : public USFXGameInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioInterpTrackInstRotationMode
// 0x0004 (0x0068 - 0x0064)
class UBioInterpTrackInstRotationMode : public USFXGameInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x0064 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameActorInterpTrackInst
// 0x0008 (0x006C - 0x0064)
class USFXGameActorInterpTrackInst : public USFXGameInterpTrackInst
{
public:
	class AActor*                                      m_pActor;                                         		// 0x0064 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEvtSysTrackGestureInst
// 0x004C (0x00B8 - 0x006C)
class UBioEvtSysTrackGestureInst : public USFXGameActorInterpTrackInst
{
public:
	struct FMap_Mirror                                 m_mapCachedAnimsets;                              		// 0x006C (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      m_bActiveTrack : 1;                               		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bBelongsToConversation : 1;                     		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEvtSysTrackLightingInst
// 0x0050 (0x00BC - 0x006C)
class UBioEvtSysTrackLightingInst : public USFXGameActorInterpTrackInst
{
public:
	struct FBioConvLightingData                        InitialLightingData;                              		// 0x006C (0x004C) [0x0000000000000000]              
	unsigned long                                      ResetLightingData : 1;                            		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEvtSysTrackLookAtInst
// 0x0000 (0x006C - 0x006C)
class UBioEvtSysTrackLookAtInst : public USFXGameActorInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEvtSysTrackPropInst
// 0x0094 (0x0100 - 0x006C)
class UBioEvtSysTrackPropInst : public USFXGameActorInterpTrackInst
{
public:
	struct FMap_Mirror                                 m_mapFoundWeapons;                                		// 0x006C (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FMap_Mirror                                 m_mapUsedMeshProps;                               		// 0x00B4 (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      m_bBelongsToConversation : 1;                     		// 0x00FC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetWeaponName ( class UObject* pWeaponIn );
	void RemoveWeaponData ( class UClass* cWeapon );
	void AddWeaponData ( class UClass* cWeapon, class UObject* pWep, unsigned long bSpawned );
	class UObject* FindWeaponData ( class UClass* cWeapon, int* nSpawned );
};

// Class SFXGame.BioEvtSysTrackSetFacingInst
// 0x0000 (0x006C - 0x006C)
class UBioEvtSysTrackSetFacingInst : public USFXGameActorInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXInterpTrackPlayFaceOnlyVOInst
// 0x0010 (0x007C - 0x006C)
class USFXInterpTrackPlayFaceOnlyVOInst : public USFXGameActorInterpTrackInst
{
public:
	struct TArray<class UBioSeqAct_FaceOnlyVO*>        m_aFOVOObjects;                                   		// 0x006C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameInterpTrackInstCustom
// 0x0000 (0x0064 - 0x0064)
class USFXGameInterpTrackInstCustom : public USFXGameInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameInterpTrackInstWwiseMicLock
// 0x0048 (0x00AC - 0x0064)
class USFXGameInterpTrackInstWwiseMicLock : public USFXGameInterpTrackInst
{
public:
	struct FMap_Mirror                                 m_mapCachedActors;                                		// 0x0064 (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXInterpTrack_MoveTo
// 0x0002 (0x00E0 - 0x00DE)
class USFXInterpTrack_MoveTo : public UInterpTrackMove
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXInterpTrackInst_MoveTo
// 0x001B (0x00E4 - 0x00C9)
class USFXInterpTrackInst_MoveTo : public UInterpTrackInstMove
{
public:
	struct FVector                                     StartLocation;                                    		// 0x00CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    StartRotation;                                    		// 0x00D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioInterpolator
// 0x0000 (0x0060 - 0x0060)
class UBioInterpolator : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void InterpolateFloatCurve ( float Source, float Target, float normalizedDisplacement, float* Output, struct FInterpCurveFloat* Curve );
	void InterpolateFloat ( unsigned char InterpolationMethod, float Source, float Target, float normalizedDisplacement, float* Output );
	void InterpolateVector ( unsigned char InterpolationMethod, struct FVector Source, struct FVector Target, float normalizedDisplacement, struct FVector* Output );
	void InterpolateRotator ( unsigned char InterpolationMethod, struct FRotator Source, struct FRotator Target, float normalizedDisplacement, struct FRotator* Output );
};

// Class SFXGame.BioLookAt
// 0x0034 (0x0094 - 0x0060)
class UBioLookAt : public UObject
{
public:
	struct TArray<class UBioPawnLookAtController*>     m_Controllers;                                    		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      m_oTarget;                                        		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    m_oPawn;                                          		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioLookAtDefinition*                        m_Definition;                                     		// 0x0080 (0x0008) [0x0000000000000000]              
	int                                                m_nRank;                                          		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLookAtNoticeTimer;                             		// 0x008C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDisabling : 1;                                 		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioLookAtDefinition
// 0x0022 (0x0082 - 0x0060)
class UBioLookAtDefinition : public UObject
{
public:
	struct TArray<struct FLookAtBoneDefinition>        BoneDefinitions;                                  		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       RootAnimBoneName;                                 		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValidTargetAngleRange;                            		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      RootAnimBoneLookAtInverted : 1;                   		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RootAnimBoneUpInverted : 1;                       		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RootBoneYawOnly : 1;                              		// 0x007C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      RootAnimBoneLookAtAxis;                           		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RootAnimBoneUpAxis;                               		// 0x0081 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ToggleGlobalLookAt
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_ToggleGlobalLookAt : public USequenceAction
{
public:
	unsigned long                                      ForceState : 1;                                   		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      State : 1;                                        		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      Instant : 1;                                      		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialExpressionAnisoSpec
// 0x0060 (0x00CC - 0x006C)
class UBioMaterialExpressionAnisoSpec : public UMaterialExpression
{
public:
	struct FExpressionInput                            Direction;                                        		// 0x006C (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            SpecColor;                                        		// 0x008C (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            SpecPower;                                        		// 0x00AC (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialExpressionBlinnSpec
// 0x0060 (0x00CC - 0x006C)
class UBioMaterialExpressionBlinnSpec : public UMaterialExpression
{
public:
	struct FExpressionInput                            Normal;                                           		// 0x006C (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            SpecColor;                                        		// 0x008C (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            SpecPower;                                        		// 0x00AC (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialExpressionDirt
// 0x0038 (0x00A4 - 0x006C)
class UBioMaterialExpressionDirt : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x006C (0x0020) [0x0000000000000000]              
	struct FName                                       GrimeScaleParamName;                              		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GrimeTexParamName;                                		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  GrimeTex;                                         		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialExpressionFresnel
// 0x0028 (0x0094 - 0x006C)
class UBioMaterialExpressionFresnel : public UMaterialExpression
{
public:
	struct FExpressionInput                            Normal;                                           		// 0x006C (0x0020) [0x0000000000000000]              
	float                                              Power;                                            		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      Inverted : 1;                                     		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialExpressionHalfAngle
// 0x0000 (0x006C - 0x006C)
class UBioMaterialExpressionHalfAngle : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialExpressionKeyedFlipbook
// 0x0050 (0x00BC - 0x006C)
class UBioMaterialExpressionKeyedFlipbook : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coord;                                            		// 0x006C (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            Time;                                             		// 0x008C (0x0020) [0x0000000000000000]              
	class UTexture2D*                                  FlipTex;                                          		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                FlipTexRows;                                      		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FlipTexCols;                                      		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialExpressionPhongSpec
// 0x0060 (0x00CC - 0x006C)
class UBioMaterialExpressionPhongSpec : public UMaterialExpression
{
public:
	struct FExpressionInput                            Normal;                                           		// 0x006C (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            SpecColor;                                        		// 0x008C (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            SpecPower;                                        		// 0x00AC (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialExpressionSineSubtend
// 0x0040 (0x00AC - 0x006C)
class UBioMaterialExpressionSineSubtend : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x006C (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x008C (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialExpressionSpecPower
// 0x0020 (0x008C - 0x006C)
class UBioMaterialExpressionSpecPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x006C (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialOverride
// 0x0030 (0x0090 - 0x0060)
class UBioMaterialOverride : public UObject
{
public:
	struct TArray<struct FTextureParameter>            m_aTextureOverrides;                              		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FColorParameter>              m_aColorOverrides;                                		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FScalarParameter>             m_aScalarOverrides;                               		// 0x0080 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMorphFace
// 0x0070 (0x00D0 - 0x0060)
class UBioMorphFace : public UObject
{
public:
	struct TArray<struct FPointer>                     m_aVertexBuffers;                                 		// 0x0060 (0x0010) [0x0000000000001000]              ( CPF_Native )
	struct TArray<class USkeletalMesh*>                m_oOtherMeshes;                                   		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FMorphFeature>                m_aMorphFeatures;                                 		// 0x0080 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FOffsetBonePos>               m_aFinalSkeleton;                                 		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x00A0 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class USkeletalMesh*                               m_oBaseHead;                                      		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               m_oHairMesh;                                      		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMorphTargetSet*                             m_oMorphTargetSet;                                		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimTree*                                   m_oAnimTree;                                      		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioMaterialOverride*                        m_oMaterialOverrides;                             		// 0x00C8 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyMaterialOverridesToPawn ( class ABioPawn* Pawn );
	void ApplyMaterialOverrides ( class USkeletalMeshComponent* Mesh );
	void SetPosition ( int Buffer, int vert, struct FVector V );
	struct FVector GetPosition ( int Buffer, int vert );
	int GetNumVerts ( int Buffer );
	int GetNumVertexBuffers ( );
	void RefreshBuffers ( struct TArray<int> BufferIndices );
};

// Class SFXGame.BioMorphFaceFESliderBase
// 0x001C (0x007C - 0x0060)
class UBioMorphFaceFESliderBase : public UObject
{
public:
	struct FString                                     m_nName;                                          		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioMorphFaceFrontEnd*                       m_oMorphFaceFrontEnd;                             		// 0x0070 (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bStepped : 1;                                   		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMorphFaceFESliderColour
// 0x0020 (0x009C - 0x007C)
class UBioMorphFaceFESliderColour : public UBioMorphFaceFESliderBase
{
public:
	struct FString                                     m_sParameterName;                                 		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FColor>                       m_acColours;                                      		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMorphFaceFESliderHair
// 0x0000 (0x007C - 0x007C)
class UBioMorphFaceFESliderHair : public UBioMorphFaceFESliderBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMorphFaceFESliderMorph
// 0x002C (0x00A8 - 0x007C)
class UBioMorphFaceFESliderMorph : public UBioMorphFaceFESliderBase
{
public:
	struct FString                                     m_sMorph_Positive;                                		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sMorph_Negative;                                		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fRange;                                         		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              m_fRandomRange;                                   		// 0x00A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bSingle : 1;                                    		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMorphFaceFESliderScalar
// 0x0020 (0x009C - 0x007C)
class UBioMorphFaceFESliderScalar : public UBioMorphFaceFESliderBase
{
public:
	struct FString                                     m_sParameterName;                                 		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<float>                               m_afValues;                                       		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMorphFaceFESliderSetMorph
// 0x0020 (0x009C - 0x007C)
class UBioMorphFaceFESliderSetMorph : public UBioMorphFaceFESliderBase
{
public:
	struct FString                                     m_sMorphName;                                     		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<float>                               m_afValues;                                       		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMorphFaceFESliderTexture
// 0x0020 (0x009C - 0x007C)
class UBioMorphFaceFESliderTexture : public UBioMorphFaceFESliderBase
{
public:
	struct FString                                     m_sParameterName;                                 		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UTexture*>                     m_atTexture;                                      		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMorphUtility
// 0x0000 (0x0060 - 0x0060)
class UBioMorphUtility : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMorphFaceFrontEnd
// 0x011C (0x017C - 0x0060)
class UBioMorphFaceFrontEnd : public UBioMorphUtility
{
public:
	struct FSlider                                     m_pModifierData;                                  		// 0x0060 (0x0064) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FFaceData                                   m_oFaceData;                                      		// 0x00C4 (0x0040) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sPlayerName;                                    		// 0x0104 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBaseHeads                                  m_oBaseSettings;                                  		// 0x0114 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FBaseHeads>                   m_aBaseHeads;                                     		// 0x0124 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      m_oHeadMeshComp;                                  		// 0x0134 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_oHairMeshComp;                                  		// 0x013C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioMorphFace*                               m_oOriginalFace;                                  		// 0x0144 (0x0008) [0x0000000000000000]              
	class UBioMorphFace*                               m_oMorphFace;                                     		// 0x014C (0x0008) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_oOriginalMaterial;                              		// 0x0154 (0x0008) [0x0000000000000000]              
	class USkeletalMesh*                               m_oOriginalMesh;                                  		// 0x015C (0x0008) [0x0000000000000000]              
	class UBioPawnBehavior*                            m_oBehavior;                                      		// 0x0164 (0x0008) [0x0000000000000000]              
	class ABioPawn*                                    m_oPawn;                                          		// 0x016C (0x0008) [0x0000000000000000]              
	int                                                m_iCurrentBaseHead;                               		// 0x0174 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDebugStrings : 1;                              		// 0x0178 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LogSliders ( );
	void SelectPreviousBaseHead ( );
	void SelectNextBaseHead ( );
	void SetPlayerName ( struct FString sPlayerName );
	void Cleanup ( );
	void HandleSliderChange ( int categoryIndex, int sliderIndex, int sliderValue, unsigned long bUpdate );
	bool GetSliderNotched ( int categoryIndex, int sliderIndex );
	int GetSliderValue ( int categoryIndex, int sliderIndex );
	int GetSliderStep ( int categoryIndex, int sliderIndex );
	int GetSliderMax ( int categoryIndex, int sliderIndex );
	int GetSliderMin ( int categoryIndex, int sliderIndex );
	int GetSliderDesc ( int categoryIndex, int sliderIndex );
	int GetSliderLabel ( int categoryIndex, int sliderIndex );
	int GetNumSlidersInCategory ( int categoryIndex );
	int GetCategoryDescription ( int categoryIndex );
	int GetCategoryString ( int categoryIndex );
	int GetNumberOfFeatureCategories ( );
	void CalibrateToPawn ( class ABioPawn* pSrcPawn, unsigned long bUpdate );
	void ResetCategory ( int nCategory, unsigned long bUpdate );
	void ResetAll ( );
	void RandomizeCategory ( int nCategory, unsigned long bUpdate );
	void RandomizeAll ( );
	void Initialize ( class USFXMorphFaceFrontEndDataSource* Data, class ABioPawn* pThePlayer, unsigned long bPlayerIsMale, unsigned long bReset );
};

// Class SFXGame.SFXMorphFaceFrontEndDataSource
// 0x01A8 (0x0208 - 0x0060)
class USFXMorphFaceFrontEndDataSource : public UObject
{
public:
	struct FSlider                                     ModifierData;                                     		// 0x0060 (0x0064) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FAdditionalData                             AdditionalParams;                                 		// 0x00C4 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FCategory>                    MorphCategories;                                  		// 0x00F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UTexture2D*>                   Textures;                                         		// 0x0104 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FBaseHeads>                   m_aDefaultSettings;                               		// 0x0114 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FBaseHeads>                   m_aBaseHeads;                                     		// 0x0124 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_s2DAPackage;                                    		// 0x0134 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sMorph2DA;                                      		// 0x0144 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sMorphBaseMale;                                 		// 0x0154 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sMorphBaseFemale;                               		// 0x0164 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sMorphAnimTree;                                 		// 0x0174 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sMorphTargetSetMale;                            		// 0x0184 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     m_sMorphTargetSetFemale;                          		// 0x0194 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x01A4 (0x0048) UNKNOWN PROPERTY: MapProperty SFXGame.SFXMorphFaceFrontEndDataSource.NameHeadIndexMap
	class UBioMorphFace*                               MorphFace;                                        		// 0x01EC (0x0008) [0x0000000000000000]              
	class UAnimTree*                                   MorphAnimTree;                                    		// 0x01F4 (0x0008) [0x0000000000000000]              
	class UMorphTargetSet*                             MorphTargetSet;                                   		// 0x01FC (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bDebugStrings : 1;                              		// 0x0204 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      PlayerIsMale : 1;                                 		// 0x0204 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEmissionAreaList
// 0x0000 (0x0060 - 0x0060)
class UBioEmissionAreaList : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEmissionAreaListBoneList
// 0x0010 (0x0070 - 0x0060)
class UBioEmissionAreaListBoneList : public UBioEmissionAreaList
{
public:
	struct TArray<struct FBoneListEmissionArea>        m_EmissionAreas;                                  		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioParticleModuleCollisionDecal
// 0x0037 (0x0170 - 0x0139)
class UBioParticleModuleCollisionDecal : public UParticleModuleCollision
{
public:
	struct FString                                     CollisionEmitter;                                 		// 0x013C (0x0010) [0x0000000002400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear )
	struct TArray<struct FName>                        ColorParams;                                      		// 0x014C (0x0010) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioDecalComponent*                          DecalTemplate;                                    		// 0x015C (0x0008) [0x0000000006080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	class UParticleSystem*                             CollisionEmitterTemplate;                         		// 0x0164 (0x0008) [0x0000000000000000]              
	unsigned long                                      bEnableMultiHitDecal : 1;                         		// 0x016C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventCreateDecal ( class UParticleSystemComponent* PSC, class UPrimitiveComponent* HitComponent, struct FVector HitLocation, struct FVector HitNormal );
};

// Class SFXGame.BioParticleModuleLocationAttachedMesh
// 0x002D (0x00A1 - 0x0074)
class UBioParticleModuleLocationAttachedMesh : public UParticleModuleLocationBase
{
public:
	struct TArray<struct FEmissionAreaWeight>          m_EmissionAreaWeights;                            		// 0x0074 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FName>                        m_ValidEmissionSet;                               		// 0x0084 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioEmissionAreaList*                        m_EmissionAreaList;                               		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bCheckAgainstValidEmissionSet : 1;              		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseAttachedLocalSpace : 1;                       		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      m_SpecificationType;                              		// 0x00A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioParticleModuleLocationPrimitiveNearestSurface
// 0x001A (0x00E2 - 0x00C8)
class UBioParticleModuleLocationPrimitiveNearestSurface : public UParticleModuleLocationPrimitiveBase
{
public:
	struct TArray<struct FVector>                      m_aSearchDirections;                              		// 0x00C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              fRadius;                                          		// 0x00D8 (0x0004) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned long                                      bInitialLocationOnly : 1;                         		// 0x00DC (0x0004) [0x0000000002000009] [0x00000001] ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned long                                      bMovingLocationOnly : 1;                          		// 0x00DC (0x0004) [0x0000000002000009] [0x00000002] ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned long                                      bDirectionRelativeToEmitter : 1;                  		// 0x00DC (0x0004) [0x0000000002000009] [0x00000004] ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned long                                      bTestActors : 1;                                  		// 0x00DC (0x0004) [0x0000000002000009] [0x00000008] ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned char                                      eIfNoCollision;                                   		// 0x00E0 (0x0001) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned char                                      eOnCollision;                                     		// 0x00E1 (0x0001) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioParticleModuleMultiplyByEmitterSpeed
// 0x0014 (0x0079 - 0x0065)
class UBioParticleModuleMultiplyByEmitterSpeed : public UParticleModule
{
public:
	float                                              MinUsedSpeed;                                     		// 0x0068 (0x0004) [0x000000000200000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NoClear )
	float                                              MaxUsedSpeed;                                     		// 0x006C (0x0004) [0x000000000200000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NoClear )
	float                                              MultiplierAtMin;                                  		// 0x0070 (0x0004) [0x000000000200000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NoClear )
	float                                              MultiplierAtMax;                                  		// 0x0074 (0x0004) [0x000000000200000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NoClear )
	unsigned char                                      MultipliedProperty;                               		// 0x0078 (0x0001) [0x000000000200000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioParticleModuleSound
// 0x001F (0x0084 - 0x0065)
class UBioParticleModuleSound : public UParticleModule
{
public:
	class UWwiseBaseSoundObject*                       oWwiseEvent;                                      		// 0x0068 (0x0008) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	class UWwiseEvent*                                 WwiseDuckEvent;                                   		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_DuckDistanceThreshold;                          		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ObjInstanceVersion;                               		// 0x007C (0x0004) [0x0000000000000000]              
	unsigned long                                      bPerParticle : 1;                                 		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDuck : 1;                                      		// 0x0080 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioParticleModuleVelocityWorldSpace
// 0x0000 (0x00BC - 0x00BC)
class UBioParticleModuleVelocityWorldSpace : public UParticleModuleVelocity
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXParticleModule_CameraEffect
// 0x00B3 (0x0118 - 0x0065)
class USFXParticleModule_CameraEffect : public UParticleModule
{
public:
	struct FRawDistributionFloat                       RawIntensityVsDistanceDistribution;               		// 0x0068 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FScreenShakeStruct                          ProgrammaticShake;                                		// 0x008C (0x0070) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )
	class UPostProcessChain*                           FramebufferEffect;                                		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioCameraShake*                             AnimatedShake;                                    		// 0x0104 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              MaxRange;                                         		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Duration;                                         		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlayerImpact : 1;                                		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseIntensityCurve : 1;                           		// 0x0114 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPlayProgrammaticShake : 1;                       		// 0x0114 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPawn
// 0x04BB (0x0AA8 - 0x05ED)
class ABioPawn : public APawn
{
public:
	struct FMultiMap_Mirror                            m_mAnimsetRegistration;                           		// 0x05F0 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FName>                        AimNodes;                                         		// 0x0638 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FReactionPart>                ReactionBones;                                    		// 0x0648 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FName>                        AttachSlots;                                      		// 0x0658 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UAnimNodeSlot*>                BodyStanceNodes;                                  		// 0x0668 (0x0010) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UMaterialInstance*>            BodyMaterialInstances;                            		// 0x0678 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UMaterialInstance*>            HeadMaterialInstances;                            		// 0x0688 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class USkeletalMeshComponent*>       m_aoAccessories;                                  		// 0x0698 (0x0010) [0x00000000044A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FRootMotionOverrideEntry>     RootMotionOverrides;                              		// 0x06A8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UAnimSet*>                     m_aOriginalAnimSets;                              		// 0x06B8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FName>                        m_afnCinematicLevels;                             		// 0x06C8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sWrinkleMaterialIdentifier;                     		// 0x06D8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<class UObject*>                      m_aAdditionalResourcesToCook;                     		// 0x06E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FName>                        PhysicsImpactBoneList;                            		// 0x06F8 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FName>                        PhysicsImpactSpringList;                          		// 0x0708 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct FString                                     AIBarkAnimName;                                   		// 0x0718 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FAttackReservation>           m_aReservations;                                  		// 0x0728 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FRigidBodyCallback>           m_CollisionCallbacks;                             		// 0x0738 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FAimAssistBox>                AimAssistRegions;                                 		// 0x0748 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScriptDelegate                             __RBCollisionCallback__Delegate;                  		// 0x0758 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      AIController;                                     		// 0x0768 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      FactionClass;                                     		// 0x0770 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      OldFactionClass;                                  		// 0x0778 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      KilledByDamageType;                               		// 0x0780 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FGuid                                       MyGuid;                                           		// 0x0788 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     KilledByHitLocation;                              		// 0x0798 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FVector                                     m_vSafeTeleportLocation;                          		// 0x07A4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_rLastGoodRotation;                              		// 0x07B0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vLastGoodLocation;                              		// 0x07BC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vLastGoodNormal;                                		// 0x07C8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vBumpLastPosition;                              		// 0x07D4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vFinalRigidBodyPosition;                        		// 0x07E0 (0x000C) [0x0000000000000000]              
	struct FVector                                     LastMantleLocation;                               		// 0x07EC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     MeshTranslationOffset;                            		// 0x07F8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RightHandSocketName;                              		// 0x0804 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       LeftHandSocketName;                               		// 0x080C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class USFXLoadoutData*                             Loadout;                                          		// 0x0814 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ANavigationPoint*                            PreRagdollAnchor;                                 		// 0x081C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmAIBehaviour;                                  		// 0x0824 (0x0008) [0x0000000000000000]              
	class UBioPawnType*                                PawnType;                                         		// 0x082C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioBaseSquad*                               Squad;                                            		// 0x0834 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioPawnBehavior*                            m_oBehavior;                                      		// 0x083C (0x0008) [0x1000000000000000]              
	class AWeapon*                                     WeaponFromLastGameState;                          		// 0x0844 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AWeapon*                                     WeaponOnDeck;                                     		// 0x084C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AController*                                 KilledBy;                                         		// 0x0854 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class USkeletalMeshComponent*                      HeadMesh;                                         		// 0x085C (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioMorphFace*                               MorphHead;                                        		// 0x0864 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      m_oHairMesh;                                      		// 0x086C (0x0008) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_oHeadGearMesh;                                  		// 0x0874 (0x0008) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_oVisorMesh;                                     		// 0x087C (0x0008) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_oFacePlateMesh;                                 		// 0x0884 (0x0008) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class ABioVisualEffect*                            m_LifeCrust;                                      		// 0x088C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmRagdollRecoverBone;                           		// 0x0894 (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmRagdollRecoverDirSwapBone;                    		// 0x089C (0x0008) [0x0000000000000000]              
	class UBioLookAt*                                  m_oLookAtData;                                    		// 0x08A4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ACoverLink*                                  CurrentLink;                                      		// 0x08AC (0x0008) [0x0000000000000000]              
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x08B4 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UWwiseEventPairObject*                       m_oWwiseRollingIdle;                              		// 0x08BC (0x0008) [0x0000000000000000]              
	class UWwiseEventPairObject*                       m_oWwiseRollingStartMoving;                       		// 0x08C4 (0x0008) [0x0000000000000000]              
	class UFaceFXAnimSet*                              m_pOverrideSndSetFaceFXPkg;                       		// 0x08CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimTree*                                   m_pOriginalAnimTree;                              		// 0x08D4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseEvent*                                 DefaultFootStepEvent;                             		// 0x08DC (0x0008) [0x0000000000000000]              
	class UFaceFXAnimSet*                              AIBarkAnimSet;                                    		// 0x08E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     LastPhysicsSetter;                                		// 0x08EC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_aLastCollidedActor;                             		// 0x08F4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       EyeNoiseNodeName;                                 		// 0x08FC (0x0008) [0x0000000000004000]              ( CPF_Config )
	class UBioGestureAnimSetMgr*                       m_pAnimSetMgr;                                    		// 0x0904 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXPowerManager*                            PowerManager;                                     		// 0x090C (0x0008) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	float                                              TechResistance;                                   		// 0x0914 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	float                                              BioticResistance;                                 		// 0x0918 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	float                                              fSleepPerceptionDistance;                         		// 0x091C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CharacterLevel;                                   		// 0x0920 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FootstepCullDistance;                             		// 0x0924 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WalkSpeed;                                        		// 0x0928 (0x0004) [0x0000000000000000]              
	float                                              TurnSpeed;                                        		// 0x092C (0x0004) [0x0000000000000000]              
	float                                              CombatWalkSpeed;                                  		// 0x0930 (0x0004) [0x0000000000000000]              
	float                                              CombatGroundSpeed;                                		// 0x0934 (0x0004) [0x0000000000000000]              
	float                                              DeathCrawlSpeed;                                  		// 0x0938 (0x0004) [0x0000000000000000]              
	float                                              CoverGroundSpeed;                                 		// 0x093C (0x0004) [0x0000000000000000]              
	float                                              CoverCrouchGroundSpeed;                           		// 0x0940 (0x0004) [0x0000000000000000]              
	float                                              CrouchGroundSpeed;                                		// 0x0944 (0x0004) [0x0000000000000000]              
	float                                              StormSpeed;                                       		// 0x0948 (0x0004) [0x0000000000000000]              
	float                                              StormTurnSpeed;                                   		// 0x094C (0x0004) [0x0000000000000000]              
	float                                              fMoveMag;                                         		// 0x0950 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DeathHitBoneIdx;                                  		// 0x0954 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              LastAnimatedReactionTime;                         		// 0x0958 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                m_nTalkedToCount;                                 		// 0x095C (0x0004) [0x0000000000000000]              
	int                                                TalentPoints;                                     		// 0x0960 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLifeCrustCount;                                		// 0x0964 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRagdollRecoverPhysBlendTime;                   		// 0x0968 (0x0004) [0x0000000000000000]              
	float                                              m_fLookAtSpeed;                                   		// 0x096C (0x0004) [0x0000000000000000]              
	float                                              m_fLookAtMinHoldTime;                             		// 0x0970 (0x0004) [0x0000000000000000]              
	float                                              m_fLookAtMaxHoldTime;                             		// 0x0974 (0x0004) [0x0000000000000000]              
	float                                              m_fLookAtMaxAngle;                                		// 0x0978 (0x0004) [0x0000000000000000]              
	float                                              m_fLookAtHoldTime;                                		// 0x097C (0x0004) [0x0000000000000000]              
	float                                              m_fRunAnimPlaybackPos;                            		// 0x0980 (0x0004) [0x0000000000000000]              
	float                                              m_fRunAnimPlaybackRate;                           		// 0x0984 (0x0004) [0x0000000000000000]              
	float                                              m_fRunAnimPlaybackLen;                            		// 0x0988 (0x0004) [0x0000000000000000]              
	float                                              m_fWalkAnimPlaybackPos;                           		// 0x098C (0x0004) [0x0000000000000000]              
	float                                              m_fWalkAnimPlaybackRate;                          		// 0x0990 (0x0004) [0x0000000000000000]              
	float                                              m_fWalkAnimPlaybackLen;                           		// 0x0994 (0x0004) [0x0000000000000000]              
	float                                              m_fWalkStopDistance;                              		// 0x0998 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRunStopDistance;                               		// 0x099C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCollisionReadyHeight;                          		// 0x09A0 (0x0004) [0x0000000000000000]              
	int                                                m_nRootMotionEnabledCountDeprecated;              		// 0x09A4 (0x0004) [0x0000000000000000]              
	float                                              m_fLookMultiplier;                                		// 0x09A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PortArmsTimer;                                    		// 0x09AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PortArmsPlayerInterval;                           		// 0x09B0 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              PortArmsNPCInterval;                              		// 0x09B4 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              PortArmsWedgeHeight;                              		// 0x09B8 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              PortArmsWedgeRadius;                              		// 0x09BC (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                CurrentSlotIdx;                                   		// 0x09C0 (0x0004) [0x0000000000000000]              
	int                                                TargetSlotIdx;                                    		// 0x09C4 (0x0004) [0x0000000000000000]              
	int                                                PreviousSlotIdx;                                  		// 0x09C8 (0x0004) [0x0000000000000000]              
	int                                                LeftSlotIdx;                                      		// 0x09CC (0x0004) [0x0000000000000000]              
	int                                                RightSlotIdx;                                     		// 0x09D0 (0x0004) [0x0000000000000000]              
	float                                              CurrentSlotPct;                                   		// 0x09D4 (0x0004) [0x0000000000000000]              
	float                                              LastCoverActionTime;                              		// 0x09D8 (0x0004) [0x0000000000000000]              
	float                                              CoverCamPeekToDefaultThreshold;                   		// 0x09DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CoverCamPeekToMidDefaultThresholdIn;              		// 0x09E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CoverCamPeekToMidDefaultThresholdOut;             		// 0x09E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                AnimationTransitionCount;                         		// 0x09E8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                AnimationTransitionPending;                       		// 0x09EC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              m_fBumpCheckTimer;                                		// 0x09F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRBSleepEnergyThreshold;                        		// 0x09F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fEnableCCDMultiplierThreshold;                  		// 0x09F8 (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	int                                                m_nTickCount;                                     		// 0x09FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxRelevancyDistance;                          		// 0x0A00 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nWrinkleHighestLOD;                             		// 0x0A04 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nHiddenRequestCount;                            		// 0x0A08 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastFootStepTime;                              		// 0x0A0C (0x0004) [0x0000000000000000]              
	float                                              m_fPhysicsForceIncurred;                          		// 0x0A10 (0x0004) [0x0000000000000000]              
	float                                              ThreatRadiusSquared;                              		// 0x0A14 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fPhysicsHitReactionImpulseScale;                  		// 0x0A18 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPhysicsImpactBlendOutTime;                       		// 0x0A1C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPhysicsImpactBlendTimeRemaining;                 		// 0x0A20 (0x0004) [0x0000000000000000]              
	float                                              fPhysicsImpactMassEffectScale;                    		// 0x0A24 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPhysHRMotorSpringStrength;                       		// 0x0A28 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPhysHRMotorDampingStrength;                      		// 0x0A2C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPhysHRLinearSpringStrength;                      		// 0x0A30 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPhysHRAngularSPringStrength;                     		// 0x0A34 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPlayerPawnPhysHRModifier;                        		// 0x0A38 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPlayerPawnPhysHRWeight;                          		// 0x0A3C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeOfDeath;                                      		// 0x0A40 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxBodyCount;                                     		// 0x0A44 (0x0004) [0x0000000000000000]              
	float                                              FallingStateEntranceTime;                         		// 0x0A48 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nMaxTargetTickets;                              		// 0x0A4C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nMaxAttackTickets;                              		// 0x0A50 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fTicketExpiryTime;                              		// 0x0A54 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nTargetTickets;                                 		// 0x0A58 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nAttackTickets;                                 		// 0x0A5C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCurrentReservationID;                          		// 0x0A60 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ConformTraceInterval;                             		// 0x0A64 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ConformTraceFrameCount;                           		// 0x0A68 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InterpZTranslation;                               		// 0x0A6C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastMantleTime;                                   		// 0x0A70 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MeshFloorConformTranslation;                      		// 0x0A74 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MeshFloorConformTransSpeed;                       		// 0x0A78 (0x0004) [0x0000000000000000]              
	float                                              m_fInitialZVal;                                   		// 0x0A7C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ScaleLimitTimeToGo;                               		// 0x0A80 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RadarRange;                                       		// 0x0A84 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RadarFOV;                                         		// 0x0A88 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                DisableEyeBlinkRefCount;                          		// 0x0A8C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bSleeping : 1;                                    		// 0x0A90 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShouldSpawnWeapons : 1;                          		// 0x0A90 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bScalePowers : 1;                                 		// 0x0A90 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsStealthed : 1;                                 		// 0x0A90 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bIgnoreSelectionMaxRange : 1;                     		// 0x0A90 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bFullyInitialized : 1;                            		// 0x0A90 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bHasShields : 1;                                  		// 0x0A90 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bIconicAppearance : 1;                            		// 0x0A90 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bCanPlayAnimatedReactions : 1;                    		// 0x0A90 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bCanPlayPhysicsHitReactions : 1;                  		// 0x0A90 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bSpawnPHATInstance : 1;                           		// 0x0A90 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bKillOnRagdoll : 1;                               		// 0x0A90 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bCollidesAfterDeath : 1;                          		// 0x0A90 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bSaveMe : 1;                                      		// 0x0A90 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bIsSniping : 1;                                   		// 0x0A90 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bPlayDeathAnimation : 1;                          		// 0x0A90 (0x0004) [0x0000000000002001] [0x00008000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bOverrideHeadMat : 1;                             		// 0x0A90 (0x0004) [0x0000000000000002] [0x00010000] ( CPF_Const )
	unsigned long                                      bOverrideBodyMats : 1;                            		// 0x0A90 (0x0004) [0x0000000000000002] [0x00020000] ( CPF_Const )
	unsigned long                                      m_bOldUpdateSkelWhenNotRendered : 1;              		// 0x0A90 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      m_bInvertRagdollRecoverBoneAxis : 1;              		// 0x0A90 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      m_bRecoverDirSwap : 1;                            		// 0x0A90 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      m_bInvertRagdollRecoverDirSwapBoneAxis : 1;       		// 0x0A90 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      m_bCanCleanupCorpse : 1;                          		// 0x0A90 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      m_bEnableLookAtTargeting : 1;                     		// 0x0A90 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      m_bEnableStartRootMotion : 1;                     		// 0x0A90 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      m_bEnableStopRootMotion : 1;                      		// 0x0A90 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bRootMotionOverriden : 1;                         		// 0x0A90 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      m_bTurnInPlaceRequested : 1;                      		// 0x0A90 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned long                                      m_bUseWallSlidingSpeedAdj : 1;                    		// 0x0A90 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      m_bSafeTeleportQueued : 1;                        		// 0x0A90 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      m_bUseBoneCameraHookOffset : 1;                   		// 0x0A90 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      m_bHideWithCameraCollision : 1;                   		// 0x0A90 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      m_bRagDollEnabled : 1;                            		// 0x0A94 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bInConversation : 1;                            		// 0x0A94 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bAutoLookAtPlayer : 1;                          		// 0x0A94 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bDisableLookAtNotice : 1;                       		// 0x0A94 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bLookAtNotice : 1;                              		// 0x0A94 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bNoWrinkleMapData : 1;                          		// 0x0A94 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bPortArmsEnabled : 1;                             		// 0x0A94 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bCanUsePortArms : 1;                              		// 0x0A94 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bInPortArms : 1;                                  		// 0x0A94 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bPlayingPortArmsAnim : 1;                         		// 0x0A94 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bWeaponDebug_Accuracy : 1;                        		// 0x0A94 (0x0004) [0x0000000000044001] [0x00000400] ( CPF_Edit | CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bWeaponDebug_DamageRadius : 1;                    		// 0x0A94 (0x0004) [0x0000000000044001] [0x00000800] ( CPF_Edit | CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bWasInCover : 1;                                  		// 0x0A94 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bIsInStationaryCover : 1;                         		// 0x0A94 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bIgnoreDuringCoverSelection : 1;                  		// 0x0A94 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      m_bLastGoodInitalized : 1;                        		// 0x0A94 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      m_bBumpLastMoving : 1;                            		// 0x0A94 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      m_bAlwaysTick : 1;                                		// 0x0A94 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      m_bRollingSoundUsed : 1;                          		// 0x0A94 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      m_bRollingNotMoving : 1;                          		// 0x0A94 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      m_bIdleIsPlaying : 1;                             		// 0x0A94 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      m_bMovingIsPlaying : 1;                           		// 0x0A94 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      m_bPreviewBegun : 1;                              		// 0x0A94 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      m_bDroneLanded : 1;                               		// 0x0A94 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      m_bClassificationOverriden : 1;                   		// 0x0A94 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      m_bPlayCustomActivationAnim : 1;                  		// 0x0A94 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bEnableHitReactionBoneSprings : 1;                		// 0x0A94 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bDisableVocEvents : 1;                            		// 0x0A94 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bScalingToZero : 1;                               		// 0x0A94 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      bIsDead : 1;                                      		// 0x0A94 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      m_bDeathPowerUsed : 1;                            		// 0x0A94 (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      bIsCrawling : 1;                                  		// 0x0A94 (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	unsigned long                                      bAimBackDisabledTransitions : 1;                  		// 0x0A98 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDisableMeshTranslationChanges : 1;               		// 0x0A98 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bRagdollEnteredPendingBodyFallSound : 1;        		// 0x0A98 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bPowerInvokedLeanOut : 1;                       		// 0x0A98 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      DisableEyeNoiseDuringFXA : 1;                     		// 0x0A98 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bEyeBlinkDisabled : 1;                            		// 0x0A98 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned char                                      m_eAIBehaviour;                                   		// 0x0A9C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ActionState;                                      		// 0x0A9D (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_eRagdollRecoverBoneAxis;                        		// 0x0A9E (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eRagdollRecoverDirSwapBoneAxis;                 		// 0x0A9F (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentSlotDirection;                             		// 0x0AA0 (0x0001) [0x0000000000000000]              
	unsigned char                                      CoverDirection;                                   		// 0x0AA1 (0x0001) [0x0000000000000000]              
	unsigned char                                      CoverType;                                        		// 0x0AA2 (0x0001) [0x0000000000000000]              
	unsigned char                                      CoverAction;                                      		// 0x0AA3 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eUseRollingInPhysicsMode;                       		// 0x0AA4 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eClassification;                                		// 0x0AA5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RigidBodyMode;                                    		// 0x0AA6 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      LastCoverType;                                    		// 0x0AA7 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventOnFaceFXAnimStopped ( );
	void eventOnFaceFXAnimStarted ( );
	void EnableEyeBlinks ( );
	void DisableEyeBlinks ( );
	void OnResetCanonPlots ( class USFXSeqAct_ResetCanonPlots* Seq );
	void BlockForTextureStreaming ( );
	bool CanBeBioticCharged ( );
	void OnSquadMemberAdded ( class APawn* Pawn );
	void OnPowersLoaded ( );
	void ManageRagdolls ( );
	bool StopVocalization ( );
	void eventSetRTPCHelmetIsEnabled ( class UWwiseAudioComponent* WwiseComponent );
	void eventSFXDoComponentAction ( class UActorComponent* pComponent );
	class UTexture2D* eventGetGUIIcon ( unsigned long bGetDeadIcon );
	bool FindBumpAdjust ( class AActor* oHitActor, struct FVector* vHitNormal );
	class UWwiseAudioComponent* GetCurrentVOAudio ( );
	void CollectorPossess ( );
	void GenerateRegenVocalization ( );
	void TossWeapon ( class AWeapon* Weap, struct FVector ForceVelocity );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventClearRBCallbacks ( );
	void RegisterRBCallback ( struct FScriptDelegate RBCallback, unsigned long bDisablePhysicsDamage, int nPriority );
	class UPathGoalEvaluator* CreatePathGoalEvaluator ( class UClass* GoalEvalClass );
	class UPathConstraint* CreatePathConstraint ( class UClass* ConstraintClass );
	void SetTicketDuration ( int nID, float fDuration );
	bool HasValidAttackTicket ( int nID );
	void ReleaseAttackTicket ( int nID, unsigned long bKillTicket );
	int AcquireAttackTicket ( int nCost );
	int eventGetMaxTargetTickets ( );
	int eventGetMaxAttackTickets ( );
	void PlayFireCharging ( );
	void ReleaseTargetTicket ( int nCost );
	bool AcquireTargetTicket ( int nCost );
	float GetTimeSinceLastRender ( );
	void eventCopyPawnAppearance ( class ABioPawn* pSrcPawn );
	void RemoveTalentPoints ( int nPoints );
	void AddTalentPoints ( int nPoints );
	bool eventEnsurePhysics ( unsigned char NewMode );
	void OutputState ( );
	void SetRigidBodyMode ( unsigned char NewMode );
	void PlayFOVO ( class UWwiseEvent* Sound );
	class ABioVisualEffect* CreateDeathEffect ( class UBioVFXTemplate* vfxTemplate, unsigned long bIsCrustEffect, unsigned long bIsTargetDeletedOnDeathEffectCompletion );
	void BreakStealth ( );
	bool IsWithinWeaponRange ( class AActor* TargetActor, unsigned char RangeType );
	float eventGetWeaponRange ( unsigned char RangeType );
	void ForceGroundConform ( );
	float CalculateDesiredGroundConformHeight ( struct FVector* vNewLocation );
	void GetAdjustedMoveDirection ( class AActor* MoveTarget, struct FVector* Dest, struct FVector* Direction );
	void eventOnDoneBlendingPhysicsReaction ( );
	bool StartPhysicsBodyImpact ( struct FName nmHitBoneName, class UClass* SFXDamageType );
	void DoPhysicsBodyImpact ( struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	bool eventTryStagger ( struct FVector vDirection, class AController* InstigatedBy, unsigned long bTest );
	bool PlayAnimatedReaction ( unsigned char CustomAction, class AController* InstigatedBy, unsigned long bPlayImpact, struct FVector HitLocation, struct FVector HitNormal, unsigned long bDeathReaction, struct FTraceHitInfo* HitInfo );
	bool CanPlayAnimatedReaction ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, struct FHitReaction* out_Reaction );
	void PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo );
	void PlayShieldHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo );
	bool eventAddRagdollImpulse ( struct FVector Impulse, class AController* InstigatedBy, struct FVector HitLocation, unsigned long bIgnorePhysicsThreshold, struct FName HitBone, unsigned long bVelChange );
	bool CanHavePhysicsImpulse ( );
	bool eventIsReturningToPlaypen ( );
	void SetCrouchStateInstantly ( unsigned long bDoCrouch );
	bool CanMantleBetween ( class ANavigationPoint* first, class ANavigationPoint* Second );
	bool SpecialMoveTo_ClimbUp ( class ANavigationPoint* Start, class ANavigationPoint* End );
	bool SpecialMoveTo_Mantle ( class ANavigationPoint* Start, class ANavigationPoint* End );
	bool SpecialMoveTo ( class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next );
	bool eventControllerCanDoSpecialMove ( );
	bool eventControllerContainsClimbUpCustomAction ( );
	bool eventControllerContainsMantleCustomAction ( );
	bool ControllerContainsCustomActionClass ( class UClass* CustomActionClass );
	void eventTerminateCurrentCustomAction ( );
	bool GetCurrentCustomAction ( class UBioCustomAction** pAction );
	void AnimNotify ( class UAnimNodeSequence* SeqNode, class UBioAnimNotify_CustomAction* NotifyObject );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void SetBodyStanceAnimLooping ( struct FBodyStance Stance, unsigned long bNewLooping );
	void SetBodyStanceAnimEndNotification ( struct FBodyStance Stance, unsigned long bNewStatus );
	void SetBodyStanceRootBoneAxisOption ( struct FBodyStance Stance, unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	void ScaleBodyStancePlayRate ( struct FBodyStance Stance, float RateScale );
	void BS_UnpauseAnim ( struct FBodyStance Stance );
	void BS_PauseAnim ( struct FBodyStance Stance );
	void BS_AccelerateBlend ( struct FBodyStance Stance, float BlendAmount );
	void BS_SetPlayRate ( struct FBodyStance Stance, float NewRate );
	float BS_GetPlayRate ( struct FBodyStance Stance );
	float BS_GetTimeLeft ( struct FBodyStance Stance );
	void BS_SetPosition ( struct FBodyStance Stance, float Position );
	void SetBodyStance ( struct FBodyStance Stance );
	void StopAllBodyStances ( float BlendOutTime );
	void StopBodyStance ( struct FBodyStance Stance, float BlendOutTime );
	bool IsPlayingBodyStance ( struct FBodyStance Stance );
	void PlayBodyStanceByDuration ( struct FBodyStance Stance, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	float PlayBodyStance ( struct FBodyStance Stance, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride, unsigned long bKeepRBASettings, float StartTime );
	float PawnPlayCustomAnim ( class UAnimNodeSlot* Slot, struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride, float StartTime );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void ClearAnimNodes ( );
	void eventRecacheAnimNodes ( );
	void CacheAnimNodes ( );
	void OnOrbitalGame ( class UBioSeqAct_OrbitalGame* Action );
	void InitializeSpeeds ( );
	void eventNotifyLimbDetached ( unsigned char ePartGroup );
	void eventOnPowerOrdered ( struct FName nmPower, class AActor* oTargetActor );
	void eventOnPowerCast ( class USFXPower* Power );
	void eventOnPowerEffectDurationComplete ( struct FName nmPower );
	void eventOnPowerCooldownFinished ( struct FName nmPower );
	bool IsCombatActionState ( unsigned char eActionStateVar );
	void MakeVulnerable ( );
	void SpawnDefaultController ( );
	bool eventResurrect ( float PercentOfHealthRegained, unsigned long bIsInstantaneous );
	float eventGetRegenRate ( );
	bool eventGetInBleedout ( );
	void eventRecoverFromBleedout ( );
	bool eventIsArmorFortified ( );
	float GetShieldRechargeTime ( );
	float GetShieldRegenDelay ( );
	float eventGetShieldPct ( );
	float eventGetMaxShields ( );
	float eventGetCurrentShields ( );
	float eventGetHealthPct ( );
	float eventGetMaxHealth ( );
	float eventGetCurrentHealth ( );
	class ASFXShield_Base* GetShields ( );
	bool eventIsShieldBoosted ( );
	void KillAttachedVFX ( );
	void FadeLifeCrust ( );
	int GetXLASTClassContextID ( );
	void eventSetRichPresence ( );
	bool HasDeathPower ( );
	bool CanPlayDeathEffect ( class USFXGameEffect* GE );
	void PlayDeathEffect ( class UClass* SFXDamageType );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void PlayDeathVocalization ( class ABioPawn* Killer );
	void ResetSnapshotNode ( );
	bool eventDied ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	class USFXGameEffect* GetGameEffect ( struct FName GEName );
	bool HasGameEffect ( struct FName GEName );
	void eventOnDeathAnimationFinished ( );
	void gibbedBy ( class AActor* Other );
	void ReleasePowersCamera ( );
	void OnTeleport ( class USeqAct_Teleport* Action );
	class UParticleSystem* GetSpecificFootStepEffect ( class USFXPhysicalMaterialFootSteps* FootStepMat, int FootDown );
	class UParticleSystem* GetFootStepEffect ( class UPhysicalMaterial* PhysMat, int FootDown );
	void PlayStepEffect ( int FootDown, struct FTraceHitInfo HitInfo, float Loudness );
	class UWwiseEvent* GetSpecificFootStepSound ( class USFXPhysicalMaterialFootSteps* FootStepSounds, int FootDown );
	class UWwiseEvent* GetFootStepSound ( class UPhysicalMaterial* PhysMat, int FootDown );
	void PlayStepSound ( int FootDown, struct FTraceHitInfo HitInfo );
	void eventPlayFootStepSound ( int FootDown );
	void SetScale ( float fScale );
	void ReleasePower ( );
	unsigned char GetFaction ( class APawn* Other );
	bool IsFriendly ( class APawn* Other );
	bool IsHostile ( class APawn* Other );
	bool DoReachedWaypointEvent ( class ABioPathPoint* oPoint );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void OnToggle ( class USeqAct_Toggle* Action );
	void ClearUnregisteredAnimsets ( );
	void ClearRegisteredCustomAnimsets ( struct FName nmSetGroupName );
	void RegisterCustomAnimset ( struct FName nmSetGroupName, class UAnimSet* oAnim );
	void eventRanInto ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventStartCrouch ( float HeightAdjust );
	void eventEndCrouch ( float HeightAdjust );
	struct FVector eventGetPlayerPawnConversationCloseupCameraHook ( );
	struct FVector eventGetDefaultHookOffset ( );
	struct FVector GetCameraHook ( struct FName HookName );
	struct FVector CalculateOffsetHook ( struct FVector Hook, struct FName Bone );
	void eventNotifyRagdollRecoverAnimationComplete ( );
	void eventForceEndRagdoll ( );
	void eventOnEnterRagdoll ( );
	void MoveToRagdollRecoverStartPosition ( );
	void PostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventSetShouldCrouch ( unsigned long bCrouch );
	void OnSetPhysics ( class USeqAct_SetPhysics* Action );
	void Destroyed ( );
	void CreateSelection ( );
	void PostBeginPlay ( );
	void eventForceHelmetVisibility ( unsigned long bHelmetVisible );
	void EnsurePawnIsUpright ( );
	unsigned char GetClassification ( );
	void SetClassification ( unsigned char a_eClassification, unsigned long a_bAsDefault );
	void DroneStartLanding ( );
	void DroneFinishedTakingOff ( );
	bool IsShowingHelmet ( );
	bool IsShowingFacePlate ( );
	bool IsShowingVisor ( );
	void RequestHelmetVisible ( unsigned long B );
	void RequestFacePlateVisible ( unsigned long B );
	void RequestVisorVisible ( unsigned long B );
	void OverrideHeadGearVisibility ( unsigned long B );
	bool IsHeadGearVisiblePreferenceRelevant ( );
	bool GetHeadGearVisiblePreference ( );
	void SetHeadGearVisiblePreference ( unsigned long B );
	void RestoreCachedHeadGearVisibilityOverride ( );
	void CacheHeadGearVisibilityOverride ( );
	void SafeSetLocation ( struct FVector vDest );
	bool PlayFaceFX ( struct FString AnimGroup, struct FString AnimSeq );
	bool SetDefaultFaceFXAsset ( );
	void RequestHidden ( unsigned long B );
	void SetLookAtTarget ( class AActor* oTarget, unsigned char a_eTransition, int nRank );
	void SetAmbientLookAtTarget ( class AActor* oTarget, int nRank );
	bool ExploreMode ( float fDelaySeconds );
	bool ReadyMode ( float fDelaySeconds );
	float GetFractionOfEffectsMaterialEnabled ( );
	void SetFractionOfEffectsMaterialEnabled ( float FractionEnabled );
	struct FName GetEffectsMaterialType ( class USkeletalMeshComponent* Component );
	void SetEffectsMaterialType ( struct FName EffectsMaterialType );
	void AnimNodeBlendComplete ( struct FName sBlendName, int nChild );
	void AnimNodePlayFinished ( struct FName sBlendName );
	bool CanPlayAnimNode ( struct FName sBlendName, int nFlags, float* fWeight );
	bool GetAnimLengthAndPos ( struct FName sAnimName, float* fAnimLength, float* fAnimPos );
	bool RequestTurnInPlace ( struct FRotator rDesDir );
	void BioSetDesiredRotation ( struct FRotator rDesiredRotation, unsigned long bForce );
	void StopMovement ( unsigned long bStopRotation );
	unsigned char GetWalkingSpeedMode ( );
	bool IsWalking ( );
	bool CanRagdoll ( );
	bool TermRagdoll ( );
	bool InitRagdoll ( );
	bool IsInvisible ( );
	void UnapplyMaterialParameters ( class UBioMaterialOverride* pMaterialParameters );
	void ApplyMaterialParameters ( class UBioMaterialOverride* pMaterialParameters );
	void SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value );
	void SetScalarParameterValue ( struct FName ParameterName, float Value );
	void SetVectorParameterValue ( struct FName ParameterName, struct FColor* Value );
	void OnCastAt ( class APawn* oAttacker, class USFXPower* Power );
	void OnAttacked ( class APawn* oAttacker, struct FName WeaponName );
	void TakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void eventNotifyFallingAnimationComplete ( );
	bool eventShouldPlayFallingAnim ( );
	void Landed ( struct FVector HitNormal, class AActor* FloorActor );
	void StartFall ( );
	void Falling ( );
	void UpdateRagdollState ( float DeltaTime );
	void Tick ( float DeltaTime );
	bool eventIsWeaponFiring ( );
	bool eventCanFireWeapon ( );
	bool CanSwitchWeapons ( );
	bool CanReload ( );
	bool IsPerformingBlockingAction ( );
	bool IsPerformingCustomAction ( );
	bool IsSwitchingWeapons ( unsigned long bBlendOut );
	bool IsReloading ( unsigned long bCheckReloadRequest, unsigned long bBlendOut );
	bool IsUsingPower ( );
	void StartFirstUsePowerDelay ( );
	void ScaleShields ( float CurrentHealth );
	void ScaleWeapons ( class USFXLoadoutData* ChkLoadout, int ScaleLevel );
	void CreateWeapons ( class USFXLoadoutData* ChkLoadout );
	bool CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon );
	bool ReplaceWeapon ( unsigned char WeaponCategory, class UClass* NewWeapon, unsigned long bEquipWeapon );
	void OnGiveInventory ( class USeqAct_GiveInventory* inAction );
	int GetScaledLevel ( );
	void ScaleEquipment ( int PlayerLevel, class USFXLoadoutData* oLoadout );
	void GenerateInventoryFromLoadout ( class USFXLoadoutData* oLoadout );
	void AddDefaultInventory ( );
	class USFXLoadoutData* GetPawnLoadout ( );
	bool eventIsInBleedOut ( );
	bool eventSetWeaponImmediately ( class UClass* cWeapon );
	struct FName eventGetRightHandSocketName ( );
	void eventSetWeaponFromSlot ( unsigned char eSlot );
	unsigned char eventGetCurrentWeaponCharacterSlot ( );
	void CollapseWeapon ( );
	void ExpandWeapon ( );
	void FadeOutPowerRelease ( );
	void FadeOutHolsterAnim ( );
	void SwapHolsterAnim ( );
	void FadeOutReloadAnim ( );
	void FadeOutDrawAnim ( );
	void SwapDrawAnim ( );
	void RmvAnimSet ( class UAnimSet* Set );
	void AddAnimSet ( class UAnimSet* Set );
	void AddWeaponAnimSets ( class ASFXWeapon* NewWeapon, class ASFXWeapon* OldWeapon, unsigned long bDrawOnly );
	struct FVector GetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	struct FVector eventGetWeaponIdlePosition ( );
	struct FVector GetPulledInMuzzleLocation ( class ASFXWeapon* SW, struct FVector AimDir );
	bool GetWeaponHandPosition ( struct FVector* HandLoc, struct FRotator* HandRot );
	struct FVector eventGetPhysicalFireStartLoc ( struct FVector FireOffset );
	bool IsPendingFire ( unsigned char InFiringMode );
	struct FVector GetPawnViewLocation ( );
	void eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void RootMotionRelease ( class UAnimNode* Node );
	void RootMotionOverride ( class UAnimNode* Node, unsigned char RMMode, unsigned char RMRMode );
	bool IsAtRightEdgeSlot ( float InLimit, unsigned long bMustLean );
	bool IsAtLeftEdgeSlot ( float InLimit, unsigned long bMustLean );
	bool IsOnACoverSlot ( );
	void eventReachedCoverSlot ( int SlotIdx );
	int GetSlotIdxByPct ( );
	void SetCoverDirection ( unsigned char NewCoverDirection );
	bool IsPoppingUp ( unsigned char Action );
	bool IsPeeking ( unsigned char Action );
	bool IsLeaning ( unsigned char Action );
	void eventSetCoverAction ( unsigned char NewCoverAction );
	void SetCoverType ( unsigned char NewCoverType );
	void eventLeaveCover ( );
	unsigned char GetCoverTypeFor ( struct FCovPosInfo Cover );
	unsigned char FindCoverType ( );
	void SetCoverInfo ( class ACoverLink* Link, int SlotIdx, int LeftIdx, int RightIdx, float SlotPct );
	void SetCovPosInfo ( struct FCovPosInfo CovInfo );
	void PlayerCoverAcquired ( struct FCovPosInfo CovInfo );
	bool CanCombat ( );
	bool CanExplore ( );
	bool InCombat ( );
	void PerformStepsSmoothing ( float DeltaSeconds, struct FVector* OldLocation );
	void UpdateFloorConform ( float DeltaSeconds );
	void SetMeshTranslationOffset ( struct FVector NewOffset, unsigned long bForce );
	bool CanUseAnchor ( class ANavigationPoint* Nav );
	bool FitCollision ( );
	void CalculateCoverLocationDelta ( struct FVector* Delta );
	bool DoesCoverStateAllowImmediateFire ( );
	bool CanDoCoverAction ( unsigned char CovAction, unsigned long bPrecise, unsigned long bTestCamera );
	bool IsInCoverLeaning ( );
	bool IsInCover ( );
	void SetAnimatedTransitionPending ( );
	bool IsAnimatedTransitionPending ( );
	void EndAnimatedTransition ( );
	void BeginAnimatedTransition ( );
	bool IsInAnimatedTransition ( );
	void HACKResetRootMotion ( );
	void HardResetActionAndAnimationState ( );
	bool GetAimNodeLocation ( unsigned char AimNode, unsigned long bLogError, struct FVector* AimLocation );
	void eventUpdateAppearance ( );
	void ClearMaterialInstances ( );
	void RefreshMaterialInstances ( );
	class USFXCompositeSkeletalMesh* MergeMeshes ( class USkeletalMesh* BaseMesh, struct TArray<class USkeletalMesh*> AdditionalMeshes, class USkeletalMeshComponent* HeadMeshComponent );
	void UnWeldPhysicsAssetInstance ( );
	void WeldPhysicsAssetInstance ( );
	void ValidateRagdoll ( );
	void RBCollisionCallback ( class APawn* oPawn, class AActor* oImpactActor, struct FVector vImpactDir );
};

// Class SFXGame.BioScout
// 0x0004 (0x0668 - 0x0664)
class ABioScout : public AScout
{
public:
	unsigned long                                      m_bAggressivePathPruning : 1;                     		// 0x0664 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCompositeSkeletalMesh
// 0x0020 (0x0444 - 0x0424)
class USFXCompositeSkeletalMesh : public USkeletalMesh
{
public:
	struct TArray<struct FString>                      SourceMeshNames;                                  		// 0x0424 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FBoneOverrideInfo>            OverrideInfo;                                     		// 0x0434 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool MatchesMerge ( class USkeletalMesh* BaseMesh, struct TArray<class USkeletalMesh*> AdditionalMeshes, class USkeletalMeshComponent* HeadMeshComponent );
};

// Class SFXGame.SFXKActor
// 0x0010 (0x03C8 - 0x03B8)
class ASFXKActor : public AKActor
{
public:
	class AActor*                                      m_aLastCollidedActor;                             		// 0x03B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPhysicsSoundLastTimePlayed;                    		// 0x03C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bImmovable : 1;                                   		// 0x03C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bKinematicUntilMoved : 1;                         		// 0x03C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ImpulseFragments ( struct FVector Source, struct FVector Momentum, struct FVector Extent, unsigned long bVelChange );
	void eventTakeDamage ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	void eventExceededPhysicsThreshold ( class AActor* InstigatedBy );
};

// Class SFXGame.BioPhysicsActor
// 0x000C (0x03D4 - 0x03C8)
class ABioPhysicsActor : public ASFXKActor
{
public:
	float                                              m_fHealth;                                        		// 0x03C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCurrentHealth;                                 		// 0x03CC (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bToughPlaceable : 1;                            		// 0x03D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTakeDamage ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	void ChangeMaterialParameters ( );
};

// Class SFXGame.SFXKActorSpawnable
// 0x000C (0x03C8 - 0x03BC)
class ASFXKActorSpawnable : public AKActorSpawnable
{
public:
	class AActor*                                      m_aLastCollidedActor;                             		// 0x03BC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPhysicsSoundLastTimePlayed;                    		// 0x03C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXKAsset
// 0x000C (0x02B4 - 0x02A8)
class ASFXKAsset : public AKAsset
{
public:
	class AActor*                                      m_aLastCollidedActor;                             		// 0x02A8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPhysicsSoundLastTimePlayed;                    		// 0x02B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioCodexMap
// 0x0090 (0x00F0 - 0x0060)
class UBioCodexMap : public UObject
{
public:
	struct FMap_Mirror                                 SectionMap;                                       		// 0x0060 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 PageMap;                                          		// 0x00A8 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioDiscoveredCodexMap
// 0x0048 (0x00A8 - 0x0060)
class UBioDiscoveredCodexMap : public UObject
{
public:
	struct FMap_Mirror                                 DiscoveredCodex;                                  		// 0x0060 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Clear ( );
};

// Class SFXGame.BioGlobalVariableTable
// 0x0048 (0x00A8 - 0x0060)
class UBioGlobalVariableTable : public UObject
{
public:
	struct TArray<int>                                 BoolVariables;                                    		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<int>                                 IntVariables;                                     		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<float>                               FloatVariables;                                   		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FTimedPlotUnlock_t>           TimedPlotUnlocks;                                 		// 0x0090 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UBio2DA*                                     oNameLookupTable;                                 		// 0x00A0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventClearAllVariables ( );
	int GetStrRefByName ( struct FName nmLabel );
	void SetFloatByName ( struct FName nmLabel, float fValue );
	float GetFloatByName ( struct FName nmLabel );
	void SetIntByName ( struct FName nmLabel, int nValue );
	int GetIntByName ( struct FName nmLabel );
	void SetBoolByName ( struct FName nmLabel, unsigned long bValue );
	bool GetBoolByName ( struct FName nmLabel );
	void SetFloat ( int nIndex, float fValue );
	float GetFloat ( int nIndex );
	void SetInt ( int nIndex, int nValue );
	int GetInt ( int nIndex );
	void SetBool ( int nIndex, unsigned long bValue, unsigned long bEvaluateAchievement );
	bool GetBool ( int nIndex );
};

// Class SFXGame.BioOutcomeMap
// 0x0048 (0x00A8 - 0x0060)
class UBioOutcomeMap : public UObject
{
public:
	struct FMap_Mirror                                 OutcomeMapping;                                   		// 0x0060 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioQuestMap
// 0x0120 (0x0180 - 0x0060)
class UBioQuestMap : public UObject
{
public:
	struct FMap_Mirror                                 QuestMap;                                         		// 0x0060 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 TaskEvalMap;                                      		// 0x00A8 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 IntTaskEvalMap;                                   		// 0x00F0 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 FloatTaskEvalMap;                                 		// 0x0138 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioQuestProgressionMap
// 0x004C (0x00AC - 0x0060)
class UBioQuestProgressionMap : public UObject
{
public:
	struct FMap_Mirror                                 QuestProgression;                                 		// 0x0060 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                nQuestProgressCounter;                            		// 0x00A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Clear ( );
};

// Class SFXGame.BioStateEventMap
// 0x0048 (0x00A8 - 0x0060)
class UBioStateEventMap : public UObject
{
public:
	struct FMap_Mirror                                 StateEventMap;                                    		// 0x0060 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioConsequenceMap
// 0x0000 (0x00A8 - 0x00A8)
class UBioConsequenceMap : public UBioStateEventMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXPower
// 0x014C (0x01AC - 0x0060)
class USFXPower : public UObject
{
public:
	struct TArray<float>                               ImpactRadius;                                     		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<float>                               EffectDuration;                                   		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<float>                               Damage;                                           		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<float>                               Force;                                            		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FRankInfo>                    Ranks;                                            		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<int>                                 RankCosts;                                        		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FUnlockRequirement>           UnlockRequirements;                               		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      PowerScriptClass;                                 		// 0x00D0 (0x0008) [0x0000000000000000]              
	class UClass*                                      ProjectileClass;                                  		// 0x00D8 (0x0008) [0x0000000000000000]              
	class UClass*                                      EvolvedPowerClass1;                               		// 0x00E0 (0x0008) [0x0000000000000000]              
	class UClass*                                      EvolvedPowerClass2;                               		// 0x00E8 (0x0008) [0x0000000000000000]              
	struct FName                                       PowerName;                                        		// 0x00F0 (0x0008) [0x0000000000000000]              
	struct FName                                       BaseName;                                         		// 0x00F8 (0x0008) [0x0000000000000000]              
	class UAnimSet*                                    Animations;                                       		// 0x0100 (0x0008) [0x0000000000000000]              
	class UBioPowerVFXAppearance*                      VFX;                                              		// 0x0108 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   CastingTime;                                      		// 0x0110 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   CooldownTime;                                     		// 0x0118 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   GlobalCooldownTime;                               		// 0x0120 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   MinimumRange;                                     		// 0x0128 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   MaximumRange;                                     		// 0x0130 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   VFXIntensity;                                     		// 0x0138 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   ProjectileSpeed;                                  		// 0x0140 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   ProjectileRadius;                                 		// 0x0148 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   ConeHalfAngle;                                    		// 0x0150 (0x0008) [0x0000000000000000]              
	class ABioPawn*                                    MyPawn;                                           		// 0x0158 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioPower*                                   OldPower;                                         		// 0x0160 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                DisplayName;                                      		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                Description;                                      		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                ImpactText;                                       		// 0x0170 (0x0004) [0x0000000000000000]              
	int                                                Icon;                                             		// 0x0174 (0x0004) [0x0000000000000000]              
	float                                              ReleasePlayRate;                                  		// 0x0178 (0x0004) [0x0000000000000000]              
	float                                              DynamicCooldownBonus;                             		// 0x017C (0x0004) [0x0000000000000000]              
	float                                              DynamicDurationBonus;                             		// 0x0180 (0x0004) [0x0000000000000000]              
	float                                              DynamicDamageBonus;                               		// 0x0184 (0x0004) [0x0000000000000000]              
	float                                              Rank;                                             		// 0x0188 (0x0004) [0x0000000000000000]              
	float                                              MaxRank;                                          		// 0x018C (0x0004) [0x0000000000000000]              
	float                                              DelayBeforeFirstUse;                              		// 0x0190 (0x0004) [0x0000000000000000]              
	float                                              DelayBetweenUses;                                 		// 0x0194 (0x0004) [0x0000000000000000]              
	float                                              TimeUntilNextUse;                                 		// 0x0198 (0x0004) [0x0000000000000000]              
	int                                                TalentDescription;                                		// 0x019C (0x0004) [0x0000000000000000]              
	int                                                WheelDisplayIndex;                                		// 0x01A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      UsesSharedCooldown : 1;                           		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      BlockedByObjects : 1;                             		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      AimingIgnoresObstructions : 1;                    		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      StopOnFirstHit : 1;                               		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      CanMoveWhileCasting : 1;                          		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      DisplayInHUD : 1;                                 		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      AISelectable : 1;                                 		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      IsHenchmenUnique : 1;                             		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      DisplayInCharacterRecord : 1;                     		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned char                                      PowerType;                                        		// 0x01A8 (0x0001) [0x0000000000000000]              
	unsigned char                                      CapabilityType;                                   		// 0x01A9 (0x0001) [0x0000000000000000]              
	unsigned char                                      Discipline;                                       		// 0x01AA (0x0001) [0x0000000000000000]              
	unsigned char                                      VocalizationEvent;                                		// 0x01AB (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RecalculateCooldownBonus ( );
	void Tick ( float fDeltaTime );
	float GetDifficultyDurationMultiplier ( );
	void RecalculateDurationBonus ( );
	void GetDurationResearchBonus ( float* fStaticDamageBonus );
	float GetDuration ( );
	float GetForce ( );
	void RecalculateDamageBonus ( );
	void GetDamageResearchBonus ( float* fStaticDamageBonus );
	float GetDamage ( );
	void ProcessToken ( int nRankIndex, struct FString* sToken );
	bool ParseString ( int nRankIndex, struct FString* sParsedString );
	bool GetParsedString ( int srValue, int nRankIndex, struct FString* sOutput );
	bool GetUnlockBlurb ( int nRankIndex, struct FString* sUnlockBlurb );
	bool GetDescription ( int nRankIndex, struct FString* sDescription );
	bool IsSuppressed ( );
	bool IsEnabled ( );
	float GetTotalCooldownTime ( );
	float GetCooldownRemaining ( );
	class UBioPowerScript* GetPowerScript ( );
	bool IsTargetInRange ( class AActor* Target );
	void GetUnlockDetails ( struct FString* sUnlockDetails );
	void GetStringFromStringRef ( int TheStringRef, unsigned long bParse, int nParseIndex, struct FString* TheString );
	float GetArrayValue ( int nRankToUse, struct TArray<float>* ArrayValues );
	float GetScaledValue ( struct FVector2D ValueToScale, int nRankToUse );
};

// Class SFXGame.SFXPowerManager
// 0x0038 (0x0098 - 0x0060)
class USFXPowerManager : public UObject
{
public:
	struct TArray<class USFXPower*>                    Powers;                                           		// 0x0060 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ABioPawn*                                    MyPawn;                                           		// 0x0070 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                RankUnlockText;                                   		// 0x0078 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                RequiredUnlockText;                               		// 0x007C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                PassiveRankIcon;                                  		// 0x0080 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                LockedRankIcon;                                   		// 0x0084 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                UnlockedRankIcon;                                 		// 0x0088 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                EvolveRank;                                       		// 0x008C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fSharedCooldownRemaining;                       		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSharedCooldownTotal;                           		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int GetRefundAmount2 ( class UClass* Power, int Rank );
	int GetRefundAmount ( class USFXPower* Power );
	void RefundAllTalentPoints ( );
	void ProcessWheelDisplayOrder ( );
	void eventGetPowerWheelPowers ( struct TArray<class USFXPower*>* PowerList );
	void StartFirstTimeDelay ( );
	void eventOnSharedCooldownFinished ( );
	bool IsEvolvedPower ( struct FName nmClassName, class UClass** PowerClass );
	void LoadPowers ( struct TArray<struct FPowerSaveInfo>* PowerList );
	void SavePowers ( struct TArray<struct FPowerSaveInfo>* PowerList );
	void Tick ( float fDeltaTime );
	void SetSharedCooldownTotal ( float fCooldown );
	float GetSharedCooldownTotal ( );
	void SetSharedCooldownRemaining ( float fCooldown );
	float GetSharedCooldownRemaining ( );
	bool HasPowerBeenEvolved ( class USFXPower* Power, class USFXPower** EvolvedPower );
	void GetCharacterRecordPowers ( struct TArray<class USFXPower*>* PowerList );
	class USFXPower* GetPowerByClass ( class UClass* PowerClass );
	class USFXPower* GetPower ( struct FName nmPowerName );
	bool RemovePower ( class UClass* PowerClass );
	class USFXPower* AddPowerByClassName ( struct FName PowerClassName );
	class USFXPower* AddPower ( class UClass* PowerClass );
};

// Class SFXGame.BioCurveDrivenParameter
// 0x0040 (0x00A0 - 0x0060)
class UBioCurveDrivenParameter : public UObject
{
public:
	struct FRawDistributionFloat                       m_curve;                                          		// 0x0060 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FString                                     sParameterName;                                   		// 0x0084 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       nmParameterName;                                  		// 0x0094 (0x0008) [0x0000000000000000]              
	unsigned long                                      bScaleToLifetime : 1;                             		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLoop : 1;                                        		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetValue ( float fTime, float fScale );
};

// Class SFXGame.BioDecalComponent
// 0x014E (0x04C0 - 0x0372)
class UBioDecalComponent : public UDecalComponent
{
public:
	struct FRawDistributionFloat                       FadeInTime;                                       		// 0x0374 (0x0024) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       FadeOutTime;                                      		// 0x0398 (0x0024) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       DecalLifetime;                                    		// 0x03BC (0x0024) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       DecalSize;                                        		// 0x03E0 (0x0024) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       DecalRoll;                                        		// 0x0404 (0x0024) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       DecalYaw;                                         		// 0x0428 (0x0024) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       DecalPitch;                                       		// 0x044C (0x0024) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       SizeScale;                                        		// 0x0470 (0x0024) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UBioCurveDrivenParameter*>     aDecalMaterialParameters;                         		// 0x0494 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	class UMaterialInstanceConstant*                   m_MaterialInstance;                               		// 0x04A4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USpotLightComponent*                         m_SkeletalDecal;                                  		// 0x04AC (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_SkeletalReceiver;                               		// 0x04B4 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	unsigned long                                      bScaleByDistance : 1;                             		// 0x04BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProjectOnShields : 1;                            		// 0x04BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMetaVFX
// 0x0020 (0x0080 - 0x0060)
class UBioMetaVFX : public UObject
{
public:
	struct TArray<class UBioVFXTemplate*>              m_aCreatureVFXs;                                  		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UBioVFXTemplate*>              m_aPlaceableVFXs;                                 		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyEffect ( class UBioMetaVFX* MetaEffect, class UObject* Target, float fLifeTime );
	void ApplyEffectByName ( struct FString sEffect, class UObject* Target, float fLifeTime );
};

// Class SFXGame.BioPowerVFXAppearance
// 0x0084 (0x00E4 - 0x0060)
class UBioPowerVFXAppearance : public UObject
{
public:
	struct FPowerVFXData                               PlayerCrust;                                      		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPowerVFXData                               PlayerMaterial;                                   		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPowerVFXData                               UsingEffect;                                      		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPowerVFXData                               FramebufferEffect;                                		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPowerVFXData                               TargetCrust;                                      		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPowerVFXData                               TargetMaterial;                                   		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPowerVFXData                               ImpactVisualEffect;                               		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPowerVFXData                               WorldImpactVisualEffect;                          		// 0x00B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPowerVFXData                               CastingBeam;                                      		// 0x00C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       nmProjectileAttachPoint;                          		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             vfxProjectileEffect;                              		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             vfxReleaseEffect;                                 		// 0x00DC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioVFXTemplate
// 0x00EE (0x014E - 0x0060)
class UBioVFXTemplate : public UObject
{
public:
	struct FRawDistributionFloat                       m_rawIntensityVsDistanceDistribution;             		// 0x0060 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct TArray<class UWwiseBaseSoundObject*>        m_aSoundsForIntensityLevels;                      		// 0x0084 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UBioCurveDrivenParameter*>     aPostProcessParameters;                           		// 0x0094 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UBioCurveDrivenParameter*>     aInstanceParameters;                              		// 0x00A4 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UBioDecalComponent*>           Decals;                                           		// 0x00B4 (0x0010) [0x0000000006480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear | CPF_EditInline )
	float                                              m_afCostTable[ 0x5 ];                             		// 0x00C4 (0x0014) [0x0000000000004000]              ( CPF_Config )
	class UPrefab*                                     oPrefab;                                          		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       oSoundCue;                                        		// 0x00E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPostProcessChain*                           oFrameBufferEffect;                               		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             oSharedFramebufferEffect;                         		// 0x00F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioVisualEffect*                            oInstancedSharedFrameBufferEffect;                		// 0x00F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmEffectsMaterial;                              		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioCameraShake*                             m_cameraShake;                                    		// 0x0108 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              fLifeTime;                                        		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFadeInTime;                                    		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFadeOutTime;                                   		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fImpactRadius;                                    		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fParticleTimeout;                                 		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEffectMaterialTimeout;                           		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInstancePoolRechargePeriod;                    		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nInstancePoolMax;                               		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nDefaultPoolMax;                                		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nDefaultPoolMin;                                		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nMaxInstancesAllowed;                             		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nNumActiveInstances;                              		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxRange;                                      		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPercentageOfDirection;                           		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCreateNewSoundEverySpawn : 1;                    		// 0x0148 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bFadeOnPause : 1;                               		// 0x0148 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableCollision : 1;                             		// 0x0148 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseActorScale : 1;                               		// 0x0148 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIsCrustEffect : 1;                               		// 0x0148 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bIsImpactCrustEffect : 1;                         		// 0x0148 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bAllowParticlesToFinish : 1;                      		// 0x0148 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAttachToNearestBone : 1;                         		// 0x0148 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bIsInitialized : 1;                               		// 0x0148 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bInstancePoolEnabled : 1;                       		// 0x0148 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      m_bDisableBoolDecay : 1;                          		// 0x0148 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x0148 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bSharedBetweenInstances : 1;                      		// 0x0148 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bUseIntensityCurve : 1;                         		// 0x0148 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned char                                      ePriority;                                        		// 0x014C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eCost;                                            		// 0x014D (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventInitializeTemplate ( );
};

// Class SFXGame.BioVisualEffect
// 0x0230 (0x05A8 - 0x0378)
class ABioVisualEffect : public APrefabInstance
{
public:
	struct FString                                     sStateNames[ 0x3 ];                               		// 0x0378 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FCachedInstanceParameter>     m_CachedInstanceParameters;                       		// 0x03A8 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FBioActorReBase                             m_SavedBaseData;                                  		// 0x03B8 (0x0030) [0x0000000000082000]              ( CPF_Transient | CPF_Component )
	class UBioDecalComponent*                          aDecalList[ 0x3 ];                                		// 0x03E8 (0x0018) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              fStateDurations[ 0x3 ];                           		// 0x0400 (0x000C) [0x0000000000000000]              
	float                                              fStateStartTimes[ 0x3 ];                          		// 0x040C (0x000C) [0x0000000000000000]              
	float                                              fStateEndTimes[ 0x3 ];                            		// 0x0418 (0x000C) [0x0000000000000000]              
	class UBioVFXTemplate*                             pTemplate;                                        		// 0x0424 (0x0008) [0x0000000000000000]              
	class USeqAct_Interp*                              Matinee;                                          		// 0x042C (0x0008) [0x0000000000000000]              
	class UBioDecalComponent*                          pLastDecal;                                       		// 0x0434 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UWwiseBaseSoundObject*                       oSoundCue;                                        		// 0x043C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEventPairObject*                       oCurrentWwisePair;                                		// 0x0444 (0x0008) [0x0000000000000000]              
	class UBioCameraShake*                             m_cameraShake;                                    		// 0x044C (0x0008) [0x0000000000000000]              
	class AActor*                                      m_cameraShakenActor;                              		// 0x0454 (0x0008) [0x0000000000000000]              
	class UObject*                                     m_pInstigator;                                    		// 0x045C (0x0008) [0x0000000000000000]              
	float                                              fLifeDuration;                                    		// 0x0464 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_accruedTime;                                    		// 0x0468 (0x0004) [0x0000000000000000]              
	float                                              fTotalDuration;                                   		// 0x046C (0x0004) [0x0000000000000000]              
	float                                              fCurrentTime;                                     		// 0x0470 (0x0004) [0x0000000000000000]              
	int                                                nMaxDecals;                                       		// 0x0474 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                nLastDecal;                                       		// 0x0478 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nAttachedToBoneCount;                           		// 0x047C (0x0004) [0x0000000000000000]              
	unsigned long                                      bDeleteSelf : 1;                                  		// 0x0480 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPaused : 1;                                      		// 0x0480 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bActive : 1;                                      		// 0x0480 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLoopLife : 1;                                    		// 0x0480 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bPauseOnDeath : 1;                                		// 0x0480 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bCancelSpawn : 1;                                 		// 0x0480 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bIsComponentOnly : 1;                             		// 0x0480 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bHideBaseOnComplete : 1;                          		// 0x0480 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bBaseHasValidPose : 1;                            		// 0x0480 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned char                                      eCurrentState;                                    		// 0x0484 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FMultiMap_Mirror                            m_mObjectFloatPropertyMap;                        		// 0x0488 (0x0048) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FMultiMap_Mirror                            m_mTrackMaterialFloatMap;                         		// 0x04D0 (0x0048) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FMultiMap_Mirror                            m_mObjectVectorPropertyMap;                       		// 0x0518 (0x0048) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FMultiMap_Mirror                            m_mTrackMaterialVectorMap;                        		// 0x0560 (0x0048) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventOnComplete ( );
	bool SetSound ( int nIndexInSoundArray );
	class ABioVisualEffect* CreateVFXOnPosition ( class UBioVFXTemplate* a_pTemplate, struct FVector vPosition, struct FRotator rOrientation, float fLifeTime, unsigned long bUseVFXPool );
	class ABioVisualEffect* CreateVFXOnMesh ( class UBioVFXTemplate* a_pTemplate, class AActor* Target, struct FName sBoneName, float fLifeTime, class USkeletalMeshComponent* mTargetMesh, unsigned long bUseVFXPool );
	class ABioVisualEffect* CreateCrustEffect ( class UBioVFXTemplate* a_pTemplate, class AActor* Target, float fLifeTime, unsigned long bUseVFXPool );
	void SetLifeTime ( float fLife );
	void SetVectorParameter ( struct FName sParameter, struct FVector vValue );
	void SetScalarParameter ( struct FName sParameter, float fValue );
	float GetStateDuration ( unsigned char eState );
	float GetEffectDuration ( );
	void DestroyInstance ( );
	bool IsAttached ( );
	bool SetBasePrefab ( class UPrefab* pBase );
	bool SetState ( unsigned char eState, unsigned long bForceSetState, unsigned long bPlayAudio, unsigned long bForceKill );
	bool SetPaused ( unsigned long bPause, unsigned long bForceRefresh );
	void PauseOnDeath ( unsigned long bPause );
	void LoopDuration ( unsigned long bLoop );
};

// Class SFXGame.BioVisualEffectPool
// 0x003C (0x009C - 0x0060)
class UBioVisualEffectPool : public UObject
{
public:
	struct TArray<class ABioVisualEffect*>             m_EffectPool;                                     		// 0x0060 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UBioVFXTemplate*                             m_VFXTemplate;                                    		// 0x0070 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMinEffectsInPool;                              		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                m_nMaxEffectsInPool;                              		// 0x007C (0x0004) [0x0000000000000000]              
	float                                              m_fInstancePoolRechargePeriod;                    		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                m_nInstancePoolMax;                               		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                m_nInstancePoolCurrent;                           		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fInstancePoolTimeAccumulator;                   		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTimeTillDecay;                                 		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fDecayPeriod;                                   		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bInstancePoolEnabled : 1;                       		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PrimePoolEffects ( int a_nNumEffects );
	class ABioVisualEffect* GetEffect ( );
	void SetPoolSize ( int a_nMaxSize, int a_nMinSize );
	void Initialize ( class UBioVFXTemplate* a_oTemplate, int nMaxNumEffects, int nMinNumEffects );
};

// Class SFXGame.BioSeqAct_AbilityEnable
// 0x001C (0x0114 - 0x00F8)
class UBioSeqAct_AbilityEnable : public USequenceAction
{
public:
	struct TArray<class APawn*>                        m_aoPawns;                                        		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       m_nmSubType;                                      		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bEnable : 1;                                    		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_ActivateGalaxyMap
// 0x00F8 (0x01F0 - 0x00F8)
class UBioSeqAct_ActivateGalaxyMap : public USequenceAction
{
public:
	struct FString                                     m_sGalaxyMapResource;                             		// 0x00F8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     BuyFuelSound_PctFullRTPCName;                     		// 0x0108 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ShipTravelSound_SpeedRTPCName;                    		// 0x0118 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ShipTravelSound_ThrustRTPCName;                   		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ShipTravelSound_FuelQtyRTPCName;                  		// 0x0138 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ShipTravelSound_SystemClusterRTPCName;            		// 0x0148 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UWwiseBaseSoundObject*>        m_pShipHalfFuelVO;                                		// 0x0158 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UWwiseBaseSoundObject*>        m_pShipNoFuelClusterVO;                           		// 0x0168 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UWwiseBaseSoundObject*>        m_pShipNoFuelClusterReturnVO;                     		// 0x0178 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UWwiseBaseSoundObject*>        m_pShipNoFuelSystemVO;                            		// 0x0188 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UGFxMovieInfo*                               m_oGalaxyMapReferenced;                           		// 0x0198 (0x0008) [0x0000000000000000]              
	class USFXGalaxy*                                  m_pGalaxyMap;                                     		// 0x01A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       ErrorSound;                                       		// 0x01A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       BuyFuelSound;                                     		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       BuyFuelSoundStop;                                 		// 0x01B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       BuyFuelSound_Full;                                		// 0x01C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       BuyProbeSound;                                    		// 0x01C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       ShipTravelSound_Start;                            		// 0x01D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       ShipTravelSound_Stop;                             		// 0x01D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       ShipOutOfFuel_Start;                              		// 0x01E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       ShipOutOfFuel_Stop;                               		// 0x01E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_AddChoiceGUIElement
// 0x0035 (0x012D - 0x00F8)
class UBioSeqAct_AddChoiceGUIElement : public USequenceAction
{
public:
	class UTexture2D*                                  m_oChoiceImage;                                   		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmResource;                                     		// 0x0100 (0x0008) [0x0000000000000000]              
	int                                                m_srChoiceName;                                   		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_srChoiceTitle;                                  		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_srChoiceImageTitle;                             		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_srChoiceDescription;                            		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nOptionalPaneItemValue;                         		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nChoiceColor;                                   		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nChoiceID;                                      		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_srActionText;                                   		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      OverrideDefaultResource : 1;                      		// 0x0128 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDefaultSelection : 1;                          		// 0x0128 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bDisabled : 1;                                  		// 0x0128 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bNested : 1;                                    		// 0x0128 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      m_eResource;                                      		// 0x012C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_AttachEnvironmentEffect
// 0x0030 (0x0128 - 0x00F8)
class UBioSeqAct_AttachEnvironmentEffect : public USequenceAction
{
public:
	struct FVector                                     m_vOffset;                                        		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oAttachTo;                                      		// 0x0104 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmSocketOrBone;                                 		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             m_oEffect;                                        		// 0x0114 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fBlendTime;                                     		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInitialIntensity;                              		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bAttachToCamera : 1;                            		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_AutoAdjustCover
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_AutoAdjustCover : public USequenceAction
{
public:
	float                                              Radius;                                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_AwardTreasure
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_AwardTreasure : public USequenceAction
{
public:
	class UTexture2D*                                  oImageResource;                                   		// 0x00F8 (0x0008) [0x0000000000000000]              
	int                                                nState;                                           		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDiscount : 1;                                    		// 0x0104 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	struct FString eventGetTreasureImageResourcePath ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_BioActorFactory
// 0x000B (0x017C - 0x0171)
class UBioSeqAct_BioActorFactory : public USeqAct_ActorFactory
{
public:
	class UBioActorType*                               m_oActorType;                                     		// 0x0174 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ChangeUseCase
// 0x0024 (0x011C - 0x00F8)
class UBioSeqAct_ChangeUseCase : public USequenceAction
{
public:
	class ABioArtPlaceable*                            oArtPlaceable;                                    		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       nmNewState0;                                      		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       nmNewState1;                                      		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                nUseCase;                                         		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nSkillLevel;                                      		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_CopyPlayerHeadToTarget
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_CopyPlayerHeadToTarget : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUpdateScars ( );
	void eventApplyFemaleSkinToneOverride ( );
};

// Class SFXGame.BioSeqAct_Delay
// 0x0000 (0x0120 - 0x0120)
class UBioSeqAct_Delay : public USeqAct_Delay
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_DUISetElementText
// 0x0011 (0x0109 - 0x00F8)
class UBioSeqAct_DUISetElementText : public USequenceAction
{
public:
	struct FString                                     sText;                                            		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      Element;                                          		// 0x0108 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_DUITimer
// 0x0010 (0x011C - 0x010C)
class UBioSeqAct_DUITimer : public USeqAct_Latent
{
public:
	float                                              fStartTime;                                       		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEndTime;                                         		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fIntervalTime;                                    		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bModalTimer : 1;                                  		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bVisible : 1;                                     		// 0x0118 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_EnableCombat
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_EnableCombat : public USequenceAction
{
public:
	unsigned long                                      m_bEnable : 1;                                    		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_EndCurrentConvNode
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_EndCurrentConvNode : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_FakeFireWeaponAt
// 0x001C (0x0114 - 0x00F8)
class UBioSeqAct_FakeFireWeaponAt : public USequenceAction
{
public:
	class AActor*                                      oShooter;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oTarget;                                          		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDuration;                                        		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRemainingTime;                                   		// 0x010C (0x0004) [0x0000000000000000]              
	unsigned long                                      bDisableVFX : 1;                                  		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableDamage : 1;                               		// 0x0110 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDelayedLoad : 1;                                 		// 0x0110 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_FakeUsePowerOn
// 0x001C (0x0114 - 0x00F8)
class UBioSeqAct_FakeUsePowerOn : public USequenceAction
{
public:
	class AActor*                                      oCaster;                                          		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oTarget;                                          		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       nmPower;                                          		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisableAnimation : 1;                            		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableVFX : 1;                                  		// 0x0110 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisableDamageAndEffects : 1;                     		// 0x0110 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ForceLightEnvUpdate
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_ForceLightEnvUpdate : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ForceStreamInTextures
// 0x0004 (0x0144 - 0x0140)
class UBioSeqAct_ForceStreamInTextures : public USeqAct_StreamInTextures
{
public:
	unsigned long                                      bBlockOnWait : 1;                                 		// 0x0140 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_GetFromObjectList
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_GetFromObjectList : public USequenceAction
{
public:
	int                                                nListIndex;                                       		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_GetNearestObject
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_GetNearestObject : public USequenceAction
{
public:
	unsigned long                                      bGetFurthest : 1;                                 		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_GetUseCase
// 0x002C (0x0124 - 0x00F8)
class UBioSeqAct_GetUseCase : public USequenceAction
{
public:
	class ABioArtPlaceable*                            oArtPlaceable;                                    		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       nmCurrentState;                                   		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       nmNewState0;                                      		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       nmNewState1;                                      		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                eUseCase;                                         		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nSkillLevel;                                      		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x0120 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_InitFSMode
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_InitFSMode : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_InitLoadingMovie
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_InitLoadingMovie : public USequenceAction
{
public:
	struct FString                                     sMovieName;                                       		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_InitSFLoadingMovie
// 0x0024 (0x011C - 0x00F8)
class UBioSeqAct_InitSFLoadingMovie : public USequenceAction
{
public:
	class UGFxMovieInfo*                               LoadingMovie;                                     		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 Play;                                             		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 Stop;                                             		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioSFScreenTip*                             ScreenTip;                                        		// 0x0110 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	unsigned long                                      OverrideScreenTip : 1;                            		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_InsertPostProcess
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_InsertPostProcess : public USequenceAction
{
public:
	class UPostProcessChain*                           PostProcess;                                      		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
	void AddPostProcessEffect ( );
};

// Class SFXGame.BioSeqAct_InteractProperty
// 0x0078 (0x0170 - 0x00F8)
class UBioSeqAct_InteractProperty : public USequenceAction
{
public:
	struct TArray<struct FBioPropertyMap>              aObjectProperties;                                		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FBioPropertyMap>              aObjectFunctions;                                 		// 0x0108 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FBioPropertyMap>              aBehaviorProperties;                              		// 0x0118 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FBioPropertyMap>              aBehaviorFunctions;                               		// 0x0128 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FBioPropertyMap>              aSelectionProperties;                             		// 0x0138 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FBioPropertyInfo>             Properties;                                       		// 0x0148 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	class UClass*                                      cObjectType;                                      		// 0x0158 (0x0008) [0x0000000000000000]              
	class UClass*                                      cBehaviorType;                                    		// 0x0160 (0x0008) [0x0000000000000000]              
	class UClass*                                      cSelectionType;                                   		// 0x0168 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_GetProperty
// 0x0000 (0x0170 - 0x0170)
class UBioSeqAct_GetProperty : public UBioSeqAct_InteractProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_GetPropertyArtPlaceable
// 0x0000 (0x0170 - 0x0170)
class UBioSeqAct_GetPropertyArtPlaceable : public UBioSeqAct_GetProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_GetPropertyPawn
// 0x0000 (0x0170 - 0x0170)
class UBioSeqAct_GetPropertyPawn : public UBioSeqAct_GetProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_ModifyProperty
// 0x0000 (0x0170 - 0x0170)
class UBioSeqAct_ModifyProperty : public UBioSeqAct_InteractProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ModifyPropertyArtPlaceable
// 0x0000 (0x0170 - 0x0170)
class UBioSeqAct_ModifyPropertyArtPlaceable : public UBioSeqAct_ModifyProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_ModifyPropertyNavigation
// 0x0000 (0x0170 - 0x0170)
class UBioSeqAct_ModifyPropertyNavigation : public UBioSeqAct_ModifyProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ModifyPropertyPawn
// 0x0000 (0x0170 - 0x0170)
class UBioSeqAct_ModifyPropertyPawn : public UBioSeqAct_ModifyProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_Movie
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_Movie : public USequenceAction
{
public:
	class UTextureMovie*                               m_oTextureMovie;                                  		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsFinished : 1;                                		// 0x0100 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_NonCombatArea
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_NonCombatArea : public USequenceAction
{
public:
	unsigned long                                      m_bEnable : 1;                                    		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_OverrideStagePlacement
// 0x0048 (0x0140 - 0x00F8)
class UBioSeqAct_OverrideStagePlacement : public USequenceAction
{
public:
	class AActor*                                      m_aNode1;                                         		// 0x00F8 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_aNode2;                                         		// 0x0100 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_aNode3;                                         		// 0x0108 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_aNode4;                                         		// 0x0110 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_aPuppet1;                                       		// 0x0118 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_aPuppet101;                                     		// 0x0120 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_aPuppet2;                                       		// 0x0128 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_aPuppet201;                                     		// 0x0130 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_aStage;                                         		// 0x0138 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
	void SetNode ( class ABioStage* oStage, class AActor* aInput, struct FName nmNodeName );
};

// Class SFXGame.BioSeqAct_PauseGalaxyMap
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_PauseGalaxyMap : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_PlayLoadingMovie
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_PlayLoadingMovie : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_PMBase
// 0x002E (0x0126 - 0x00F8)
class UBioSeqAct_PMBase : public USequenceAction
{
public:
	struct FString                                     m_sObjectType;                                    		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sVarName;                                       		// 0x0108 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nIndex;                                         		// 0x0118 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevRegionIndex;                               		// 0x011C (0x0004) [0x0000000000000000]              
	int                                                m_nPrevPlotIndex;                                 		// 0x0120 (0x0004) [0x0000000000000000]              
	unsigned char                                      Region;                                           		// 0x0124 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x0125 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_PMCheckConditional
// 0x000B (0x0131 - 0x0126)
class UBioSeqAct_PMCheckConditional : public UBioSeqAct_PMBase
{
public:
	int                                                Param;                                            		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      OutValue : 1;                                     		// 0x012C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      Conditional;                                      		// 0x0130 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_PMCheckState
// 0x0007 (0x012D - 0x0126)
class UBioSeqAct_PMCheckState : public UBioSeqAct_PMBase
{
public:
	unsigned long                                      OutValue : 1;                                     		// 0x0128 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      State;                                            		// 0x012C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_PMExecuteConsequence
// 0x0007 (0x012D - 0x0126)
class UBioSeqAct_PMExecuteConsequence : public UBioSeqAct_PMBase
{
public:
	int                                                Param;                                            		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Consequence;                                      		// 0x012C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_PMExecuteTransition
// 0x0007 (0x012D - 0x0126)
class UBioSeqAct_PMExecuteTransition : public UBioSeqAct_PMBase
{
public:
	int                                                Param;                                            		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Transition;                                       		// 0x012C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_PositionFSActors
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_PositionFSActors : public USequenceAction
{
public:
	unsigned long                                      m_bRestoreActors : 1;                             		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_QALog
// 0x0014 (0x010C - 0x00F8)
class UBioSeqAct_QALog : public USequenceAction
{
public:
	struct FString                                     m_sFileName;                                      		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bOverwrite : 1;                                 		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIncludeObjComment : 1;                           		// 0x0108 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ScalarMathUnit
// 0x001D (0x0115 - 0x00F8)
class UBioSeqAct_ScalarMathUnit : public USequenceAction
{
public:
	int                                                IntX;                                             		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                IntY;                                             		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                IntZ;                                             		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              FloatX;                                           		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              FloatY;                                           		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              FloatZ;                                           		// 0x010C (0x0004) [0x0000000000000000]              
	unsigned long                                      XIsFloat : 1;                                     		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      YIsFloat : 1;                                     		// 0x0110 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      ZIsFloat : 1;                                     		// 0x0110 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      Operation;                                        		// 0x0114 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_SetAnimNodeBlend
// 0x001C (0x0114 - 0x00F8)
class UBioSeqAct_SetAnimNodeBlend : public USequenceAction
{
public:
	struct FName                                       nmTargetNode;                                     		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    oPawn;                                            		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight;                                          		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBlendTime;                                       		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nTargetChild;                                     		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_SetCameraToBone
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_SetCameraToBone : public USequenceAction
{
public:
	float                                              m_fFOV;                                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bRestoreCamera : 1;                             		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_SetEnvironmentEffectIntensity
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_SetEnvironmentEffectIntensity : public USequenceAction
{
public:
	float                                              m_fIntensity;                                     		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fBlendTime;                                     		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_SetGestureMode
// 0x0025 (0x011D - 0x00F8)
class UBioSeqAct_SetGestureMode : public USequenceAction
{
public:
	struct TArray<struct FString>                      ActorTags;                                        		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class ABioPawn*>                     m_aPawns;                                         		// 0x0108 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bForActionStation : 1;                          		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      GestureMode;                                      		// 0x011C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_SetLightEnvQuality
// 0x0001 (0x00F9 - 0x00F8)
class UBioSeqAct_SetLightEnvQuality : public USequenceAction
{
public:
	unsigned char                                      Quality;                                          		// 0x00F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_SetSkelControl
// 0x0020 (0x0118 - 0x00F8)
class UBioSeqAct_SetSkelControl : public USequenceAction
{
public:
	struct FName                                       nmTargetController;                               		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    oPawn;                                            		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fStrengthTarget;                                  		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBlendInTime;                                     		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBlendOutTime;                                    		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSetStrengthFromAnimNode : 1;                     		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_SetStreamingState
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_SetStreamingState : public USequenceAction
{
public:
	struct FName                                       StateName;                                        		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      NewValue : 1;                                     		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
	void RetouchTriggers ( );
};

// Class SFXGame.BioSeqAct_SetSuperMode
// 0x0011 (0x0109 - 0x00F8)
class UBioSeqAct_SetSuperMode : public USequenceAction
{
public:
	struct TArray<class ABioPawn*>                     m_aoPawn;                                         		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      m_eMode;                                          		// 0x0108 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_SetSuperModeWithWeapon
// 0x000C (0x0115 - 0x0109)
class UBioSeqAct_SetSuperModeWithWeapon : public UBioSeqAct_SetSuperMode
{
public:
	int                                                nTweedleDee;                                      		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                nTweedleDum;                                      		// 0x0110 (0x0004) [0x0000000000000000]              
	unsigned char                                      eWeapon;                                          		// 0x0114 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_SetWeapon
// 0x0014 (0x010C - 0x00F8)
class UBioSeqAct_SetWeapon : public USequenceAction
{
public:
	class UClass*                                      cWeapon;                                          		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    oPawn;                                            		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                nWeapon;                                          		// 0x0108 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_ShouldShowSplashSequence
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_ShouldShowSplashSequence : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ShowMessageBox
// 0x0034 (0x012C - 0x00F8)
class UBioSeqAct_ShowMessageBox : public USequenceAction
{
public:
	struct TArray<struct FString>                      sVariableLines;                                   		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FString>                      sMessageLines;                                    		// 0x0108 (0x0010) [0xC000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UFont*                                       m_font;                                           		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      m_colorForeground;                                		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      m_colorBackground;                                		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_isActivated : 1;                                		// 0x0128 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_SkillGame_Base
// 0x0011 (0x011D - 0x010C)
class UBioSeqAct_SkillGame_Base : public USeqAct_Latent
{
public:
	int                                                m_nStartingResource;                              		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nPhase2Resource;                                		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nPhase2Time;                                    		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bCompleted : 1;                                 		// 0x0118 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bRewardOnTimeFail : 1;                          		// 0x0118 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      m_CompletionState;                                		// 0x011C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnCancel ( );
	void OnFailure ( );
	void OnSuccess ( int nRemainingResources );
};

// Class SFXGame.BioSeqAct_SkillGame_Bypass
// 0x000F (0x012C - 0x011D)
class UBioSeqAct_SkillGame_Bypass : public UBioSeqAct_SkillGame_Base
{
public:
	int                                                m_nNumToSpawn;                                    		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nPCBurnDown;                                    		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nConsoleBurnDown;                               		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void OnFailure ( );
	void OnSuccess ( int nRemainingResources );
};

// Class SFXGame.BioSeqAct_SkillGame_Decryption
// 0x000F (0x012C - 0x011D)
class UBioSeqAct_SkillGame_Decryption : public UBioSeqAct_SkillGame_Base
{
public:
	int                                                m_nPercentDanger;                                 		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nPercentGood;                                   		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSpeed;                                         		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void OnFailure ( );
	void OnSuccess ( int nRemainingResources );
};

// Class SFXGame.BioSeqAct_StopLoadingMovie
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_StopLoadingMovie : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_TeleportToObject
// 0x0014 (0x010C - 0x00F8)
class UBioSeqAct_TeleportToObject : public USequenceAction
{
public:
	class AActor*                                      m_oActor;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oTarget;                                        		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bUseTargetOrientation : 1;                      		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDisableCollision : 1;                          		// 0x0108 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bDisablePhysics : 1;                            		// 0x0108 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bSnapToFloor : 1;                               		// 0x0108 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_ToggleLightEnv
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_ToggleLightEnv : public USeqAct_Toggle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqCond_CheckActorLOS
// 0x0000 (0x00DC - 0x00DC)
class UBioSeqCond_CheckActorLOS : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqEvt_AbilityDisabled
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_AbilityDisabled : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_AbilityEnabled
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_AbilityEnabled : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_AreaMap
// 0x0012 (0x0138 - 0x0126)
class UBioSeqEvt_AreaMap : public USequenceEvent
{
public:
	struct FString                                     sEvent;                                           		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_BackgroundStreamingDone
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_BackgroundStreamingDone : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqEvt_CinematicSkipped
// 0x0012 (0x0138 - 0x0126)
class UBioSeqEvt_CinematicSkipped : public USequenceEvent
{
public:
	struct FString                                     sEvent;                                           		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_Conversation
// 0x0013 (0x0139 - 0x0126)
class UBioSeqEvt_Conversation : public USequenceEvent
{
public:
	struct FName                                       sScriptName;                                      		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioConversation*                            Conv;                                             		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eScriptType;                                      		// 0x0138 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_ConvNode
// 0x000E (0x0134 - 0x0126)
class UBioSeqEvt_ConvNode : public USequenceEvent
{
public:
	int                                                m_nNodeID;                                        		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nConvResRefID;                                  		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bSetWaitFlags : 1;                              		// 0x0130 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_ForegroundStreamingDone
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_ForegroundStreamingDone : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqEvt_GalaxyMap
// 0x001A (0x0140 - 0x0126)
class UBioSeqEvt_GalaxyMap : public USequenceEvent
{
public:
	struct FString                                     sEvent;                                           		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       EventParameter;                                   		// 0x0138 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_MemberRemoved
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_MemberRemoved : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqEvt_OnPlayerActivate
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_OnPlayerActivate : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSequenceLatentAction
// 0x0004 (0x0110 - 0x010C)
class UBioSequenceLatentAction : public USeqAct_Latent
{
public:
	unsigned long                                      bHasTargets : 1;                                  		// 0x010C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventUpdateOp ( float DeltaTime );
};

// Class SFXGame.BioSeqAct_BlackScreen
// 0x0009 (0x0119 - 0x0110)
class UBioSeqAct_BlackScreen : public UBioSequenceLatentAction
{
public:
	float                                              fTimeExpired;                                     		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTimeDelay;                                       		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eBlackScreenAction;                             		// 0x0118 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool UpdateOp ( float fDeltaT );
	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_ChangeAPState
// 0x001C (0x012C - 0x0110)
class UBioSeqAct_ChangeAPState : public UBioSequenceLatentAction
{
public:
	class ABioArtPlaceable*                            oPlaceable;                                       		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       nmNewState;                                       		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       nmNamedTransiton;                                 		// 0x0120 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bChangeImmediately : 1;                           		// 0x0128 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFail : 1;                                        		// 0x0128 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_FaceOnlyVO
// 0x00BE (0x01CE - 0x0110)
class UBioSeqAct_FaceOnlyVO : public UBioSequenceLatentAction
{
public:
	struct FMap_Mirror                                 m_mapUsedEnums;                                   		// 0x0110 (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<int>                                 m_aStrRefs;                                       		// 0x0158 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sSubtitle;                                      		// 0x0168 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sFaceFXAnim;                                    		// 0x0178 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UBioConversation*                            m_pConversation;                                  		// 0x0188 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmSpeakerTag;                                   		// 0x0190 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_pActor;                                         		// 0x0198 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseBaseSoundObject*                       m_pAudioObject;                                   		// 0x01A0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UFaceFXAnimSet*                              m_pFaceFXSet;                                     		// 0x01A8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_srLineStrRef;                                   		// 0x01B0 (0x0004) [0x0000000000000000]              
	float                                              m_fPadLineLength;                                 		// 0x01B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_srActorNameOverride;                            		// 0x01B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nPickedSpeakerIndex;                            		// 0x01BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLineLength;                                    		// 0x01C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPreLoadTimer;                                  		// 0x01C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bForceHideSubtitles : 1;                        		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bIgnoreHenchmanSquadCheck : 1;                  		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bPlaySoundOnly : 1;                             		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bDisableDelayUntilPreload : 1;                  		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bErrorInActivation : 1;                         		// 0x01C8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bKilledVO : 1;                                  		// 0x01C8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bPreLoadRequested : 1;                          		// 0x01C8 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bPlayRequested : 1;                             		// 0x01C8 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bAllowInConversation : 1;                       		// 0x01C8 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned char                                      m_eSpeakerList;                                   		// 0x01CC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eConvLine;                                      		// 0x01CD (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_FireWeaponAt
// 0x002D (0x013D - 0x0110)
class UBioSeqAct_FireWeaponAt : public UBioSequenceLatentAction
{
public:
	class ABioPawn*                                    oPawn;                                            		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oTarget;                                          		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fReqStab;                                         		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAbortStab;                                       		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fReqRadius;                                       		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeOut;                                         		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nReason;                                        		// 0x0130 (0x0004) [0x0000000000000000]              
	int                                                nCompletionReason;                                		// 0x0134 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIgnorePerception : 1;                            		// 0x0138 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDone : 1;                                      		// 0x0138 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      m_eFireMode;                                      		// 0x013C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_MoveToObject
// 0x0020 (0x0130 - 0x0110)
class UBioSeqAct_MoveToObject : public UBioSequenceLatentAction
{
public:
	class APawn*                                       oPawn;                                            		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oTarget;                                          		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMoveTolerance;                                   		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nCompletionReason;                                		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                m_nReason;                                        		// 0x0128 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWalking : 1;                                     		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRequiresPrecisionMovement : 1;                   		// 0x012C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSetOrientationToTarget : 1;                      		// 0x012C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDesiredOrientationSet : 1;                       		// 0x012C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bDone : 1;                                      		// 0x012C (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_MovieBink
// 0x001C (0x012C - 0x0110)
class UBioSeqAct_MovieBink : public UBioSequenceLatentAction
{
public:
	struct FString                                     m_sMovieName;                                     		// 0x0110 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UWwiseEvent*                                 m_wwiseEvent;                                     		// 0x0120 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bFiredBinkStartEvent : 1;                       		// 0x0128 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bKeepTryingToPlay : 1;                          		// 0x0128 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void eventDeactivated ( );
	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_ShowChoiceGUI
// 0x0041 (0x0151 - 0x0110)
class UBioSeqAct_ShowChoiceGUI : public UBioSequenceLatentAction
{
public:
	class UBioSFHandler_ChoiceGUI*                     m_ChoiceGUIHandler;                               		// 0x0110 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmTag;                                          		// 0x0118 (0x0008) [0x0000000000000000]              
	struct FName                                       m_nmResource;                                     		// 0x0120 (0x0008) [0x0000000000000000]              
	int                                                m_srTitle;                                        		// 0x0128 (0x0004) [0x0000000000000000]              
	int                                                m_srSubTitle;                                     		// 0x012C (0x0004) [0x0000000000000000]              
	int                                                m_srAButton;                                      		// 0x0130 (0x0004) [0x0000000000000000]              
	int                                                m_srBButton;                                      		// 0x0134 (0x0004) [0x0000000000000000]              
	int                                                m_srOptionalPaneTitleText;                        		// 0x0138 (0x0004) [0x0000000000000000]              
	int                                                m_srOptionalPaneItemValuePrefixText;              		// 0x013C (0x0004) [0x0000000000000000]              
	int                                                m_nSelectionIndex;                                		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nSelectionID;                                   		// 0x0144 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nInitialSelectionID;                            		// 0x0148 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_ShowOptionalPane : 1;                           		// 0x014C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bAutoClose : 1;                                 		// 0x014C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bFinished : 1;                                  		// 0x014C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bAborted : 1;                                   		// 0x014C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bAPressed : 1;                                  		// 0x014C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bWasPaused : 1;                                 		// 0x014C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned char                                      m_eResource;                                      		// 0x0150 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void ChoiceGUIInputPressed ( unsigned long bAPressed, int nContext );
	bool UpdateOp ( float fDeltaT );
};

// Class SFXGame.BioSeqAct_StageSwitchCamera
// 0x001A (0x012A - 0x0110)
class UBioSeqAct_StageSwitchCamera : public UBioSequenceLatentAction
{
public:
	struct FName                                       explicitCamera;                                   		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioStage*                                   Stage;                                            		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                Intimacy;                                         		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      useForNextCamera : 1;                             		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      forceCrossingLineOfAction : 1;                    		// 0x0124 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      saveOldCameraData : 1;                            		// 0x0124 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      standardCamera;                                   		// 0x0128 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Camera;                                           		// 0x0129 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int BioGetCameraNumber ( );
};

// Class SFXGame.BioSeqAct_StartConversation
// 0x0018 (0x0128 - 0x0110)
class UBioSeqAct_StartConversation : public UBioSequenceLatentAction
{
public:
	class UBioConversation*                            Conv;                                             		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oOwner;                                         		// 0x0118 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fInterruptRange;                                		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      setTargetBusyForDuration : 1;                     		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bConvReRunDetected : 1;                         		// 0x0124 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bNoGestures : 1;                                		// 0x0124 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bLookAtActive : 1;                              		// 0x0124 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bDisableLookAtRangeCheck : 1;                   		// 0x0124 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bDisableDelayUntilPreload : 1;                  		// 0x0124 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bPreLoading : 1;                                		// 0x0124 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bPlayRequested : 1;                             		// 0x0124 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bEnterCombatModeOnEnd : 1;                      		// 0x0124 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	bool ConversationStart ( float fDelta );
};

// Class SFXGame.SFXSeqAct_StartConversation
// 0x000C (0x0134 - 0x0128)
class USFXSeqAct_StartConversation : public UBioSeqAct_StartConversation
{
public:
	class ABioStage*                                   m_pStage;                                         		// 0x0128 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nbNodes;                                        		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ConversationStart ( float fDelta );
};

// Class SFXGame.BioSeqAct_TurnTowards
// 0x002C (0x013C - 0x0110)
class UBioSeqAct_TurnTowards : public UBioSequenceLatentAction
{
public:
	struct FRotator                                    rDesiredRot;                                      		// 0x0110 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    rPreviousPawnRotation;                            		// 0x011C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      oTurnActor;                                       		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oTarget;                                          		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForce : 1;                                       		// 0x0138 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStarted : 1;                                     		// 0x0138 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bFailedToStart : 1;                               		// 0x0138 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_WalkWaypointSet
// 0x0015 (0x0125 - 0x0110)
class UBioSeqAct_WalkWaypointSet : public UBioSequenceLatentAction
{
public:
	class ARoute*                                      m_oRoute;                                         		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMoveTolerance;                                 		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nNextWaypoint;                                  		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bStartAtNearestPoint : 1;                       		// 0x0120 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bWalking : 1;                                   		// 0x0120 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bCountingUp : 1;                                		// 0x0120 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bSkipPathNodes : 1;                             		// 0x0120 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bDone : 1;                                      		// 0x0120 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned char                                      m_eWalkType;                                      		// 0x0124 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.SFXSeqAct_AIGoHere
// 0x002C (0x013C - 0x0110)
class USFXSeqAct_AIGoHere : public UBioSequenceLatentAction
{
public:
	class ABioPawn*                                    m_Pawn;                                           		// 0x0110 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ANavigationPoint*                            m_TargetNav;                                      		// 0x0118 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ANavigationPoint*                            m_TargetNavAtInvalidation;                        		// 0x0120 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTimeOut;                                       		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInvalidateRange;                               		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_TimeRemaining;                                  		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_UpdateTimer;                                    		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bInvalidateOnFlank : 1;                         		// 0x0138 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bInstanceLogging : 1;                           		// 0x0138 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bArrivedPinFired : 1;                           		// 0x0138 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bTargetInvalidated : 1;                         		// 0x0138 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ScriptPreActorHandle ( class AActor* inActor );
	bool TryInvalidateTargetFlank ( );
	bool TryInvalidateTargetRange ( float fRangeToTargetInUU );
	void ResetUpdateTimer ( );
	void ClearGoHereTarget ( );
	void InvalidateGoHereTarget ( );
	bool eventUpdateOp ( float DeltaTime );
	void eventDeactivated ( );
	void eventActivated ( );
};

// Class SFXGame.BioSeqVar_ChoiceGUIData
// 0x0008 (0x00BC - 0x00B4)
class UBioSeqVar_ChoiceGUIData : public USeqVar_Object
{
public:
	class USFXGameChoiceGUIData*                       m_ChoiceData;                                     		// 0x00B4 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqVar_ObjectFindByTag
// 0x0014 (0x00C8 - 0x00B4)
class UBioSeqVar_ObjectFindByTag : public USeqVar_Object
{
public:
	struct FString                                     m_sObjectTagToFind;                               		// 0x00B4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bSearchUniqueTag : 1;                           		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqVar_ObjectListFindByTag
// 0x0010 (0x00D4 - 0x00C4)
class UBioSeqVar_ObjectListFindByTag : public USeqVar_ObjectList
{
public:
	struct FString                                     m_sObjectTagToFind;                               		// 0x00C4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqVar_StoryManagerBool
// 0x002F (0x00C3 - 0x0094)
class UBioSeqVar_StoryManagerBool : public USeqVar_Bool
{
public:
	struct FString                                     m_sVarName;                                       		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sRefName;                                       		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nIndex;                                         		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevRegionIndex;                               		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevPlotIndex;                                 		// 0x00BC (0x0004) [0x0000000000000000]              
	unsigned char                                      Region;                                           		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x00C1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      State;                                            		// 0x00C2 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqVar_StoryManagerFloat
// 0x002F (0x00C3 - 0x0094)
class UBioSeqVar_StoryManagerFloat : public USeqVar_Float
{
public:
	struct FString                                     m_sVarName;                                       		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sRefName;                                       		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nIndex;                                         		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevRegionIndex;                               		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevPlotIndex;                                 		// 0x00BC (0x0004) [0x0000000000000000]              
	unsigned char                                      Region;                                           		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x00C1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Float;                                            		// 0x00C2 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqVar_StoryManagerInt
// 0x002F (0x00C3 - 0x0094)
class UBioSeqVar_StoryManagerInt : public USeqVar_Int
{
public:
	struct FString                                     m_sVarName;                                       		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sRefName;                                       		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nIndex;                                         		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevRegionIndex;                               		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevPlotIndex;                                 		// 0x00BC (0x0004) [0x0000000000000000]              
	unsigned char                                      Region;                                           		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x00C1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Int;                                              		// 0x00C2 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqVar_StoryManagerStateId
// 0x002F (0x00C3 - 0x0094)
class UBioSeqVar_StoryManagerStateId : public USeqVar_Int
{
public:
	struct FString                                     m_sVarName;                                       		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sRefName;                                       		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nIndex;                                         		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevRegionIndex;                               		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevPlotIndex;                                 		// 0x00BC (0x0004) [0x0000000000000000]              
	unsigned char                                      Region;                                           		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x00C1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      State;                                            		// 0x00C2 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqAct_AIFactory
// 0x001F (0x0190 - 0x0171)
class USFXSeqAct_AIFactory : public USeqAct_ActorFactory
{
public:
	class ABioBaseSquad*                               Squad;                                            		// 0x0174 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      VisibilitySource;                                 		// 0x017C (0x0008) [0x0000000000000000]              
	struct FName                                       nmTag;                                            		// 0x0184 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAutoAcquireEnemy : 1;                            		// 0x018C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAutoNotify : 1;                                  		// 0x018C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTestSpawnVisibility : 1;                         		// 0x018C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAbortOnFailSpawn : 1;                            		// 0x018C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bPlayCustomActivationAnim : 1;                    		// 0x018C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAbortSpawns : 1;                                 		// 0x018C (0x0004) [0x0000000000000000] [0x00000020] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Deactivated ( );
	void Activated ( );
};

// Class SFXGame.SFXSeqAct_ChangeBehaviour
// 0x0019 (0x0111 - 0x00F8)
class USFXSeqAct_ChangeBehaviour : public USequenceAction
{
public:
	class UClass*                                      ControllerClass;                                  		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oPawn;                                            		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       nmBehaviour;                                      		// 0x0108 (0x0008) [0x0000000000000000]              
	unsigned char                                      eBehaviour;                                       		// 0x0110 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.SFXSeqAct_CharCreateClass
// 0x0000 (0x00F8 - 0x00F8)
class USFXSeqAct_CharCreateClass : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqAct_CharCreateCrust
// 0x0020 (0x012C - 0x010C)
class USFXSeqAct_CharCreateCrust : public USeqAct_Latent
{
public:
	class ABioVisualEffect*                            CrustEffectActor;                                 		// 0x010C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    PreviousTarget;                                   		// 0x0114 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    CurrentTarget;                                    		// 0x011C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioVFXTemplate*                             CrustToApply;                                     		// 0x0124 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqAct_CloseChoiceGui
// 0x0008 (0x0100 - 0x00F8)
class USFXSeqAct_CloseChoiceGui : public USequenceAction
{
public:
	struct FName                                       m_nmTag;                                          		// 0x00F8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqAct_CollectorPossess
// 0x0008 (0x0114 - 0x010C)
class USFXSeqAct_CollectorPossess : public USeqAct_Latent
{
public:
	class ABioPawn*                                    oPossessedPawn;                                   		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventPossessPawn ( class ABioPawn* oPawn );
};

// Class SFXGame.SFXSeqAct_CreateNotification
// 0x0024 (0x011C - 0x00F8)
class USFXSeqAct_CreateNotification : public USequenceAction
{
public:
	class UTexture*                                    oImage;                                           		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       nRemoteEvent;                                     		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                Priority;                                         		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                sTitle;                                           		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                sSubtitle;                                        		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                sBody;                                            		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDisplayTime;                                     		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.SFXSeqAct_EnableAI
// 0x0004 (0x0110 - 0x010C)
class USFXSeqAct_EnableAI : public USeqAct_Latent
{
public:
	unsigned long                                      m_bEnable : 1;                                    		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bFirstPass : 1;                                 		// 0x010C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.SFXSeqAct_FireWeaponAt
// 0x0024 (0x0130 - 0x010C)
class USFXSeqAct_FireWeaponAt : public USeqAct_Latent
{
public:
	class ABioPawn*                                    oPawn;                                            		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oTarget;                                          		// 0x0114 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeOut;                                         		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nCompletionReason;                                		// 0x0120 (0x0004) [0x0000000000000000]              
	float                                              m_fTotalTimeRunning;                              		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                m_nReason;                                        		// 0x0128 (0x0004) [0x0000000000000000]              
	unsigned long                                      bCheckLOS : 1;                                    		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDone : 1;                                      		// 0x012C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void eventFireWeapon ( class AActor* pTarget );
	void eventCancelFire ( );
	void FireWeaponCallback ( int nReason );
};

// Class SFXGame.SFXSeqAct_InitLoadingMovies
// 0x0014 (0x010C - 0x00F8)
class USFXSeqAct_InitLoadingMovies : public USequenceAction
{
public:
	class UBioLoadingMovie*                            Movie;                                            		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioSFScreenTip*                             ScreenTip;                                        		// 0x0100 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	unsigned long                                      HideScaleform : 1;                                		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RequiresExplicitStop : 1;                         		// 0x0108 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      PlayToCompletion : 1;                             		// 0x0108 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      StreamFromDisc : 1;                               		// 0x0108 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqAct_IsPawnInCover
// 0x0008 (0x0100 - 0x00F8)
class USFXSeqAct_IsPawnInCover : public USequenceAction
{
public:
	class AActor*                                      oTargetActor;                                     		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.SFXSeqAct_MoveToNode
// 0x0028 (0x0134 - 0x010C)
class USFXSeqAct_MoveToNode : public USeqAct_Latent
{
public:
	class ABioPawn*                                    oPawn;                                            		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oMoveTarget;                                      		// 0x0114 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMoveOffset;                                      		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeOut;                                         		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTotalTimeRunning;                              		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                nCompletionReason;                                		// 0x0128 (0x0004) [0x0000000000000000]              
	int                                                m_nReason;                                        		// 0x012C (0x0004) [0x0000000000000000]              
	unsigned long                                      bWalking : 1;                                     		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDone : 1;                                      		// 0x0130 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bWasWalkingBefore : 1;                          		// 0x0130 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void eventMoveTo ( );
	void eventCancelMove ( );
	void MoveToCallback ( int nReason );
};

// Class SFXGame.SFXSeqAct_SetStringref
// 0x0008 (0x0100 - 0x00F8)
class USFXSeqAct_SetStringref : public USeqAct_SetSequenceVariable
{
public:
	int                                                Target;                                           		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                Value;                                            		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.SFXSeqAct_UsePowerOn
// 0x002D (0x0139 - 0x010C)
class USFXSeqAct_UsePowerOn : public USeqAct_Latent
{
public:
	class APawn*                                       oPawn;                                            		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       nmPower;                                          		// 0x0114 (0x0008) [0x0000000000000000]              
	class AActor*                                      oTarget;                                          		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeOut;                                         		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nCompletionReason;                                		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              m_fTotalTimeRunning;                              		// 0x012C (0x0004) [0x0000000000000000]              
	int                                                m_nReason;                                        		// 0x0130 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDone : 1;                                      		// 0x0134 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      ePower;                                           		// 0x0138 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void eventUsePower ( class AActor* pTarget );
	void eventCancelPower ( );
	void UsePowerCallback ( int nReason );
};

// Class SFXGame.SFXSeqAct_WaitForStreamingComplete
// 0x0004 (0x0110 - 0x010C)
class USFXSeqAct_WaitForStreamingComplete : public USeqAct_Latent
{
public:
	unsigned long                                      bWaitForVisibleOnly : 1;                          		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqCond_Platform
// 0x0000 (0x00DC - 0x00DC)
class USFXSeqCond_Platform : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqEvt_StorageDeviceReconnected
// 0x0002 (0x0128 - 0x0126)
class USFXSeqEvt_StorageDeviceReconnected : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqEvt_Touch
// 0x0000 (0x015C - 0x015C)
class USFXSeqEvt_Touch : public USeqEvent_Touch
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqVar_SavedBool
// 0x0010 (0x00A4 - 0x0094)
class USFXSeqVar_SavedBool : public USeqVar_Bool
{
public:
	struct FGuid                                       MyGuid;                                           		// 0x0094 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXOnlineComponentUI
// 0x0078 (0x010C - 0x0094)
class USFXOnlineComponentUI : public USFXOnlineComponent
{
public:
	struct FPointer                                    VfTable_IISFXOnlineComponentUserInterface;        		// 0x0094 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class USFXSFHandler_EANetworking*                  m_oGUI;                                           		// 0x009C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       HandlerId;                                        		// 0x00A4 (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __ExternalCallback_OnDisplayNotification__Delegate;		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ExternalCallback_ClearNotifications__Delegate;  		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ExternalCallback_SetState__Delegate;            		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ExternalCallback_CloseEANetworking__Delegate;   		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ExternalCallback_HasCerberusDLC__Delegate;      		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ExternalCallback_ShowStore__Delegate;           		// 0x00FC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ClearDelegates ( );
	void eventShowStore ( struct TArray<struct FSFXOfferDescriptor> aOffers );
	void eventHasCerberusDLC ( unsigned long bVal );
	void eventClearNotifications ( );
	void eventOnDisplayNotification ( unsigned char Type, struct FString MessageData, struct FString Title, struct FString Image );
	void eventSetState ( unsigned char eState );
	void eventCloseEANetworking ( );
	void MessageBoxCallback ( unsigned long bAPressed, int context );
	void SubmitParentEmail ( unsigned long bContinue, struct FString ParentEmail );
	void SubmitAccountDemographics ( unsigned long bContinue, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode );
	void SubmitEmailPasswordMismatch ( struct FString Email, struct FString Password, unsigned char eReturnCode );
	void SubmitStore ( struct TArray<int> aiChosen );
	void SubmitCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, unsigned long bSubmit );
	void SubmitCerberusWelcomeMessage ( );
	void SubmitRedeemCode ( unsigned long bContinue, struct FString i_sCode );
	void SubmitCerberusIntro ( unsigned char eReturnCode );
	void SubmitNucleusWelcomeMessage ( );
	void SubmitTermsOfService ( unsigned long bAccept );
	void SubmitCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bSubmit );
	void SubmitMessageBox ( unsigned char eReturnEnum );
	void SubmitNucleusLogin ( struct FString Email, struct FString Password, unsigned char eReturnCode );
	void SubmitIntroPage ( unsigned long bContinue );
	void ShowParentEmail ( );
	void ShowAccountDemographics ( struct TArray<struct FString> m_CountryCodeList, struct TArray<struct FString> m_CountryDisplayList );
	void ShowEmailPasswordMismatch ( struct FString Email, struct FString Password );
	void ShowCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, struct TArray<struct FString> m_CountryCodeList, struct TArray<struct FString> m_CountryDisplayList );
	void ShowCerberusWelcomeMessage ( );
	void ShowRedeemCode ( );
	void ShowCerberusIntro ( );
	void ShowNucleusWelcomeMessage ( );
	void ShowTermsOfService ( struct FString i_sTermsOfService, unsigned long bTOSChanged );
	void ShowCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bUnderage );
	void ShowMessageBoxWait ( int srMessage, int srButton1Text, int srButton2Text );
	void ShowMessageBox ( struct FString sTitle, struct FString sMessage, struct FString sButton1Text, struct FString sButton2Text, struct FString sButton3Text );
	void ShowNucleusLogin ( struct FString Email, struct FString Password, int eScreenState );
	void ShowIntroPage ( );
	void ExternalCallback_ShowStore ( struct TArray<struct FSFXOfferDescriptor> aOffers );
	void ExternalCallback_HasCerberusDLC ( unsigned long bVal );
	void ExternalCallback_CloseEANetworking ( );
	void ExternalCallback_SetState ( unsigned char eState );
	void ExternalCallback_ClearNotifications ( );
	void ExternalCallback_OnDisplayNotification ( unsigned char Type, struct FString MessageData, struct FString Title, struct FString Image );
	void AcceptTOS ( unsigned long bAccept );
	void DownloadContent ( unsigned long bCerberusContent );
	void Disconnect ( );
	void Connect ( unsigned char connectMode );
	void ClearGui ( );
	void SetGui ( class USFXSFHandler_EANetworking* i_NetworkingGUI );
	void OnTick ( class USFXOnlineEvent* oEvent );
	struct FName GetAPIName ( );
	void OnRelease ( );
	void OnInitialize ( class USFXOnlineSubsystem* oOnlineSubsystem );
};

// Class SFXGame.BioBaseSquad
// 0x005A (0x02E4 - 0x028A)
class ABioBaseSquad : public AActor
{
public:
	struct TArray<struct FMemberData>                  Members;                                          		// 0x028C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class ABioBaseSquad*>                m_aPerceivedSquads;                               		// 0x029C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class ABioPlaypenVolume*>            PlaypenVolumes;                                   		// 0x02AC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      SquadFaction;                                     		// 0x02BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioBaseSquad*                               m_pHackedSquad;                                   		// 0x02C4 (0x0008) [0x0000000000000000]              
	struct FColor                                      PlaypenAdditiveVolumeColour;                      		// 0x02CC (0x0004) [0x0000000000000000]              
	struct FColor                                      PlaypenSubtractiveVolumeColour;                   		// 0x02D0 (0x0004) [0x0000000000000000]              
	struct FColor                                      SquadMemberLineColour;                            		// 0x02D4 (0x0004) [0x0000000000000000]              
	int                                                ObjVersion;                                       		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fThreatModifier;                                		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSquadEnabled : 1;                                		// 0x02E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bEngagedHostileAction : 1;                      		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDisableSquad ( );
	void eventEnableSquad ( );
	int GetMaxHazardLevel ( );
	class ABioBaseSquad* MakeHackable ( );
	unsigned char IsBioPawnValid ( class AActor* oTestActor, unsigned long bRequiresTargetFlag );
	void eventMemberRemoved ( class APawn* oPawn );
	void RemoveDyingMember ( class APawn* oPawn );
	int eventAddMember ( class APawn* Pawn, unsigned long bCheckPlaypens );
	int GetNumberOfLiveMembers ( );
	class UBioEpicPawnBehavior* GetPawnBehavior ( class AActor* oActor );
	class ABioBaseSquad* GetSquad ( class AActor* oActor );
	class APawn* FindSquadMemberByTag ( struct FName nmTag );
	bool Died ( class APawn* member, class AController* Killer );
	void NotifyPlaypenChanged ( );
	void eventNotifyNoEnemiesPerceived ( );
	void eventNotifyEnemyPerceived ( );
	class AActor* GetPlaypenReturnPoint ( class APawn* oPawn );
	class AActor* GetPlaypenNavOrigin ( class APawn* oPawn );
	void UpdatePlaypen ( );
	bool IsVolumeInPlaypen ( class ABioPlaypenVolume* Volume );
	void RemoveVolumeFromPlaypen ( class ABioPlaypenVolume* Volume );
	void AddVolumeToPlaypen ( class ABioPlaypenVolume* Volume );
	bool HasPlaypen ( );
	bool IsActorInSubtractivePlaypen ( class AActor* oActor );
	bool IsActorInPlaypen ( class AActor* oActor );
	bool IsPositionInSubtractivePlaypen ( struct FVector* vLocation );
	bool IsPositionInPlaypen ( struct FVector* vLocation );
	void PerceivedPawns ( class APawn** oPawn );
	void SquadMembers ( class ABioAiController** oController );
	bool CanShoot ( class APawn* oSource, class AActor* oTarget );
	bool CanShootExposed ( class APawn* oSource, class AActor* oTarget, int* bExposed );
	void RemoveSquadFromPerception ( class ABioBaseSquad* pSquad );
	bool IsPawnPerceived ( class APawn* pPawn );
	bool IsSquadPerceived ( class ABioBaseSquad* pSquad );
	void AddSquadToPerception ( class ABioBaseSquad* pSquad, class APawn* pSource, class APawn* pTarget );
	void SetMemberMoveIndicator ( int nIndex, class ABioTacticalMoveToIndicator* oIndicator );
	class ABioTacticalMoveToIndicator* GetMemberMoveIndicator ( int nIndex );
	bool RemoveMemberByIndex ( int nIndex );
	bool RemoveMember ( class APawn* pPawn );
	void ClearSquad ( );
	int GetMemberIndex ( class APawn* pPawn );
	class APawn* GetMember ( int nIndex );
	class APawn* GetSquadLeader ( );
	int GetHackedSquadSize ( );
	int GetSquadSize ( );
	bool IsInSquad ( class APawn* pPawn );
};

// Class SFXGame.BioPlayerSquad
// 0x0115 (0x03F9 - 0x02E4)
class ABioPlayerSquad : public ABioBaseSquad
{
public:
	struct FSquadTargetData                            m_aSquadTargets[ 0x3 ];                           		// 0x02E4 (0x006C) [0x0000000000002000]              ( CPF_Transient )
	struct FSquadTargetData                            m_aSimpleSquadTargets[ 0x3 ];                     		// 0x0350 (0x006C) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    m_playerPawn;                                     		// 0x03BC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    m_InitialPlayerPawn;                              		// 0x03C4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       m_oSquadLeader;                                   		// 0x03CC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBio2DA*                                     m_oCreditsTable;                                  		// 0x03D4 (0x0008) [0x0000000000000000]              
	class UForceFeedbackWaveform*                      m_CoverWaveForm;                                  		// 0x03DC (0x0008) [0x0000000000000000]              
	float                                              m_fPerceptionTolerance;                           		// 0x03E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRevivalRange;                                  		// 0x03E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fPercentHealthOnResurrection;                   		// 0x03EC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fPercentHealthOnEndOfCombat;                    		// 0x03F0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned long                                      m_bSquadHasVehicle : 1;                           		// 0x03F4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bCombatEnabled : 1;                             		// 0x03F4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned char                                      m_eGameOverCondition;                             		// 0x03F8 (0x0001) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventMemberRemoved ( class APawn* oPawn );
	int eventGetSquadSizeFromScript ( );
	int GetSquadSize ( );
	int eventAddMember ( class APawn* Pawn, unsigned long bCheckPlaypens );
	bool IsFieldingInitialPlayerPawn ( );
	float GetPercentHealthOnResurrection ( );
	class APawn* GetSquadLeader ( );
	bool SetSquadLeader ( class APawn* pPawn );
	void SquadExitCombatMode ( );
	void SquadEnterCombatMode ( unsigned long bEngageEnemy );
	int GetSquadScanAbility ( );
	void RemoveDyingMember ( class APawn* oPawn );
	bool Died ( class APawn* pPawn, class AController* Killer );
	bool eventLookupCredits ( int nPlayerSquadLevel, struct FName nmCREDClass, int* nCredits );
	void eventNotifyNoEnemiesPerceived ( );
	void eventNotifyEnemyPerceived ( );
	void eventonPlayerEnterCover ( );
	bool eventOnPlayerSwitchStance ( unsigned char FromState, unsigned char ToState );
};

// Class SFXGame.BioFaction
// 0x001D (0x007D - 0x0060)
class UBioFaction : public UObject
{
public:
	struct TArray<unsigned char>                       SquadRelations;                                   		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  SquadIcon;                                        		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsImmuneToPhysics : 1;                         		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      SquadFaction;                                     		// 0x007C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsFriendly ( unsigned char Type );
	bool IsHostile ( unsigned char Type );
};

// Class SFXGame.BioFaction_Hacked
// 0x0003 (0x0080 - 0x007D)
class UBioFaction_Hacked : public UBioFaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioFaction_Player
// 0x0003 (0x0080 - 0x007D)
class UBioFaction_Player : public UBioFaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSquadHoldMarker
// 0x0024 (0x03B0 - 0x038C)
class ABioSquadHoldMarker : public ANavigationPoint
{
public:
	struct FString                                     BaseTag;                                          		// 0x038C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     LiftOffset;                                       		// 0x039C (0x000C) [0x0000000000000000]              
	class AInterpActor*                                MyLift;                                           		// 0x03A8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PostBeginPlay ( );
	void SetBaseByTag ( );
};

// Class SFXGame.BioSquadLinesComponent
// 0x0018 (0x0240 - 0x0228)
class UBioSquadLinesComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      vPlayPenLineColor;                                		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      vSquadLeaderColor;                                		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      vSquadMemberColor;                                		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      vSquadAssetColor;                                 		// 0x0234 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      vDynamicCoverColor;                               		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bInited : 1;                                      		// 0x023C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXTelemetry
// 0x00E4 (0x0144 - 0x0060)
class USFXTelemetry : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bEnableTelemetry : 1;                             		// 0x0068 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bInitialized : 1;                                 		// 0x0068 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAreDelegatesRegistered : 1;                      		// 0x0068 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bBootStarted : 1;                                 		// 0x0068 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bLoggedIn : 1;                                    		// 0x0068 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bOptOut : 1;                                      		// 0x0068 (0x0004) [0x0000000000000000] [0x00000020] 
	struct TArray<struct FTelemetryHookConfig>         ConfigHooks;                                      		// 0x006C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x007C (0x0048) UNKNOWN PROPERTY: MapProperty SFXGame.SFXTelemetry.Hooks
	struct TArray<struct FTelemetryPlotPoint_Milestone> MilestonePlotPoints;                              		// 0x00C4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<int>                                 GameDataPlotsInt;                                 		// 0x00D4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<int>                                 GameDataPlotsFloat;                               		// 0x00E4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<int>                                 GameDataPlotsBool;                                		// 0x00F4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<int>                                 BlacklistPlotsInt;                                		// 0x0104 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<int>                                 BlacklistPlotsFloat;                              		// 0x0114 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<int>                                 BlacklistPlotsBool;                               		// 0x0124 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPointer                                    pProtoHttp;                                       		// 0x0134 (0x0008) [0x0000000000001000]              ( CPF_Native )
	class USFXTelemetryGameSession*                    GameSession;                                      		// 0x013C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SendGameData ( unsigned char GameDataType );
	void SendMissionComplete ( );
	void SendCustomizationStr ( struct FString TargetName, struct FString sSelection, struct FString TargetType );
	void SendCustomization ( struct FString TargetName, int nSelection, struct FString TargetType );
	void IncSessionTeamDeaths ( int Amount );
	void IncSessionTeamKills ( int Amount );
	void IncSessionPlayerDeaths ( int Amount );
	void IncSessionPlayerKills ( int Amount );
	void IncSessionCombatScore ( int Amount );
	void IncSessionPlayerScore ( int Amount );
	void IncSessionXP ( int Amount );
	void SetContextCustomHeader ( struct FName ChunkName );
	void SetContextPlayerLevelFromCurrentRecord ( );
	void SetContextPlayerLevel ( int Level );
	void SetContextMap ( struct FName MapName );
	void SendTelemetryOnProfileReadComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void SendProfileDependentTelemetry ( unsigned char LocalUserNum );
	void eventInitConnectionDelegates ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void OnAuthenticate ( );
	void GetLoginAndPlayerInterface ( class UISFXOnlineComponentLogin** Login, class UOnlinePlayerInterface** PlayerInterface );
	void SendProfileDependentTelemetryNative ( );
	void OnDisconnect ( int Error, struct FString SessionId );
	bool IsCollectionEnabled ( );
	void AddClassNameToAttributeArray ( struct FString AttrName, struct FName cnData, struct TArray<struct FTelemetryAttribute>* Attributes );
	void AddBoolToAttributeArray ( struct FString AttrName, unsigned long bData, struct TArray<struct FTelemetryAttribute>* Attributes );
	void AddFloatToAttributeArray ( struct FString AttrName, float fData, struct TArray<struct FTelemetryAttribute>* Attributes );
	void AddIntToAttributeArray ( struct FString AttrName, int nData, struct TArray<struct FTelemetryAttribute>* Attributes );
	void AddStringToAttributeArray ( struct FString AttrName, struct TArray<struct FTelemetryAttribute>* Attributes, struct FString* sData );
	struct FString GenerateUniqueClassId ( class UObject* Object );
	struct FString GenerateUniqueClassIdFromName ( struct FName FullFriendlyName );
	struct FString GenerateUniqueClassIdFromString ( struct FString* FullFriendlyName );
	struct FString VectorToTelemetryString ( struct FVector V );
	void SendArray ( struct FName HookName, unsigned long bNeedFlush, struct TArray<struct FTelemetryAttribute>* Attributes );
	void SendBool ( struct FName HookName, struct FString AttrName, unsigned long bValue, unsigned long bNeedFlush );
	void SendFloat ( struct FName HookName, struct FString AttrName, float fValue, unsigned long bNeedFlush );
	void SendInt ( struct FName HookName, struct FString AttrName, int nValue, unsigned long bNeedFlush );
	void SendString ( struct FName HookName, struct FString AttrName, unsigned long bNeedFlush, struct FString* sValue );
	void SendName ( struct FName HookName, struct FString AttrName, struct FName nmValue, unsigned long bNeedFlush );
	void SendVoid ( struct FName HookName, unsigned long bNeedFlush );
	class USFXTelemetryGameSession* GetInstanceGameSession ( );
};

// Class SFXGame.SFXTelemetryGameSession
// 0x009C (0x00FC - 0x0060)
class USFXTelemetryGameSession : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x0068 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class USFXTelemetry*                               TelemetryInstance;                                		// 0x0070 (0x0008) [0x0000000000000000]              
	unsigned long                                      bStarted : 1;                                     		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSentBootHooks : 1;                               		// 0x0078 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSentBugSentryHook : 1;                           		// 0x0078 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FDouble                                     CareerTime;                                       		// 0x007C (0x0008) [0x0000000000000000]              
	struct FDouble                                     GameTime;                                         		// 0x0084 (0x0008) [0x0000000000000000]              
	struct FDouble                                     SessionTime;                                      		// 0x008C (0x0008) [0x0000000000000000]              
	struct FDouble                                     IdleTime;                                         		// 0x0094 (0x0008) [0x0000000000000000]              
	int                                                Difficulty;                                       		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                PlayerXPGained;                                   		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                PlayerScore;                                      		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                CombatScore;                                      		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                PlayerKills;                                      		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                PlayerDeaths;                                     		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                TeamKills;                                        		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                TeamDeaths;                                       		// 0x00B8 (0x0004) [0x0000000000000000]              
	struct FName                                       MapName;                                          		// 0x00BC (0x0008) [0x0000000000000000]              
	struct FName                                       ChunkName;                                        		// 0x00C4 (0x0008) [0x0000000000000000]              
	struct FString                                     Career;                                           		// 0x00CC (0x0010) [0x0000000000500000]              ( CPF_NeedCtorLink )
	struct FString                                     Base64_CharacterID;                               		// 0x00DC (0x0010) [0x0000000000500000]              ( CPF_NeedCtorLink )
	struct TArray<struct FString>                      SessionStartMapExclusion;                         		// 0x00EC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXVehicleHover
// 0x0190 (0x0940 - 0x07B0)
class ASFXVehicleHover : public ASVehicle
{
public:
	class UClass*                                      FactionClass;                                     		// 0x07B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     JumpForce;                                        		// 0x07B8 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector                                     BoostForce;                                       		// 0x07C4 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector                                     OffGroundForce;                                   		// 0x07D0 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     m_vPauseVelocity;                                 		// 0x07DC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USFXLoadoutData*                             Loadout;                                          		// 0x07E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseAudioComponent*                        AudioComponent;                                   		// 0x07F0 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UWwiseEventPairObject*                       VehicleMotorEventPair;                            		// 0x07F8 (0x0008) [0x0000000000000000]              
	class UWwiseEventPairObject*                       VehicleVerticalBoostEventPair;                    		// 0x0800 (0x0008) [0x0000000000000000]              
	class UWwiseEventPairObject*                       VehicleForwardBoostEventPair;                     		// 0x0808 (0x0008) [0x0000000000000000]              
	class UWwiseEvent*                                 VehicleVerticalBoostEndEvent;                     		// 0x0810 (0x0008) [0x0000000000000000]              
	class UWwiseEvent*                                 VehicleForwardBoostEndEvent;                      		// 0x0818 (0x0008) [0x0000000000000000]              
	class UWwiseEvent*                                 VehicleBottomOutEvent;                            		// 0x0820 (0x0008) [0x0000000000000000]              
	class UWwiseEvent*                                 VehicleMiningSuccessEvent;                        		// 0x0828 (0x0008) [0x0000000000000000]              
	class UWwiseEvent*                                 VehicleMiningFailureEvent;                        		// 0x0830 (0x0008) [0x0000000000000000]              
	class UWwiseEvent*                                 VehicleStartupEvent;                              		// 0x0838 (0x0008) [0x0000000000000000]              
	class UWwiseEvent*                                 VehicleShutdownEvent;                             		// 0x0840 (0x0008) [0x0000000000000000]              
	class UWwiseEvent*                                 LeftSuspensionEvent;                              		// 0x0848 (0x0008) [0x0000000000000000]              
	class UWwiseEvent*                                 RightSuspensionEvent;                             		// 0x0850 (0x0008) [0x0000000000000000]              
	class UWwiseEvent*                                 HitSomething;                                     		// 0x0858 (0x0008) [0x0000000000000000]              
	class UWwiseEventPairObject*                       VehicleMiningEventPair;                           		// 0x0860 (0x0008) [0x0000000000000000]              
	class UWwiseEventPairObject*                       VehicleTurretMovementStartEventPair;              		// 0x0868 (0x0008) [0x0000000000000000]              
	class ABioVisualEffect*                            m_oDamageVisualEffect;                            		// 0x0870 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioVFXTemplate*                             m_oDeathVFXTemplate;                              		// 0x0878 (0x0008) [0x0000000000000000]              
	class UBioVFXTemplate*                             m_oDamageVFXTemplate;                             		// 0x0880 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      ThrustFeedback;                                   		// 0x0888 (0x0008) [0x0000000000000000]              
	class ASFXMiningNode*                              CurrentMiningNode;                                		// 0x0890 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UForceFeedbackWaveform*                      MiningFeedbackWaveForm;                           		// 0x0898 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             m_oMiningVFXTemplate;                             		// 0x08A0 (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    MiningPSC;                                        		// 0x08A8 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             m_oAfterburnerVisual;                             		// 0x08B0 (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    LeftAfterburnerPSC;                               		// 0x08B8 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    RightAfterburnerPSC;                              		// 0x08C0 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x08C8 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              CurrentThrustJuice;                               		// 0x08D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxThrustJuice;                                   		// 0x08D4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ThrustRegenerationFactor;                         		// 0x08D8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LastLeftSuspension;                               		// 0x08DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastRightSuspension;                              		// 0x08E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PreviousCameraPitch;                              		// 0x08E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OnGroundJumpMultiplier;                           		// 0x08E8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ForwardThrustBurnRate;                            		// 0x08EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              VerticalThrustBurnRate;                           		// 0x08F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ThrustRegenerationDelay;                          		// 0x08F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              BurnOutPercentage;                                		// 0x08F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ForcedRegenAmount;                                		// 0x08FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeLeftToStartRegen;                             		// 0x0900 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SelfRepairDelay;                                  		// 0x0904 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SelfRepairRate;                                   		// 0x0908 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastHitTime;                                      		// 0x090C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HitDamage;                                        		// 0x0910 (0x0004) [0x0000000000000000]              
	float                                              MaxPitchAngle;                                    		// 0x0914 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              TotalMiningTime;                                  		// 0x0918 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeToNextMiningImpulse;                          		// 0x091C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeToNextMiningFlash;                            		// 0x0920 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeToFlashMiningIndicator;                       		// 0x0924 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MiningIndicatorColor;                             		// 0x0928 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MiningFlashDelay;                                 		// 0x092C (0x0004) [0x0000000000000000]              
	float                                              MiningFlashDuration;                              		// 0x0930 (0x0004) [0x0000000000000000]              
	float                                              RadarRange;                                       		// 0x0934 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RadarFOV;                                         		// 0x0938 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bWeaponFiring : 1;                                		// 0x093C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAudioXBoostEventStopped : 1;                     		// 0x093C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bAudioZBoostEventStopped : 1;                     		// 0x093C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bTurrentMovementSoundStopped : 1;                 		// 0x093C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bMiningFailed : 1;                                		// 0x093C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bIsPaused : 1;                                  		// 0x093C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	void eventRanInto ( class AActor* Other );
	unsigned char GetFaction ( class APawn* Other );
	bool IsFriendly ( class APawn* Other );
	bool IsHostile ( class APawn* Other );
	struct FRotator GetViewRotation ( );
	void Tick ( float DeltaTime );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool IsPendingFire ( unsigned char InFiringMode );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void AddDefaultInventory ( );
};

// Class SFXGame.SFXVehicleSimHover
// 0x00A4 (0x0164 - 0x00C0)
class USFXVehicleSimHover : public USVehicleSimBase
{
public:
	struct FVector                                     RandForce;                                        		// 0x00C0 (0x000C) [0x0000000000000000]              
	struct FVector                                     RandTorque;                                       		// 0x00CC (0x000C) [0x0000000000000000]              
	struct FVector                                     OldVelocity;                                      		// 0x00D8 (0x000C) [0x0000000000000000]              
	float                                              MaxThrustForce;                                   		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxReverseForce;                                  		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LongDamping;                                      		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxStrafeForce;                                   		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LatDamping;                                       		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DirectionChangeForce;                             		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRiseForce;                                     		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpDamping;                                        		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnTorqueFactor;                                 		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnTorqueMax;                                    		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnDamping;                                      		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxYawRate;                                       		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchTorqueFactor;                                		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchTorqueMax;                                   		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchDamping;                                     		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollTorqueTurnFactor;                             		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollTorqueStrafeFactor;                           		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollTorqueMax;                                    		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollDamping;                                      		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StopThreshold;                                    		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRandForce;                                     		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandForceInterval;                                		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StrafeTurnDamping;                                		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              TargetHeading;                                    		// 0x0140 (0x0004) [0x0000000000000000]              
	float                                              TargetPitch;                                      		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              PitchViewCorrelation;                             		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              AccumulatedTime;                                  		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              StabilizationForceMultiplier;                     		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentStabilizationMultiplier;                   		// 0x0154 (0x0004) [0x0000000000000000]              
	float                                              StoppedBrakeTorque;                               		// 0x0158 (0x0004) [0x0000000000000000]              
	float                                              HardLimitAirSpeedScale;                           		// 0x015C (0x0004) [0x0000000000000000]              
	unsigned long                                      bAllowZThrust : 1;                                		// 0x0160 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFullThrustOnDirectionChange : 1;                 		// 0x0160 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bShouldCutThrustMaxOnImpact : 1;                  		// 0x0160 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRecentlyHit : 1;                                 		// 0x0160 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bStrafeAffectsTurnDamping : 1;                    		// 0x0160 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bHeadingInitialized : 1;                          		// 0x0160 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bStabilizeStops : 1;                              		// 0x0160 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bDisableWheelsWhenOff : 1;                        		// 0x0160 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bRepulsorCollisionEnabled : 1;                    		// 0x0160 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bCanClimbSlopes : 1;                              		// 0x0160 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bUnPoweredDriving : 1;                            		// 0x0160 (0x0004) [0x0000000000000000] [0x00000400] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMapNote
// 0x0059 (0x02E3 - 0x028A)
class ABioMapNote : public AActor
{
public:
	struct FString                                     m_sVarName;                                       		// 0x028C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sRefName;                                       		// 0x029C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxMovieInfo*                               m_oAreaMap;                                       		// 0x02AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fVisibleRange;                                  		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_sMapNoteName;                                   		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nLinkedQuest;                                   		// 0x02BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_sJournalTask;                                   		// 0x02C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Argument;                                         		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nIndex;                                         		// 0x02C8 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevRegionIndex;                               		// 0x02CC (0x0004) [0x0000000000000000]              
	int                                                m_nPrevPlotIndex;                                 		// 0x02D0 (0x0004) [0x0000000000000000]              
	float                                              m_fUpdateDelay;                                   		// 0x02D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fUpdateTimer;                                   		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bReducedVisibility : 1;                         		// 0x02DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bShowOnRadar : 1;                               		// 0x02DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bShowOnAreamap : 1;                             		// 0x02DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bLinkedToJournal : 1;                           		// 0x02DC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bSeen : 1;                                      		// 0x02DC (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bRenderInWorld : 1;                             		// 0x02DC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bRenderInWorld_LastTick : 1;                    		// 0x02DC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned char                                      Region;                                           		// 0x02E0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x02E1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Conditional;                                      		// 0x02E2 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ShowMapNote ( unsigned long bAreaMap );
};

// Class SFXGame.BioPathPoint
// 0x0004 (0x0390 - 0x038C)
class ABioPathPoint : public ANavigationPoint
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x038C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysReachable : 1;                             		// 0x038C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool DoReachedWaypointEvent ( class ABioPawn* oPawn );
	bool OnCreatureReachedWayPoint ( class APawn* PathFindingCreature );
};

// Class SFXGame.BioWp_ActionStation
// 0x0020 (0x03B0 - 0x0390)
class ABioWp_ActionStation : public ABioPathPoint
{
public:
	struct FVector                                     m_vOldPositon;                                    		// 0x0390 (0x000C) [0x0000000000000000]              
	class ABioStage*                                   m_oStage;                                         		// 0x039C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmStagePosition;                                		// 0x03A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bPositionLocked : 1;                            		// 0x03AC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool OnCreatureReachedWayPoint ( class APawn* PathFindingCreature );
};

// Class SFXGame.BioWP_AirPoint
// 0x0000 (0x0390 - 0x0390)
class ABioWP_AirPoint : public ABioPathPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWp_DoorMarker
// 0x0034 (0x03C4 - 0x0390)
class ABioWp_DoorMarker : public ABioPathPoint
{
public:
	struct TArray<struct FName>                        m_nmClosedStates;                                 		// 0x0390 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FName>                        m_nmOpenedStates;                                 		// 0x03A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ABioDoor*                                    oMyDoor;                                          		// 0x03B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmGotoStateToOpen;                              		// 0x03B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWaitUntilCompletelyOpened : 1;                   		// 0x03C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAICanOpenDoor : 1;                               		// 0x03C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTempDisabledCollision : 1;                       		// 0x03C0 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventSuggestMovePreparation ( class APawn* Other );
	bool ProceedWithMove ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	bool IsDoorClosed ( );
	bool IsDoorOpen ( );
};

// Class SFXGame.BioWaypointLinesComponent
// 0x0008 (0x0230 - 0x0228)
class UBioWaypointLinesComponent : public UPrimitiveComponent
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x0228 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWaypointSet
// 0x0016 (0x02A0 - 0x028A)
class ABioWaypointSet : public AActor
{
public:
	struct TArray<struct FActorReference>              WaypointReferences;                               		// 0x028C (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      AlwaysShow : 1;                                   		// 0x029C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class ANavigationPoint* GetWaypoint ( int nIdx );
	int FindNearestPoint ( struct FVector vLoc );
};

// Class SFXGame.SFXAnimNotify_RaceWwiseEvent
// 0x0010 (0x008C - 0x007C)
class USFXAnimNotify_RaceWwiseEvent : public UAnimNotify_WwiseEvent
{
public:
	struct FString                                     RaceTypeRTPCName;                                 		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioContainer
// 0x0000 (0x038C - 0x038C)
class ABioContainer : public ABioArtPlaceable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioInert
// 0x0000 (0x038C - 0x038C)
class ABioInert : public ABioArtPlaceable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioUseable
// 0x0000 (0x038C - 0x038C)
class ABioUseable : public ABioArtPlaceable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXAI_Core
// 0x013E (0x078F - 0x0651)
class ASFXAI_Core : public ASFXAI_NativeBase
{
public:
	struct TArray<struct FName>                        BehaviourList;                                    		// 0x0654 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UsePowerDelegate__Delegate;                     		// 0x0664 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __FireWeaponDelegate__Delegate;                   		// 0x0674 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __MoveToDelegate__Delegate;                       		// 0x0684 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __TryInvalidateTargetRange__Delegate;             		// 0x0694 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __TryInvalidateTargetFlank__Delegate;             		// 0x06A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     m_PowerTargetLocation;                            		// 0x06B4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vPushDirection;                                 		// 0x06C0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmCurrentBehavior;                              		// 0x06CC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmPowerToUse;                                   		// 0x06D4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_PowerTargetActor;                               		// 0x06DC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_RequestedActorToFollow;                         		// 0x06E4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_ActorToFollow;                                  		// 0x06EC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ASFXWeapon*                                  m_oNextWeapon;                                    		// 0x06F4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_oGoalActor;                                     		// 0x06FC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       m_oLastBumped;                                    		// 0x0704 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    m_oPushingPawn;                                   		// 0x070C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_oLastApproachTarget;                            		// 0x0714 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UGoal_AtCover*                               AtCover_WeaponRange;                              		// 0x071C (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UGoal_AtCover*                               AtCover_Defensive;                                		// 0x0724 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UGoal_AtCover*                               AtCover_Aggressive;                               		// 0x072C (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UGoal_AtCover*                               AtCover_NearMoveGoal;                             		// 0x0734 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UGoal_AtGoHereCover*                         AtCover_AIGoHere;                                 		// 0x073C (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              m_fFiringArcAngle;                                		// 0x0744 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCancelReasons;                                 		// 0x0748 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSpecialMoveTimeDelay;                          		// 0x074C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nReservationID;                                 		// 0x0750 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMoveAttemptCounter;                            		// 0x0754 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastCoverEnterTime;                            		// 0x0758 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fReloadThreshold;                               		// 0x075C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPowerCompletionReason;                         		// 0x0760 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nWeaponCompletionReason;                        		// 0x0764 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMoveCompletionReason;                          		// 0x0768 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRunThreshold;                                  		// 0x076C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCurrentAttackID;                               		// 0x0770 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nTargetTicketCost;                              		// 0x0774 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fLastBumpTime;                                  		// 0x0778 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastPushTime;                                  		// 0x077C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastApproachDistance;                          		// 0x0780 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastApproachCheckTime;                         		// 0x0784 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUseTicketing : 1;                                		// 0x0788 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_bSpecialMoveAllowed : 1;                        		// 0x0788 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bPowerProjectileReleased : 1;                   		// 0x0788 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bCancelAction : 1;                              		// 0x0788 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bWaitBeforeNextAttack : 1;                      		// 0x0788 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bInvalidatedCover : 1;                          		// 0x0788 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bClearVelocityAfterMove : 1;                    		// 0x0788 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bUsePowerReservations : 1;                      		// 0x0788 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bFinishedCustomAction : 1;                        		// 0x0788 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bAbortedCustomAction : 1;                         		// 0x0788 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bDoingCustomAction : 1;                           		// 0x0788 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      m_bAIGoHereCanUseCover : 1;                       		// 0x0788 (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      m_bAllowedToLeavePlaypen : 1;                     		// 0x0788 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      m_bIgnorePowerSuppression : 1;                    		// 0x0788 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      m_bStayLeanedOut : 1;                             		// 0x0788 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      m_bUsePartialPaths : 1;                           		// 0x0788 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      m_bAvoidDangerLinks : 1;                          		// 0x0788 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      m_bAvoidFireFromPlayerOnly : 1;                   		// 0x0788 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      m_bAttacking : 1;                                 		// 0x0788 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      m_bDelayWeaponUse : 1;                            		// 0x0788 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      m_bAllowWeaponSwitch : 1;                         		// 0x0788 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      m_bPlayedCustomActivationAnim : 1;                		// 0x0788 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      m_bPendingWeaponSwitch : 1;                       		// 0x0788 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      m_bCustomActionFailed : 1;                        		// 0x0788 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      m_bUsePeriodicCoverCheck : 1;                     		// 0x0788 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      bActorReachable : 1;                              		// 0x0788 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      m_bFirstIdle : 1;                                 		// 0x0788 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      m_bFailedTicket : 1;                              		// 0x0788 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned long                                      bDying : 1;                                       		// 0x0788 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned char                                      DamageReaction;                                   		// 0x078C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_AttackResult;                                   		// 0x078D (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_eBestTargetCoverAction;                         		// 0x078E (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool CanCustomActionTerminateEarly ( );
	void NotifyKnockedOutOfCover ( );
	float FindClosestApproachDistance ( class AActor* oActor );
	bool TeleportToActor ( class AActor* oActor, unsigned long bForceTeleport );
	bool IsInWeaponRange ( class AActor* oTarget );
	float TargetRange ( );
	bool UsePower ( struct FName nmPower, class AActor* oTarget, unsigned long bIgnoreSuppression, unsigned long bIgnoreReservation, unsigned long bCheckLOS );
	bool CanShootWeapon ( class AActor* oTarget );
	bool CanUsePower ( class USFXPower* oPower, class AActor* oTarget, unsigned long bIgnoreDelay );
	bool ChooseDeathPower ( struct FName* nmPower );
	bool ChooseDefensivePower ( struct FName* nmPower );
	bool ChooseAttackPower ( class AActor* oTarget, struct FName* nmPower, int* nRequiresAttackTicket, struct FVector* AttackOrigin );
	void NotifySharedCooldownFinished ( );
	void eventUpdateMovementActions ( );
	bool MoveToGoal ( class AActor* NewMoveGoal, float NewMoveOffset, struct FScriptDelegate MoveDelegate, unsigned long bIgnoreAIGoHere );
	bool RespondToBump ( class AActor* Other, struct FVector HitNormal );
	void EnableSpecialMove ( );
	void StartSpecialMoveDelayTimer ( );
	void DrawLocationMarker ( struct FVector vLocation, float fSize, int nRed, int nGreen, int nBlue );
	void eventBioClearCrossLevelReferences ( class ULevel* oLevel );
	bool CanSwitchBehaviours ( );
	bool IsActorInPlaypen ( class AActor* oActor );
	void eventOnLeftPlaypen ( );
	bool IsReturningToPlaypen ( );
	bool IsFlankedByTarget ( class AActor* oTarget );
	void CustomActionTimeout ( );
	bool IsPlayingDeathReaction ( );
	bool IsPlayingReaction ( );
	void NotifyLimbDetached ( unsigned char ePartGroup );
	bool VerifyCAHasBeenInstanced ( unsigned char CAIndex );
	bool IsDoingACustomAction ( );
	void CustomActionEnded ( unsigned char PrevAction );
	bool eventCanDoCustomAction ( unsigned char CAction );
	void EndCustomAction ( );
	void eventDoCustomAction ( unsigned char NewAction );
	bool eventStartCustomAction ( unsigned char NewAction, unsigned char CustomActionType );
	struct FName GetCustomActionState ( unsigned char eAction );
	bool eventGetCurrentCustomAction ( class UBioCustomAction** pAction );
	void eventOnEnteringStasis ( );
	void NotifyDeathBlow ( );
	bool UpdateDeathState ( );
	void CheckPendingWeaponSwitch ( );
	void PlayAmbientVoc ( );
	void Taunt ( );
	bool IsInFightingState ( );
	void SwitchWeapon ( class ASFXWeapon* oWeapon );
	void SetSquadIntoCombat ( );
	float GetPowerUsePercent ( );
	void ReleaseTicket ( class AActor* oTarget, unsigned char eTicket, unsigned long bKillAttackTicket );
	bool AcquireTicket ( class AActor* oTarget, unsigned char eTicket, int nAttackTicketCost );
	void ClearPowerReservation ( struct FName nmPower, unsigned long bSkipProjectilePowers );
	bool RequestPowerReservation ( struct FName nmPower, unsigned long bForceSuccess );
	bool Reload ( );
	bool ShouldReload ( );
	bool ChooseAttack ( class AActor* oTarget, struct FName* nmPowerName );
	unsigned char Attack ( );
	void ClearCancelAction ( );
	void CancelAction ( int nReason );
	bool IsAttacking ( );
	bool WantsToRun ( float fDistance );
	void SetMovementSpeed ( );
	void PeriodicMoveCheck ( );
	bool SetMoveGoal ( class AActor* NewMoveGoal, float NewMoveOffset );
	void PeriodicCoverValidation ( );
	bool IsMovingToCover ( );
	bool MoveToCover ( class UGoal_AtCover* GoalEvaluator, class AActor* GoalActor, unsigned long bUsePeriodicCheck, unsigned long bIgnoreAIGoHere );
	bool AcquireCoverGoal ( class UGoal_AtCover* GoalEvaluator, class AActor* GoalActor, unsigned long bIgnoreAIGoHere, struct FCoverInfo* NewCoverGoal );
	void ApplyBasePathConstraints ( );
	bool DebugMoveToGoal ( class AActor* NewMoveGoal, float NewMoveOffset );
	bool DebugMoveToCover ( struct FCoverInfo NewCoverGoal );
	void NotifyWeaponDelayFinished ( );
	void ReEvaluateCover ( );
	struct FVector GetAimLocation ( int EnemyIdx, struct FVector StartLoc );
	unsigned char GetBestTargetCoverAction ( class ABioPawn* TargetPawn, struct FCoverInfo TargetCover );
	void SetBestTargetCoverAction ( unsigned char BestAction );
	bool RespondToPush ( );
	void PushPawn ( class ABioPawn* oPawn, struct FVector HitNormal );
	bool NotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	void NotifyCoverDisabled ( class ACoverLink* Link, int SlotIdx, unsigned long bAdjacentIdx );
	void NotifyPowerFinished ( struct FName nmPower );
	void NotifyUnderAttack ( unsigned long bHit );
	void NotifyNearMiss ( struct FVector HitLocation );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void FindNewCover ( );
	void TriggerAttackVocalization ( );
	void OnTargetChanged ( );
	void AdjustEnemyRating ( class APawn* EnemyPawn, float* fRating );
	void AdjustRatingByTickets ( int EnemyIdx, float* out_Rating );
	bool SelectTarget ( );
	void eventSpawnedByKismet ( );
	void Initialize ( );
	void PostBeginPlay ( );
	bool ChangeBehaviour ( struct FName NewBehaviour );
	bool SetDefaultBehaviour ( struct FName NewBehaviour );
	void eventGetBehaviourList ( struct TArray<struct FName>* Behaviours );
	void ClearGoHereDelegates ( );
	void AssignGoHereDelegates ( struct FScriptDelegate RangeDel, struct FScriptDelegate FlankDel );
	void StopFollowingActor ( );
	bool StartFollowingActor ( class AActor* ActorToFollow );
	void MoveToGoalExternal ( class AActor* NewMoveGoal, float NewMoveOffset, struct FScriptDelegate MoveDelegate );
	void FireWeaponAtTarget ( class AActor* oTarget, unsigned long bCheckLOS, struct FScriptDelegate FireDelegate );
	void UsePowerOnTarget ( struct FName nmPowerToUse, class AActor* oTarget, struct FScriptDelegate PowerDelegate, unsigned long bIgnoreSuppression );
	void NotifyPlaypenChanged ( );
	bool TryInvalidateTargetFlank ( );
	bool TryInvalidateTargetRange ( float fRangeToTarget );
	void MoveToDelegate ( int nReason );
	void FireWeaponDelegate ( int nReason );
	void UsePowerDelegate ( int nReason );
};

// Class SFXGame.SFXProjectile
// 0x0040 (0x0330 - 0x02F0)
class ASFXProjectile : public AProjectile
{
public:
	struct FVector                                     DesiredScale;                                     		// 0x02F0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UMeshComponent*                              Mesh;                                             		// 0x02FC (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    ProjEffectsTrail;                                 		// 0x0304 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    ProjEffectsHead;                                  		// 0x030C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             ProjEffectsTrailTemplate;                         		// 0x0314 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             ProjEffectsHeadTemplate;                          		// 0x031C (0x0008) [0x0000000000000000]              
	float                                              MeshScaleTime;                                    		// 0x0324 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProjEffectsTrailWaitTime;                         		// 0x0328 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bEffectLightActive : 1;                           		// 0x032C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSuppressAudio : 1;                               		// 0x032C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bShuttingDown : 1;                                		// 0x032C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bArcing : 1;                                      		// 0x032C (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bPooled : 1;                                      		// 0x032C (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SpawnImpactEffect ( struct FVector HitLocation, struct FVector HitNormal );
	float GetDamageRadius ( );
	float GetDamage ( );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void Tick ( float DeltaTime );
	void ProjEffectsTrailFinished ( class UParticleSystemComponent* PSC );
	void SetProjectileHidden ( unsigned long bHide );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void eventOutsideWorldBounds ( );
	bool IsShuttingDown ( );
	void ShutDown ( );
	void Init ( struct FVector Direction );
	void ShutdownPostEffects ( );
	void Reuse ( );
	void Recycle ( );
	void SpawnFlightEffects ( );
};

// Class SFXGame.SFXProjectile_Explosive
// 0x00E0 (0x0410 - 0x0330)
class ASFXProjectile_Explosive : public ASFXProjectile
{
public:
	struct TArray<struct FChangeOverLifeKey>           HeadLightChangeOverLifeKeys;                      		// 0x0330 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FChangeOverLifeKey>           ImpactLightChangeOverLifeKeys;                    		// 0x0340 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	class UPointLightComponent*                        LC_EffectLight;                                   		// 0x0350 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UWwiseEvent*                                 ExplosionSound;                                   		// 0x0358 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UWwiseEvent*                                 WwiseDuckEvent;                                   		// 0x0360 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UParticleSystem*                             ProjExplosionTemplate;                            		// 0x0368 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UMaterialInterface*                          ExplosionDecal;                                   		// 0x0370 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       DecalDissolveParamName;                           		// 0x0378 (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                LightKeyIndex;                                    		// 0x0380 (0x0004) [0x0000000000000000]              
	float                                              LightCurrentTime;                                 		// 0x0384 (0x0004) [0x0000000000000000]              
	float                                              LightDeltaBrightness;                             		// 0x0388 (0x0004) [0x0000000000000000]              
	float                                              LightDeltaR;                                      		// 0x038C (0x0004) [0x0000000000000000]              
	float                                              LightDeltaG;                                      		// 0x0390 (0x0004) [0x0000000000000000]              
	float                                              LightDeltaB;                                      		// 0x0394 (0x0004) [0x0000000000000000]              
	float                                              LightStepSize;                                    		// 0x0398 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              HeadLightBrightness;                              		// 0x039C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FColor                                      HeadLightColor;                                   		// 0x03A0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              HeadLightFalloffExponent;                         		// 0x03A4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              HeadLightMinShadowFalloffRadius;                  		// 0x03A8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              HeadLightRadius;                                  		// 0x03AC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              HeadLightShadowFalloffExponent;                   		// 0x03B0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              HeadLightShadowRadiusMultiplier;                  		// 0x03B4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ImpactLightLifetime;                              		// 0x03B8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ImpactLightBrightness;                            		// 0x03BC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FColor                                      ImpactLightColor;                                 		// 0x03C0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ImpactLightFalloffExponent;                       		// 0x03C4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ImpactLightMinShadowFalloffRadius;                		// 0x03C8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ImpactLightRadius;                                		// 0x03CC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ImpactLightShadowFalloffExponent;                 		// 0x03D0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ImpactLightShadowRadiusMultiplier;                		// 0x03D4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ImpactLightOffset;                                		// 0x03D8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DuckDistanceThreshold;                            		// 0x03DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              fFuseLength;                                      		// 0x03E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DecalWidth;                                       		// 0x03E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DecalHeight;                                      		// 0x03E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DurationOfDecal;                                  		// 0x03EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxEffectDistance;                                		// 0x03F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AccelRate;                                        		// 0x03F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TossZ;                                            		// 0x03F8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TerminalVelocity;                                 		// 0x03FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CustomGravityScaling;                             		// 0x0400 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ExplosionParticleLifetime;                        		// 0x0404 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ExplosionEffectRadius;                            		// 0x0408 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bInFlight : 1;                                    		// 0x040C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDuckAudio : 1;                                   		// 0x040C (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bAdvanceExplosionEffect : 1;                      		// 0x040C (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bSuppressExplosionFX : 1;                         		// 0x040C (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ProjectileHurtRadius ( float InDamageAmount, float InDamageRadius, float Momentum, struct FVector HurtOrigin, struct FVector HitNormal );
	void DoImpact ( class AActor* InImpactedActor, class AController* InInstigatorController, float BaseDamage, float InDamageRadius, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void Timer ( );
	void SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal );
	void StepEffectLight ( );
	void AdjustLightPropertiesByDeltas ( );
	void CalculateEffectLightDeltas ( float StartBrightness, float EndBrightness, struct FColor StartColor, struct FColor EndColor, float DeltaTime );
	void DisableLight ( );
	void SetExplosionEffectParameters ( class UParticleSystemComponent* ProjExplosion );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance );
	bool CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation, float CullDistance );
	void Init ( struct FVector Direction );
	void Recycle ( );
	void eventSetInitialState ( );
	bool CanSplash ( );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
};

// Class SFXGame.SFXProjectile_Power
// 0x0084 (0x0494 - 0x0410)
class ASFXProjectile_Power : public ASFXProjectile_Explosive
{
public:
	struct TArray<class AActor*>                       ImpactedActors;                                   		// 0x0410 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     WorldImpactPoint;                                 		// 0x0420 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     WorldImpactNormal;                                		// 0x042C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastLocation;                                     		// 0x0438 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     TargetLocation;                                   		// 0x0444 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CameraLocation;                                   		// 0x0450 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    CameraRotation;                                   		// 0x045C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class ABioVisualEffect*                            ProjectileVFX;                                    		// 0x0468 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioPower*                                   Power;                                            		// 0x0470 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      Caster;                                           		// 0x0478 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      TargetActor;                                      		// 0x0480 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                ReservationID;                                    		// 0x0488 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ImpactedCount;                                    		// 0x048C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUsePowerReservation : 1;                         		// 0x0490 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      ShowPowerAiming : 1;                              		// 0x0490 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventBioClearCrossLevelReferences ( class ULevel* oLevel );
	void ShutDown ( );
	void Recycle ( );
	void Tick ( float DeltaTime );
	bool InitializePowerProjectile ( class AActor* oCaster, float fTravelSpeed, float fRadius, class UBioPower* oPower );
	void eventGenerateOnCastAt ( class AActor* Target );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	bool ProjectileHurtRadius ( float InDamageAmount, float InDamageRadius, float Momentum, struct FVector HurtOrigin, struct FVector HitNormal );
	void DoPowerImpact ( class AActor* oActor, class AController* InstigatedBy, int nImpactedCount );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void Timer ( );
	float GetDamageRadius ( );
};

// Class SFXGame.BioSeqEvt_AffectedByPower
// 0x0012 (0x0138 - 0x0126)
class UBioSeqEvt_AffectedByPower : public USequenceEvent
{
public:
	struct TArray<class UClass*>                       Powers;                                           		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void HandleActivation ( class AActor* InOriginator, class AActor* InInstigator, class UClass* inPower );
};

// Class SFXGame.SFXSeqEvt_OnStoppedSleeping
// 0x0002 (0x0128 - 0x0126)
class USFXSeqEvt_OnStoppedSleeping : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeapon
// 0x059C (0x0971 - 0x03D5)
class ASFXWeapon : public ASFXWeapon_NativeBase
{
public:
	struct FScaledFloat                                Damage;                                           		// 0x03D8 (0x0028) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                MagSize;                                          		// 0x0400 (0x0028) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                MaxSpareAmmo;                                     		// 0x0428 (0x0028) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                MinAimError;                                      		// 0x0450 (0x0028) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                MaxAimError;                                      		// 0x0478 (0x0028) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                MinZoomAimError;                                  		// 0x04A0 (0x0028) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                MaxZoomAimError;                                  		// 0x04C8 (0x0028) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                RateOfFire;                                       		// 0x04F0 (0x0028) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                Recoil;                                           		// 0x0518 (0x0028) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                ZoomRecoil;                                       		// 0x0540 (0x0028) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FName>                        AimOffsetProfileNames;                            		// 0x0568 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FChangeOverLifeKey>           MuzzleLightChangeOverLifeKeys;                    		// 0x0578 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     GUIImage;                                         		// 0x0588 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     AmmoRTPCName;                                     		// 0x0598 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FZoomSnapInfo>                ZoomSnapList;                                     		// 0x05A8 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FName>                        FadingParameters;                                 		// 0x05B8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<int>                                 DamageUpgradeTokens;                              		// 0x05C8 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<int>                                 ResearchUpgradeTokens;                            		// 0x05D8 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<int>                                 ResearchUpgradeIds;                               		// 0x05E8 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FCoverLeanPosition>           CoverLeanPositions;                               		// 0x05F8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWeaponImpact__Delegate;                       		// 0x0608 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GetDamageVocProbabilityMod__Delegate;           		// 0x0618 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWeaponReload__Delegate;                       		// 0x0628 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWeaponEquip__Delegate;                        		// 0x0638 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWeaponUnequip__Delegate;                      		// 0x0648 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      DroppedAmmoClass;                                 		// 0x0658 (0x0008) [0x0000000000000000]              
	struct FTracerSpec                                 TracerInfo;                                       		// 0x0660 (0x0028) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DebugShotStartLoc;                                		// 0x0688 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    DebugShotAimRot;                                  		// 0x0694 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MuzzleIdlePosition;                               		// 0x06A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FrictionTargetOffset;                             		// 0x06AC (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FName                                       MeleePowerName;                                   		// 0x06B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   AI_AccCone_Min;                                   		// 0x06C0 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   AI_AccCone_Max;                                   		// 0x06C8 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   AI_BurstFireCount;                                		// 0x06D0 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   AI_BurstFireDelay;                                		// 0x06D8 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   AI_BurstFireMovingDelay;                          		// 0x06E0 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   AI_HenchBurstFireMultiplier;                      		// 0x06E8 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   AI_AimDelay;                                      		// 0x06F0 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class UForceFeedbackWaveform*                      WeaponFireWaveForm;                               		// 0x06F8 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             PS_DefaultImpactEffect;                           		// 0x0700 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UParticleSystem*                             PS_DefaultMaterialImpactEffect;                   		// 0x0708 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UDecalComponent*                             DefaultDecalProperties;                           		// 0x0710 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UMaterialInterface*                          DefaultDecalMaterial;                             		// 0x0718 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    PSC_ShellCasing;                                  		// 0x0720 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    PSC_ReloadVent;                                   		// 0x0728 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    PSC_MuzFlashEmitter;                              		// 0x0730 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UPointLightComponent*                        LC_MuzzleFlashLight;                              		// 0x0738 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       MuzzleSocketName;                                 		// 0x0740 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShellCasingSocketName;                            		// 0x0748 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   CrosshairRange;                                   		// 0x0750 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   ZoomCrosshairRange;                               		// 0x0758 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class UObject*                                     IconResource;                                     		// 0x0760 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 DefaultImpactSound;                               		// 0x0768 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 FireSound;                                        		// 0x0770 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 PlayerFireSound;                                  		// 0x0778 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 WeaponPowerFireSound;                             		// 0x0780 (0x0008) [0x0000000000000000]              
	class UWwiseEvent*                                 FireNoAmmoSound;                                  		// 0x0788 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 WeaponWhipSoundLeft;                              		// 0x0790 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 WeaponWhipSoundRight;                             		// 0x0798 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 WeaponReloadSound;                                		// 0x07A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 WeaponExpandSound;                                		// 0x07A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 WeaponCollapseSound;                              		// 0x07B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 NeedReloadNotifySound;                            		// 0x07B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 SteamReloadNotifySound;                           		// 0x07C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   FrictionMultiplierRange;                          		// 0x07C8 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   AdhesionRot;                                      		// 0x07D0 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class UParticleSystemComponent*                    AmmoPowerPSCO;                                    		// 0x07D8 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    AmmoPowerIconPSCO;                                		// 0x07E0 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       AmmoPowerName;                                    		// 0x07E8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              ZoomFOV;                                          		// 0x07F0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              fHeatDissipation;                                 		// 0x07F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fHeatDissipationCooldown;                         		// 0x07F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SwitchPriority;                                   		// 0x07FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              ImpactRelevanceDistance;                          		// 0x0800 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ImpactScale;                                      		// 0x0804 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShowTracerDistance;                               		// 0x0808 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              TracerSpawnOffset;                                		// 0x080C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MuzzleLightLifetime;                              		// 0x0810 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MuzzleLightBrightness;                            		// 0x0814 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FColor                                      MuzzleLightColor;                                 		// 0x0818 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MuzzleLightFalloffExponent;                       		// 0x081C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MuzzleLightMinShadowFalloffRadius;                		// 0x0820 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MuzzleLightRadius;                                		// 0x0824 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MuzzleLightShadowFalloffExponent;                 		// 0x0828 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MuzzleLightShadowRadiusMultiplier;                		// 0x082C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LightStepSize;                                    		// 0x0830 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                LightKeyIndex;                                    		// 0x0834 (0x0004) [0x0000000000000000]              
	float                                              LightCurrentTime;                                 		// 0x0838 (0x0004) [0x0000000000000000]              
	float                                              LightDeltaBrightness;                             		// 0x083C (0x0004) [0x0000000000000000]              
	float                                              LightDeltaR;                                      		// 0x0840 (0x0004) [0x0000000000000000]              
	float                                              LightDeltaG;                                      		// 0x0844 (0x0004) [0x0000000000000000]              
	float                                              LightDeltaB;                                      		// 0x0848 (0x0004) [0x0000000000000000]              
	float                                              TimeToHideMuzzleFlashPSC;                         		// 0x084C (0x0004) [0x0000000000000000]              
	float                                              WeaponLevel;                                      		// 0x0850 (0x0004) [0x0000000000000000]              
	float                                              EjectShellCasingTimeRatio;                        		// 0x0854 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ReloadReactionWindow;                             		// 0x0858 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ReloadSuccessDuration;                            		// 0x085C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ReloadFailureDuration;                            		// 0x0860 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LastBulletStrongerPercent;                        		// 0x0864 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StealthDamageIncrease;                            		// 0x0868 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamageAI;                                         		// 0x086C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DamageHench;                                      		// 0x0870 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                InitialMagazines;                                 		// 0x0874 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LowAmmoSoundThreshold;                            		// 0x0878 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SteamSoundThreshold;                              		// 0x087C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              NoAmmoFireSoundDelay;                             		// 0x0880 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RateOfFireAI;                                     		// 0x0884 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AmmoPerShot;                                      		// 0x0888 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              BurstRounds;                                      		// 0x088C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              BurstRefireTime;                                  		// 0x0890 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              BurstCount;                                       		// 0x0894 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              MinRefireTime;                                    		// 0x0898 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilPitchOscillation;                           		// 0x089C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilInterpSpeed;                                		// 0x08A0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilFadeSpeed;                                  		// 0x08A4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilZoomFadeSpeed;                              		// 0x08A8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilMinFadePitch;                               		// 0x08AC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilMinFadeYaw;                                 		// 0x08B0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilCap;                                        		// 0x08B4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ZoomRecoilCap;                                    		// 0x08B8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilYawScale;                                   		// 0x08BC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilYawBias;                                    		// 0x08C0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilYawFrequency;                               		// 0x08C4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilPitchFrequency;                             		// 0x08C8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TraceRange;                                       		// 0x08CC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AccFirePenalty;                                   		// 0x08D0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AccFireInterpSpeed;                               		// 0x08D4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ZoomAccFirePenalty;                               		// 0x08D8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ZoomAccFireInterpSpeed;                           		// 0x08DC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MagneticCorrectionThresholdAngle;                 		// 0x08E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxMagneticCorrectionAngle;                       		// 0x08E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              Range_Melee;                                      		// 0x08E8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              Range_Short;                                      		// 0x08EC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              Range_Medium;                                     		// 0x08F0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              Range_Long;                                       		// 0x08F4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              DamageMod_MeleeRange;                             		// 0x08F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DamageMod_ShortRange;                             		// 0x08FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DamageMod_MediumRange;                            		// 0x0900 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DamageMod_LongRange;                              		// 0x0904 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CurrentSpareAmmo;                                 		// 0x0908 (0x0004) [0x0000000000000000]              
	float                                              AmmoUsedCount;                                    		// 0x090C (0x0004) [0x0000000000000000]              
	int                                                IconRef;                                          		// 0x0910 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                PrettyName;                                       		// 0x0914 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                GUIClassName;                                     		// 0x0918 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                GUIClassDescription;                              		// 0x091C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                AmmoPrettyName;                                   		// 0x0920 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                ShortDescription;                                 		// 0x0924 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                GeneralDescription;                               		// 0x0928 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinFrictionDistance;                              		// 0x092C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxFrictionDistance;                              		// 0x0930 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PeakFrictionDistance;                             		// 0x0934 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PeakFrictionRadiusScale;                          		// 0x0938 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PeakFrictionHeightScale;                          		// 0x093C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinAdhesionDistance;                              		// 0x0940 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxAdhesionDistance;                              		// 0x0944 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinAdhesionVelocity;                              		// 0x0948 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CamInputAdhesionDamping;                          		// 0x094C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxLateralAdhesionDist;                           		// 0x0950 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AimCorrectionAmount;                              		// 0x0954 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinZoomSnapDistance;                              		// 0x0958 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxZoomSnapDistance;                              		// 0x095C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ZoomSnapDuration;                                 		// 0x0960 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                DamageUpgradeId;                                  		// 0x0964 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bSuperDamage : 1;                                 		// 0x0968 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInfiniteAmmo : 1;                                		// 0x0968 (0x0004) [0x0000000000004001] [0x00000002] ( CPF_Edit | CPF_Config )
	unsigned long                                      bSuppressMuzzleFlash : 1;                         		// 0x0968 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSuppressTracers : 1;                             		// 0x0968 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSuppressImpactFX : 1;                            		// 0x0968 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSuppressAudio : 1;                               		// 0x0968 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bSuppressDecal : 1;                               		// 0x0968 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bUpgradesBasicWeapon : 1;                         		// 0x0968 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bPlayerUsable : 1;                                		// 0x0968 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bEarlyReload : 1;                                 		// 0x0968 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bUseSniperCam : 1;                                		// 0x0968 (0x0004) [0x0000000000004000] [0x00000400] ( CPF_Config )
	unsigned long                                      bForceSpawnTracer : 1;                            		// 0x0968 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bIsAutomatic : 1;                                 		// 0x0968 (0x0004) [0x0000000000004001] [0x00001000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bCanDropWeapon : 1;                               		// 0x0968 (0x0004) [0x0000000000004001] [0x00002000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bCanDropAmmo : 1;                                 		// 0x0968 (0x0004) [0x0000000000004001] [0x00004000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bWeaponCanBeReloaded : 1;                         		// 0x0968 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bQuickReloadSucceeded : 1;                        		// 0x0968 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bDrawingWeapon : 1;                               		// 0x0968 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bHolsteringWeapon : 1;                            		// 0x0968 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bFiringAnimationPlaying : 1;                      		// 0x0968 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bNotRegularWeaponGUI : 1;                         		// 0x0968 (0x0004) [0x0000000000004000] [0x00100000] ( CPF_Config )
	unsigned long                                      bFrictionEnabled : 1;                             		// 0x0968 (0x0004) [0x0000000000004001] [0x00200000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bFrictionDistanceScalingEnabled : 1;              		// 0x0968 (0x0004) [0x0000000000004001] [0x00400000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bAdhesionEnabled : 1;                             		// 0x0968 (0x0004) [0x0000000000004001] [0x00800000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bAdhesionDuringCam : 1;                           		// 0x0968 (0x0004) [0x0000000000004001] [0x01000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bZoomSnapEnabled : 1;                             		// 0x0968 (0x0004) [0x0000000000004001] [0x02000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bScaleAnimDurationByFireRate : 1;                 		// 0x0968 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      WaitingToBeginFire : 1;                           		// 0x0968 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned char                                      AnimType;                                         		// 0x096C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AttachSlot;                                       		// 0x096D (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      CharacterSlot;                                    		// 0x096E (0x0001) [0x0000000000000000]              
	unsigned char                                      FireOnceFiringMode;                               		// 0x096F (0x0001) [0x0000000000000000]              
	unsigned char                                      FireModeToBegin;                                  		// 0x0970 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventCalculateCoverLeanOutOffset ( unsigned char Direction, unsigned char Type, struct FVector* Offset );
	struct FString GetGeneralDescription ( );
	struct FString GetShortDescription ( );
	struct FString GetPrettyName ( );
	void GetWeaponDebug ( struct TArray<struct FString>* DebugInfo );
	void DrawDebugShot ( struct FVector StartLocation, struct FVector EndLocation );
	void DisableAmmoPowerHologram ( );
	void EnableAmmoPowerHologram ( class UParticleSystem* Template, class UParticleSystem* IconTemplate );
	void eventDestroyed ( );
	void HolderDied ( );
	void DropFrom ( struct FVector StartLocation, struct FVector StartVelocity );
	bool CanThrow ( );
	void DetachWeapon ( );
	void eventAttachMuzzleEffectsComponents ( class USkeletalMeshComponent* SkelMesh, struct FName MuzzleSocket, struct FName CasingSocket );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName );
	void AssignToSlot ( unsigned char Slot );
	void GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate );
	void EquipTimedOut ( );
	void EquipFinished ( );
	void EquipNearFinished ( );
	void Collapse ( );
	void Expand ( );
	void UnEquipTimedOut ( );
	void UnEquipFinished ( );
	void ReloadNearFinished ( );
	void CancelReload ( );
	void RefireBurst ( );
	bool ShouldRefire ( );
	void PlayNoAmmoFireSound ( );
	void PlayNoAmmoEffects ( );
	void TryReload ( unsigned long bDisplayHint );
	void DissipateHeat ( float DeltaTime );
	void DoReload ( );
	void DoEarlyReload ( );
	float GetReloadDuration ( );
	bool ShouldAutoReload ( );
	bool CanReload ( );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance );
	void PlayReloadEject ( );
	void StopFireEffects ( unsigned char FireModeNum );
	void WeaponPlayWwiseEvent ( class UWwiseEvent* Sound, float NoiseLoudness, struct FVector SoundLoc );
	void SpawnTracerEffect ( struct FVector HitLocation, float HitDistance );
	bool ShouldSpawnTracerFX ( );
	void PlayOwnedFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	void HideReloadEmitters ( );
	void HideMuzzleFlashLight ( );
	void HideMuzzleFlashEmitter ( );
	void StopMuzzleFlashEffect ( );
	bool IsCameraWithinRadius ( struct FVector TestLocation, float Radius );
	bool IsMuzzleFlashRelevant ( );
	void PlayMuzzleFlashEffect ( );
	void PlayMuzzleFlashLightEffect ( );
	void StepMuzzleLight ( );
	void AdjustLightPropertiesByDeltas ( );
	void CalculateEffectLightDeltas ( float StartBrightness, float EndBrightness, struct FColor StartColor, struct FColor EndColor, float DeltaTime );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	void CheckTimerFireOnce ( );
	void PlayFireEffectsOnce ( unsigned char FireModeNum, struct FVector HitLocation );
	void eventPrecacheVFX ( );
	class UDecalComponent* GetWeaponSpecificDecalData ( class USFXPhysicalMaterialDecals* DecalEffects, float* FadeTime );
	class UDecalComponent* GetDecalData ( class UPhysicalMaterial* PhysMat, float* FadeTime );
	void SpawnADecal ( struct FImpactInfo Impact );
	class UWwiseEvent* GetWeaponSpecificImpactSound ( class USFXPhysicalMaterialImpactSounds* ImpactSounds );
	class UWwiseEvent* GetImpactSound ( class UPhysicalMaterial* PhysMat );
	void SpawnImpactSounds ( struct FImpactInfo Impact );
	class UParticleSystem* GetWeaponSpecificImpactEffect ( class USFXPhysicalMaterialImpactEffects* ImpactEffects );
	class UParticleSystem* GetImpactEffect ( class UPhysicalMaterial* PhysMat );
	void ActivateImpactPSC ( class UParticleSystem* Template, struct FImpactInfo Impact );
	void SpawnImpactEffects ( struct FImpactInfo Impact );
	void ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits );
	struct FImpactInfo CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, struct TArray<struct FImpactInfo>* ImpactList );
	void InstantFire ( );
	int GetMaximumAllowedAmmo ( );
	int GetAmmoCountInMagazine ( );
	float GetFireInterval ( unsigned char FireModeNum );
	bool HasAnyAmmo ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	bool HasBurstAmmo ( unsigned char FireModeNum );
	bool HasSpareAmmo ( );
	int AddAmmo ( int Amount );
	void PlayLowAmmoVocalization ( );
	void ConsumeAmmo ( unsigned char FireModeNum );
	void InitializeAmmo ( );
	float GetZoomFOV ( float BaseFOV );
	bool GetModifiedFOV ( float* FOV );
	struct FVector GetMuzzleLoc ( );
	void SetWeaponRecoil ( float PitchRecoil );
	void SetZoomed ( unsigned long bState );
	float GetAIAimDelay ( );
	float GetAimError ( float Accuracy );
	float GetPlayerAimError ( );
	struct FRotator GetAdjustedAim ( struct FVector StartFireLoc );
	float GetRateOfFire ( );
	float GetTraceRange ( );
	struct FVector2D GetWeaponAimErrorRange ( );
	float GetWeaponRecoil ( );
	void ResetAmmoOnHolster ( );
	float GetCurrentTotalAmmo ( );
	int GetMaxTotalAmmo ( );
	float GetCurrentSpareAmmo ( );
	int GetMaxSpareAmmo ( unsigned long bIgnoreCurrentMag );
	float GetMagazineSize ( );
	bool OutOfAmmo ( );
	class UClass* GetDamageType ( unsigned char FiringMode );
	void GetRangeMultiplier ( struct FVector HitLocation, class AActor* HitActor, float* RangeMultiplier, float* Range );
	void ModifyDamage ( struct FVector HitLocation, class AActor* HitActor, float* Multiplier );
	float GetFireModeBaseDamage ( );
	void NotifyUnpossessed ( );
	bool UseFirstPersonCamera ( );
	void GetProjectileFirePosition ( struct FVector* out_ProjLoc, struct FVector* out_ProjDir );
	struct FVector GetPhysicalFireStartLoc ( struct FVector AimDir );
	class AProjectile* ProjectileFire ( );
	void ForceEndFire ( );
	void EndFire ( unsigned char FireModeNum );
	void StartBurstFire ( unsigned char FireModeNum );
	void BurstRefireTimer ( );
	void InitDefaultDecalProperties ( );
	void ScaleWeapon ( int Level );
	float CalculateStaticBonus ( );
	void PostBeginPlay ( );
	void OnWeaponUnequip ( class ASFXWeapon* Weapon );
	void OnWeaponEquip ( class ASFXWeapon* Weapon );
	void OnWeaponReload ( class ASFXWeapon* Weapon );
	float GetDamageVocProbabilityMod ( );
	void OnWeaponImpact ( class ASFXWeapon* Weapon, struct FImpactInfo Impact );
};

// Class SFXGame.SFXHeavyWeapon
// 0x0003 (0x0974 - 0x0971)
class ASFXHeavyWeapon : public ASFXWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PlayLowAmmoVocalization ( );
	int AddHeavyAmmo ( int Ammo );
	void ScaleWeapon ( int Level );
	float GetCurrentSpareAmmo ( );
	int AddAmmo ( int Amount );
	void ConsumeAmmo ( unsigned char FireModeNum );
};

// Class SFXGame.SFXModule_GameEffectManager
// 0x0010 (0x007C - 0x006C)
class USFXModule_GameEffectManager : public USFXModule
{
public:
	struct TArray<class USFXGameEffect*>               GameEffects;                                      		// 0x006C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UnpauseEffectsByType ( class UClass* EffectClass );
	void PauseEffectsByType ( class UClass* EffectClass );
	class USFXGameEffect* GetFirstEffectOfType ( class UClass* EffectClass );
	void OnCombatEnd ( );
	float GetEffectValue ( class UClass* EffectClass, float BaseValue );
	void RemoveAllEffects ( );
	void RemoveEffectsByTypeAndCategory ( class UClass* EffectClass, struct FName Category );
	void UpdateEffectsByCategory ( struct FName Category, class AController* Instigator, struct TArray<class UClass*>* EffectClasses );
	void RemoveEffectsByCategory ( struct FName Category );
	void RemoveEffectsByType ( class UClass* EffectClass );
	void RemoveEffect ( class USFXGameEffect* Effect );
	class USFXGameEffect* CreateEffect ( class UClass* EffectClass, struct FName Category, float Duration, unsigned char DurationType, float EffectValue, class AController* Instigator );
	bool HasEffectOfTypeAndCategory ( class UClass* EffectClass, struct FName Category );
	bool HasEffectOfCategory ( struct FName Category );
	bool HasEffectOfType ( class UClass* EffectClass );
	bool FindBestEffect ( class UClass* EffectClass, class USFXGameEffect** BestEffect );
	void Tick ( float DeltaSeconds );
};

// Class SFXGame.SFXGameEffect
// 0x0031 (0x0091 - 0x0060)
class USFXGameEffect : public UObject
{
public:
	class AActor*                                      Owner;                                            		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AController*                                 Instigator;                                       		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       Category;                                         		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CompletionName;                                   		// 0x0078 (0x0008) [0x0000000000000000]              
	float                                              Duration;                                         		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentTime;                                      		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              EffectValue;                                      		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStacking : 1;                                    		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bVisited : 1;                                     		// 0x008C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSendCompletionEvent : 1;                         		// 0x008C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      DurationType;                                     		// 0x0090 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnUnpaused ( );
	void OnPaused ( );
	void OnCombatEnd ( );
	void OnRemoved ( );
	void OnUpdate ( float DeltaSeconds );
	void OnApplied ( );
	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
	bool HasExpired ( );
};

// Class SFXGame.SFXGameEffect_AIAccuracyPenalty
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_AIAccuracyPenalty : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXSeqEvt_EnteringStasis
// 0x0002 (0x0128 - 0x0126)
class USFXSeqEvt_EnteringStasis : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventRegisterEvent ( );
};

// Class SFXGame.SFXSeqEvt_LeavingStasis
// 0x0002 (0x0128 - 0x0126)
class USFXSeqEvt_LeavingStasis : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventRegisterEvent ( );
};

// Class SFXGame.BioAnimNodeBlendAdditivePower
// 0x0000 (0x011C - 0x011C)
class UBioAnimNodeBlendAdditivePower : public UBioAnimNodeBlendAdditive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendWeaponEquip
// 0x0003 (0x0100 - 0x00FD)
class UBioAnimNodeBlendWeaponEquip : public UAnimNodeBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNotify_CustomAction
// 0x0008 (0x0068 - 0x0060)
class UBioAnimNotify_CustomAction : public UAnimNotify_Scripted
{
public:
	struct FName                                       Info;                                             		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

// Class SFXGame.BioAreaTransition
// 0x0010 (0x02DC - 0x02CC)
class ABioAreaTransition : public ATriggerVolume
{
public:
	struct FName                                       sMoveToArea;                                      		// 0x02CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       sMoveToStartPoint;                                		// 0x02D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

// Class SFXGame.SFXPawn
// 0x00BC (0x0B64 - 0x0AA8)
class ASFXPawn : public ABioPawn
{
public:
	struct FScreenShakeStruct                          FootstepShake;                                    		// 0x0AA8 (0x0070) [0x0000000000000001]              ( CPF_Edit )
	struct FVisualEffect                               FireChargingVFX;                                  		// 0x0B18 (0x0010) [0x0000000000000000]              
	class UParticleSystem*                             PS_HeadGib;                                       		// 0x0B28 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             PS_LimbGib;                                       		// 0x0B30 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       nmMuzzleSocketName;                               		// 0x0B38 (0x0008) [0x0000000000000000]              
	struct FName                                       nmShellCasingSocketName;                          		// 0x0B40 (0x0008) [0x0000000000000000]              
	class USFXVocalizationBank*                        VocalizationBankOverride;                         		// 0x0B48 (0x0008) [0x0000000000000000]              
	class UForceFeedbackWaveform*                      FootstepForceFeedback;                            		// 0x0B50 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                ShieldImpactOffset;                               		// 0x0B58 (0x0004) [0x0000000000000000]              
	int                                                PrettyName;                                       		// 0x0B5C (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsTalking : 1;                                   		// 0x0B60 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSupportsVisibleWeapons : 1;                      		// 0x0B60 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnPowersLoaded ( );
	void CreatePlayerSquadWeapons ( class USFXPlayerSquadLoadoutData* ChkLoadout, struct FName* LoadoutWeapons );
	int GetPrettyName ( );
	struct FString GetShieldTypeAsDisplayString ( );
	bool CanUseWeapon ( class UClass* WeaponClass );
	void PlayFireCharging ( );
	void CreateVisualEffect ( class UBioVFXTemplate* Template, class ABioVisualEffect** Effect );
	void TalkingTimout ( );
	void SetTalking ( );
	void PlayStepEffect ( int FootDown, struct FTraceHitInfo HitInfo, float Loudness );
};

// Class SFXGame.SFXPawn_Player
// 0x0253 (0x0DB7 - 0x0B64)
class ASFXPawn_Player : public ASFXPawn
{
public:
	struct TArray<struct FCustomizableElement>         CasualAppearances;                                		// 0x0B64 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FCustomizableElement>         FullBodyAppearances;                              		// 0x0B74 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FCustomizableElement>         TorsoAppearances;                                 		// 0x0B84 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FCustomizableElement>         ShoulderAppearances;                              		// 0x0B94 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FCustomizableElement>         ArmAppearances;                                   		// 0x0BA4 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FCustomizableElement>         LegAppearances;                                   		// 0x0BB4 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FCustomizableElement>         HelmetAppearances;                                		// 0x0BC4 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FCustomizableElement>         SpecAppearances;                                  		// 0x0BD4 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FCustomizableElement>         Tint1Appearances;                                 		// 0x0BE4 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FCustomizableElement>         Tint2Appearances;                                 		// 0x0BF4 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FCustomizableElement>         PatternAppearances;                               		// 0x0C04 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FCustomizableElement>         PatternColorAppearances;                          		// 0x0C14 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FemalePhysAsset;                                  		// 0x0C24 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FemaleHeadMesh;                                   		// 0x0C34 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FemaleHairMesh;                                   		// 0x0C44 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FirstName;                                        		// 0x0C54 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     PlayerClassName;                                  		// 0x0C64 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FScarInfo>                    Scars;                                            		// 0x0C74 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FaceCode;                                         		// 0x0C84 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     m_sWwiseAudioComponentLabel;                      		// 0x0C94 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sWwiseRTPCNameUseCasual;                        		// 0x0CA4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScreenShakeStruct                          HitShake;                                         		// 0x0CB4 (0x0070) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                IconicFemaleSkinToneColor;                        		// 0x0D24 (0x0010) [0x0000000000000000]              
	class USFXCharacterClass*                          PlayerClass;                                      		// 0x0D34 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  m_GUI_Icon;                                       		// 0x0D3C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  m_GUI_Icon_Dead;                                  		// 0x0D44 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      CoverForceFeedback;                               		// 0x0D4C (0x0008) [0x0000000000000000]              
	class UWwiseEvent*                                 CoverEnterSound;                                  		// 0x0D54 (0x0008) [0x0000000000000000]              
	struct FName                                       IconicFemaleSkinToneName;                         		// 0x0D5C (0x0008) [0x0000000000000000]              
	int                                                N7ArmourName;                                     		// 0x0D64 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                N7ArmourDescription;                              		// 0x0D68 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                CasualID;                                         		// 0x0D6C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FullBodyID;                                       		// 0x0D70 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TorsoID;                                          		// 0x0D74 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ShoulderID;                                       		// 0x0D78 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ArmID;                                            		// 0x0D7C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LegID;                                            		// 0x0D80 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SpecID;                                           		// 0x0D84 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Tint1ID;                                          		// 0x0D88 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Tint2ID;                                          		// 0x0D8C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PatternID;                                        		// 0x0D90 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PatternColorID;                                   		// 0x0D94 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                HelmetID;                                         		// 0x0D98 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                OverrideHelmetID;                                 		// 0x0D9C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              OutOfAmmoTimestamp;                               		// 0x0DA0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OutOfAmmoSwapThreshold;                           		// 0x0DA4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CosmeticSurgeryPlotID;                            		// 0x0DA8 (0x0004) [0x0000000000000000]              
	float                                              TotalXP;                                          		// 0x0DAC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bUseCasualAppearance : 1;                         		// 0x0DB0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOverrideHideScars : 1;                           		// 0x0DB0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bHasBreather : 1;                               		// 0x0DB0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bInPersonalization : 1;                           		// 0x0DB0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned char                                      CombatAppearance;                                 		// 0x0DB4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Origin;                                           		// 0x0DB5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Notoriety;                                        		// 0x0DB6 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetPlayerLOD ( );
	void CreateWeapons ( class USFXLoadoutData* ChkLoadout );
	void SetCombatState_Inactive ( );
	void SetCombatState_Active ( );
	void SetCombatState ( unsigned long bDraw );
	void eventSetRTPCHelmetIsEnabled ( class UWwiseAudioComponent* WwiseComponent );
	bool SwitchToBackupWeapon ( class ASFXWeapon* PreferredWeapon );
	void PlayerCoverAcquired ( struct FCovPosInfo CovInfo );
	class UTexture2D* GetGUIIcon ( unsigned long bDeadIcon );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void PlayShieldHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo );
	bool PlayAnimatedReaction ( unsigned char CustomAction, class AController* InstigatedBy, unsigned long bPlayImpact, struct FVector HitLocation, struct FVector HitNormal, unsigned long bDeathReaction, struct FTraceHitInfo* HitInfo );
	void CheckEnterCombat ( );
	void AutoMapPC ( );
	void AutoMapXbox ( );
	void ApplyBonuses ( );
	void AutoMap ( unsigned long bUsingGamepad );
	class USFXPower* FindPower ( struct FName nmPower );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void PostBeginPlay ( );
	void AddPlayerInventory ( );
	int GetScaledLevel ( );
	void CopyPawnAppearance ( class ABioPawn* SourcePawn );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void ForceHelmetVisibility ( unsigned long bHelmetVisible );
	void ForceShowHelmet ( unsigned long bShowHelmet );
	void ForceHideHelmet ( unsigned long bHideHelmet );
	void PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo );
	void UpdateWeaponVisibility ( );
	bool CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon );
	void UpdateParameters ( );
	int GetScarValue ( );
	void GetParagonRenegadeNetPips ( int* ParagonPips, int* RenegadePips );
	void ApplyScarParameters ( struct TArray<struct FScarInfo> InScars, int InNetAlignment, class ABioPawn* Pawn );
	void UpdateBodyAppearance ( );
	void RefreshMaterialInstances ( );
	void ClearMaterialInstances ( );
	void UpdateAppearance ( );
	void UpdateHairAppearance ( );
	void UpdateGameEffects ( );
	void GetGameEffects ( int Id, struct TArray<struct FCustomizableElement>* Meshes, struct TArray<class UClass*>* Effects );
	void ValidateAppearanceIDs ( );
	class UMaterialInstanceConstant* EnsureMIC ( class USkeletalMeshComponent* MeshCmpt, int MatIdx );
	class USkeletalMesh* GetHelmetMesh ( int Id, unsigned char Part, struct TArray<struct FCustomizableElement>* Meshes, struct FCustomizableElement* Element );
	class UMaterialInstance* GetMaterialOverride ( int Id, struct TArray<struct FCustomizableElement>* Meshes, struct FCustomizableElement* Element );
	class USkeletalMesh* GetMesh ( int Id, struct TArray<struct FCustomizableElement>* Meshes, struct FCustomizableElement* Element );
	struct FString GetFullName ( );
	int GetLastNameStringRef ( );
};

// Class SFXGame.BioSeqEvt_ArtPlaceableUsed
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_ArtPlaceableUsed : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_ArtPlaceablePlotFail
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_ArtPlaceablePlotFail : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_ArtPlaceableTransition
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_ArtPlaceableTransition : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_OnAttacked
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_OnAttacked : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_OnCastAt
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_OnCastAt : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqEvt_ArtPlaceableSkillGameFailed
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_ArtPlaceableSkillGameFailed : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_ArtPlaceableSkillGameSuccess
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_ArtPlaceableSkillGameSuccess : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioArtPlaceableContainerType
// 0x0001 (0x0104 - 0x0103)
class UBioArtPlaceableContainerType : public UBioArtPlaceableType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioArtPlaceableDoorType
// 0x0001 (0x0104 - 0x0103)
class UBioArtPlaceableDoorType : public UBioArtPlaceableType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioArtPlaceableInertType
// 0x0001 (0x0104 - 0x0103)
class UBioArtPlaceableInertType : public UBioArtPlaceableType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioArtPlaceableUseableType
// 0x0001 (0x0104 - 0x0103)
class UBioArtPlaceableUseableType : public UBioArtPlaceableType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioBaseActivity
// 0x002C (0x008C - 0x0060)
class UBioBaseActivity : public UObject
{
public:
	struct TArray<class UAnimSet*>                     m_aoActivityAnimSets;                             		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FActivityProp>                m_aProps;                                         		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       m_nAcitivityName;                                 		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bUseEnterExitAnims : 1;                         		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_MemberAdded
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_MemberAdded : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioFaction_BaseSquad
// 0x0003 (0x0080 - 0x007D)
class UBioFaction_BaseSquad : public UBioFaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioCameraBehaviorFlourish
// 0x0018 (0x0234 - 0x021C)
class UBioCameraBehaviorFlourish : public UBioCameraBehavior
{
public:
	float                                              ZOffset;                                          		// 0x021C (0x0004) [0x0000000000000000]              
	float                                              SpeedYaw;                                         		// 0x0220 (0x0004) [0x0000000000000000]              
	float                                              DesiredPitch;                                     		// 0x0224 (0x0004) [0x0000000000000000]              
	float                                              SpeedPitch;                                       		// 0x0228 (0x0004) [0x0000000000000000]              
	float                                              DesiredDistance;                                  		// 0x022C (0x0004) [0x0000000000000000]              
	float                                              SpeedDistance;                                    		// 0x0230 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
};

// Class SFXGame.BioCameraBehaviorFree
// 0x000C (0x0228 - 0x021C)
class UBioCameraBehaviorFree : public UBioCameraBehavior
{
public:
	float                                              m_fMovementScalar;                                		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRotationScalar;                                		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bCameraLocked : 1;                              		// 0x0224 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Initialize ( class ABioPlayerController* NewOwner );
	void Tick ( float TimeDelta );
};

// Class SFXGame.SFXInventoryManager
// 0x00EC (0x03A4 - 0x02B8)
class ASFXInventoryManager : public AInventoryManager
{
public:
	class UClass*                                      CurrentWeaponSelection;                           		// 0x02B8 (0x0008) [0x0000000000000000]              
	struct FRotator                                    AccuracyLastViewRot;                              		// 0x02C0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    WeaponRecoilOffset;                               		// 0x02CC (0x000C) [0x0000000000000000]              
	struct FRotator                                    TotalRecoil;                                      		// 0x02D8 (0x000C) [0x0000000000000000]              
	struct FRotator                                    Drift;                                            		// 0x02E4 (0x000C) [0x0000000000000000]              
	struct FRotator                                    DriftTarget;                                      		// 0x02F0 (0x000C) [0x0000000000000000]              
	struct FVector2D                                   InterpRange;                                      		// 0x02FC (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                Credits;                                          		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Medigel;                                          		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Eezo;                                             		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Iridium;                                          		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Palladium;                                        		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Platinum;                                         		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Probes;                                           		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentFuel;                                      		// 0x0320 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxCredits;                                       		// 0x0324 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxEezo;                                          		// 0x0328 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxIridium;                                       		// 0x032C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxPalladium;                                     		// 0x0330 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxPlatinum;                                      		// 0x0334 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxMedigel;                                       		// 0x0338 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxProbes;                                        		// 0x033C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxFuel;                                          		// 0x0340 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FuelEfficiency;                                   		// 0x0344 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              Base_Acc_Standing;                                		// 0x0348 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Base_Acc_Zoom;                                    		// 0x034C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AccMod_Move;                                      		// 0x0350 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AccMod_ViewTurn;                                  		// 0x0354 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AccMod_Crouched;                                  		// 0x0358 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AccMod_MouseMultiplier;                           		// 0x035C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AccMod_MaxCameraLoss;                             		// 0x0360 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Base_Interp_Speed;                                		// 0x0364 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              InterpMod_Move;                                   		// 0x0368 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              InterpMul_ViewTurn;                               		// 0x036C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Accuracy;                                         		// 0x0370 (0x0004) [0x0000000000000000]              
	float                                              AccMod_WeaponFired;                               		// 0x0374 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeSinceLastFire;                                		// 0x0378 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DriftPitch;                                       		// 0x037C (0x0004) [0x0000000000000000]              
	float                                              DriftYaw;                                         		// 0x0380 (0x0004) [0x0000000000000000]              
	float                                              DriftInterpSpeed;                                 		// 0x0384 (0x0004) [0x0000000000000000]              
	float                                              DriftInterpResetSize;                             		// 0x0388 (0x0004) [0x0000000000000000]              
	float                                              DriftInterpMinSize;                               		// 0x038C (0x0004) [0x0000000000000000]              
	float                                              DriftNoiseMagPitch;                               		// 0x0390 (0x0004) [0x0000000000000000]              
	float                                              DriftNoiseMagYaw;                                 		// 0x0394 (0x0004) [0x0000000000000000]              
	float                                              DriftRampUpRate;                                  		// 0x0398 (0x0004) [0x0000000000000000]              
	float                                              DriftRampUpDelay;                                 		// 0x039C (0x0004) [0x0000000000000000]              
	unsigned long                                      bWeaponFired : 1;                                 		// 0x03A0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void StartFire ( unsigned char FireModeNum );
	bool GrantScaledCredits ( int nSize, unsigned long i_bTickResource );
	int GetMaxProbes ( );
	int GetMaxMedigel ( );
	void SetMaxFuel ( float F );
	float GetMaxFuel ( );
	int GetResource ( unsigned char eInvResType );
	void EmptyResource ( unsigned char ResourceType );
	void AdjustResource ( unsigned char eInvResType, int Amount, unsigned long bShowNotification, unsigned long bIgnoreBudget );
	void eventEmptyInventory ( );
	void ProcessDamage ( class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, float* Damage, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum );
	class AInventory* CreateInventory ( class UClass* NewInventoryItemClass, unsigned long bDoNotActivate );
	class ASFXWeapon* GetWeaponInSlot ( unsigned char Slot, unsigned long bIgnoreWielded );
	void SetWeaponIfAvailable ( class ASFXWeapon* WeapToSwitch );
	void SetWeaponFromSlot ( unsigned char Slot );
	void SetWeaponBySelected ( );
	void ChangedWeapon ( );
	bool CancelWeaponChange ( );
	float GetPlayerCrosshairValue ( );
	float GetPlayerNormalizedAccuracy ( );
	void UpdatePlayerAccuracy ( float DeltaTime );
	void DebugDrawWeaponAccuracy ( );
	void Tick ( float DeltaTime );
	void UpdateKickbackFade ( float DeltaTime, struct FRotator* out_DeltaRot );
	bool ApplySniperDrift ( float DeltaTime );
	void UpdateKickback ( float DeltaTime, struct FRotator* out_DeltaRot );
	void SetWeaponRecoil ( float PitchRecoil );
	void SwitchToBestWeapon ( unsigned long bForceADifferentWeapon );
};

// Class SFXGame.BioCameraBehaviorLocked
// 0x0000 (0x021C - 0x021C)
class UBioCameraBehaviorLocked : public UBioCameraBehavior
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Initialize ( class ABioPlayerController* NewOwner );
};

// Class SFXGame.SFXCharacterClass
// 0x0045 (0x00A5 - 0x0060)
class USFXCharacterClass : public UObject
{
public:
	struct FString                                     ClassName;                                        		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FName>                        MappedPowers;                                     		// 0x0070 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	class USFXLoadoutData*                             Loadout;                                          		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              BioticStrength;                                   		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TechStrength;                                     		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CombatStrength;                                   		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                srClassName;                                      		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                srClassDesc;                                      		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                srClassPrimaryDesc;                               		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                srClassSecondaryDesc;                             		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ClassType;                                        		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXPawn_Henchman
// 0x0038 (0x0B9C - 0x0B64)
class ASFXPawn_Henchman : public ASFXPawn
{
public:
	struct TArray<struct FHenchmanInfoStruct>          HenchmenInfo;                                     		// 0x0B64 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      HelmetMesh;                                       		// 0x0B74 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UTexture2D*                                  m_GUI_Icon;                                       		// 0x0B7C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  m_GUI_Icon_Dead;                                  		// 0x0B84 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmMappedPower;                                  		// 0x0B8C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              PowerUseDelay;                                    		// 0x0B94 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bHelmetHidesHead : 1;                             		// 0x0B98 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void CreateWeapons ( class USFXLoadoutData* ChkLoadout );
	void GetDefaultLoadout ( struct FName HTag, struct FName* DLoadout );
	int eventGetMaxAttackTickets ( );
	int eventGetMaxTargetTickets ( );
	void PlayDeathVocalization ( class ABioPawn* Killer );
	void eventSetRTPCHelmetIsEnabled ( class UWwiseAudioComponent* WwiseComponent );
	class UTexture2D* GetGUIIcon ( unsigned long bDeadIcon );
	void ValidateRagdoll ( );
	void InitializeHenchman ( int DesiredLevel );
	void SpawnDefaultWeapons ( );
	bool eventResurrect ( float PercentOfHealthRegained, unsigned long bIsInstantaneous );
	void Revive ( class AActor* User );
	void PostBeginPlay ( );
	bool GetAttackOrderPower ( class USFXPower** Power );
	bool InCombat ( );
	void eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	int GetScaledLevel ( );
	void ForceHelmetVisibility ( unsigned long bHelmetVisible );
	void ShowHelmet ( unsigned long bShowHelmet );
};

// Class SFXGame.SFXLegacyData
// 0x02F0 (0x0350 - 0x0060)
class USFXLegacyData : public UObject
{
public:
	struct FPlayerSaveRecord                           PlayerRecord;                                     		// 0x0060 (0x02DC) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UBioGlobalVariableTable*                     ImportVarTable;                                   		// 0x033C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                LegacyCredits;                                    		// 0x0344 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ParagonPoints;                                    		// 0x0348 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RenegadePoints;                                   		// 0x034C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void GetSpawnData ( int* IsFemale, class UClass** CharacterClass, struct FString* FirstName, unsigned char* Origin, unsigned char* Notoriety );
	void ProcessME1SaveGame ( class USFXSaveGame* SaveGame );
	float GetRenegadePointsPct ( );
	float GetParagonPointsPct ( );
	unsigned char GetOrigin ( );
	unsigned char GetNotoriety ( );
	int GetLegacyClass ( );
	int GetLegacyCredits ( );
	int GetLevel ( );
	struct FString GetFirstName ( );
	bool IsFemale ( );
};

// Class SFXGame.SFXPawn_PlayerSoldier
// 0x0001 (0x0DB8 - 0x0DB7)
class ASFXPawn_PlayerSoldier : public ASFXPawn_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXVocalizationManager
// 0x0010 (0x02DC - 0x02CC)
class ASFXVocalizationManager : public ASFXVocalizationManagerNativeBase
{
public:
	struct TArray<struct FVocEventLog>                 PastEvents;                                       		// 0x02CC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DrawActorLog ( class AActor* oActor, class ABioHUD* H );
	void DebugDraw ( class ABioHUD* H );
	void eventTickEvents ( float DeltaTime );
	bool eventPlaySFXVocalizationSLineInternal ( class ABioPawn* Speaker, float DelaySec, struct FSFXVocalizationEvent* E, struct FSFXVocalizationLine* LineToPlay );
	void TriggerVocalizationEvent ( unsigned char Id, class ABioPawn* InInstigator, class ABioPawn* Recipient, class ABioPawn* ReferringTo, float DelaySec, float fChanceToPlayModifier );
	void eventPostBeginPlay ( );
};

// Class SFXGame.SFXDamageType_CheatKill
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_CheatKill : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_Default
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_Default : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXModule_Damage
// 0x00C0 (0x012C - 0x006C)
class USFXModule_Damage : public USFXModule_DamageBase
{
public:
	struct FScaledFloat                                MaxHealth;                                        		// 0x006C (0x0028) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScaledFloat                                DamageMultiplier;                                 		// 0x0094 (0x0028) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FWwiseRTPCForActorHandler                   m_RTPCHandler;                                    		// 0x00BC (0x001C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FDamagePart                                 DamageParts[ 0x8 ];                               		// 0x00D8 (0x0040) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentHealth;                                    		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageScale;                                      		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLastHealthPct;                                 		// 0x0120 (0x0004) [0x0000000000000000]              
	float                                              NOTICEABLE_RTPC_CHANGE_AMOUNT;                    		// 0x0124 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bShowImmunityOnGUI : 1;                           		// 0x0128 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bGoreActorEnabled : 1;                            		// 0x0128 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bPartBasedDamageEnabled : 1;                      		// 0x0128 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsDead : 1;                                      		// 0x0128 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
	void DestroyConstraint ( unsigned char Group );
	struct TArray<unsigned char> GetConstraints ( );
	void PlayHitEffects ( class AActor* DamageCauser, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation );
	class URB_BodySetup* GetBodyFromHit ( struct FTraceHitInfo* HitInfo );
	void SFXTakeRadiusDamage ( float Damage, float DamageRadius, unsigned long bFullDamage, struct FVector HurtOrigin, float Momentum, class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser );
	void ProcessHit ( float Damage, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, unsigned long HeadShot, struct FTraceHitInfo* HitInfo );
	void DetachLimb ( class URB_BodySetup* HitBody );
	void CreateGoreActor ( class APawn* Pawn, struct FName BoneName );
	void ApplyDamageToHealth ( float Damage, class AController* InstigatedBy, class UClass* DamageType, struct FVector* HitLocation );
	void SFXTakeDamage ( float Damage, class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum );
	void eventPostBeginPlay ( );
	void ScaleHealth ( );
};

// Class SFXGame.SFXModule_DamageParty
// 0x0010 (0x013C - 0x012C)
class USFXModule_DamageParty : public USFXModule_Damage
{
public:
	float                                              HealthRegenRate;                                  		// 0x012C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              HealthRegenTimeout;                               		// 0x0130 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              TimeLastHurt;                                     		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bHealthRegenerates : 1;                           		// 0x0138 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyDamageToHealth ( float Damage, class AController* InstigatedBy, class UClass* DamageType, struct FVector* HitLocation );
	void Regen ( float DeltaTime );
	void Tick ( float DeltaTime );
};

// Class SFXGame.SFXModule_DamagePlayer
// 0x0098 (0x01D4 - 0x013C)
class USFXModule_DamagePlayer : public USFXModule_DamageParty
{
public:
	struct FInterpCurveFloat                           BleedoutVFXCurve;                                 		// 0x013C (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     BleedOutRTPC;                                     		// 0x0150 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ABioVisualEffect*                            BleedOutVFX;                                      		// 0x0160 (0x0008) [0x0000000000000000]              
	class ABioVisualEffect*                            DamageFrameBuffer;                                		// 0x0168 (0x0008) [0x0000000000000000]              
	class UWwiseAudioComponent*                        WwiseComponent;                                   		// 0x0170 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UWwiseEventPairObject*                       BleedOutEventPair;                                		// 0x0178 (0x0008) [0x0000000000000000]              
	class UBioVFXTemplate*                             BleedOutVFXTemplate;                              		// 0x0180 (0x0008) [0x0000000000000000]              
	struct FName                                       BleedOutVFXParameter;                             		// 0x0188 (0x0008) [0x0000000000004000]              ( CPF_Config )
	float                                              BleedOutSoundTime;                                		// 0x0190 (0x0004) [0x0000000000000000]              
	float                                              BleedOutSoundDuration;                            		// 0x0194 (0x0004) [0x0000000000000000]              
	float                                              BleedOutEntryThreshold;                           		// 0x0198 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              BleedOutRecoveryThreshold;                        		// 0x019C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              BleedOutStartTime;                                		// 0x01A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BleedOutSoundDurationStart;                       		// 0x01A4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              BleedOutSoundDurationEnd;                         		// 0x01A8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              BleedOutSoundVolumeStart;                         		// 0x01AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              BleedOutSoundVolumeEnd;                           		// 0x01B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fBleedOutOverride;                                		// 0x01B4 (0x0004) [0x0000000000000000]              
	float                                              fBleedOutInterpSpeed;                             		// 0x01B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fBleedOutVFXParam;                                		// 0x01BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PercentBledOut;                                   		// 0x01C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fDebugShieldIndicator;                            		// 0x01C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fDebugHealthIndicator;                            		// 0x01C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fDebugCooldownIndicator;                          		// 0x01CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsBleedingOut : 1;                               		// 0x01D0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDebugHealthBarEnabled : 1;                       		// 0x01D0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float ComputePercentBledOut ( );
	void OnBleedOutStop ( );
	void OnBleedOutStart ( );
	void ScaleBleedOut ( );
	void UpdateBleedOut ( float TimeDelta );
	void CalculateBleedoutVFXParam ( float TimeDelta );
	void Tick ( float TimeDelta );
	void RecoverFromBleedout ( );
	void ApplyDamageToHealth ( float Damage, class AController* InstigatedBy, class UClass* DamageType, struct FVector* HitLocation );
	void SFXTakeDamage ( float Damage, class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum );
};

// Class SFXGame.SFXPlotTreasure
// 0x0028 (0x00A0 - 0x0078)
class USFXPlotTreasure : public UBioPlotTreasure
{
public:
	float                                              fFullPriceMultiplier;                             		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                nLastUnlockedTech;                                		// 0x007C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srMultiLevelUpgradeName;                          		// 0x0080 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                nProfessorInPartyId;                              		// 0x0084 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                nProfessorIsDeadId;                               		// 0x0088 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srLabOpenResearchMessage;                         		// 0x008C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srLabClosedResearchMessage;                       		// 0x0090 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                StateNewResearchAvailable;                        		// 0x0094 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                StateNewUpgradesAvailable;                        		// 0x0098 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srCanAffordResearch;                              		// 0x009C (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void TriggerResourceHint ( unsigned char InvType, int nAmount );
	void SetNewUpgradesAvailable ( unsigned long bUpgadesAvailable );
	void SetNewResearchAvailable ( unsigned long bResearchAvailable );
	class UTexture2D* FindImage ( struct FString Path );
	void GetTechImageResourcePath ( struct FName nmTech, unsigned long bNoLookup, struct FString* sImagePath, struct FString* sLargeImagePath );
	struct FString GetTreasureLargeImageResourcePath ( int nTreasureId );
	struct FString GetTreasureImageResourcePath ( int nTreasureId );
	float Price ( int nTreasureId, unsigned long bDiscount );
	int CalculateResearchLevelMultiplier ( struct FName nmTech );
	bool ChargeForTreasure ( int nTreasureId, unsigned long bDiscount );
	bool QualifiesForTreasure ( int nTreasureId );
	bool DiscoveredResearch ( int nTreasureId );
	bool CanAffordTreasure ( int nTreasureId, unsigned long bDiscount );
	struct FString GetTechName ( struct FSTech stTech, unsigned long bAddOne );
	void CheckForUpgradedWeaponAchievement ( );
	void ReLockTech ( struct FSTech stTech );
	bool AwardTech ( struct FName nmTech, unsigned long bNoAnimation, unsigned long bStorePurchase );
	struct FName FindTechByResearch ( struct FName nmTech );
	bool AwardTreasure ( int nTreasureId, unsigned long bDiscount );
	void LogWarning ( struct FString msg );
	struct FName CurrentLevel ( );
	struct FSTech Tech ( struct FName nmTech );
	struct FSTreasure TREASURE ( int nTreasureId );
	struct FSResourceBudget Budget ( struct FName nmLevel );
	struct FSResourceBudget BudgetFromId ( int nID );
};

// Class SFXGame.SFXGameConfig
// 0x0088 (0x00E8 - 0x0060)
class USFXGameConfig : public UObject
{
public:
	class UTexture2D*                                  SelectionReticle;                                 		// 0x0060 (0x0008) [0x0000000000000000]              
	class UMaterialInterface*                          SelectionMaterial;                                		// 0x0068 (0x0008) [0x0000000000000000]              
	float                                              PhysicsMomentumMultiplier;                        		// 0x0070 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PlayerMomentumCap;                                		// 0x0074 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PlayerCoverDamageMultiplier;                      		// 0x0078 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PlayerStormDamageMultiplier;                      		// 0x007C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PlayerCoverLeanDamageMultiplier;                  		// 0x0080 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PawnInRagdollDamageMultiplier;                    		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PlayerCoverRegenTimerMultiplier;                  		// 0x0088 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              HeatDissipationRate;                              		// 0x008C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CoverAimBonus;                                    		// 0x0090 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxPlayerLevel;                                   		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxPlayerExperience;                              		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CreditsGlobal;                                    		// 0x009C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                IridiumGlobal;                                    		// 0x00A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PlatinumGlobal;                                   		// 0x00A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PalladiumGlobal;                                  		// 0x00A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                EezoGlobal;                                       		// 0x00AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                IdGlobal;                                         		// 0x00B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                CreditsLocal;                                     		// 0x00B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                EezoLocal;                                        		// 0x00B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                IridiumLocal;                                     		// 0x00BC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PalladiumLocal;                                   		// 0x00C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PlatinumLocal;                                    		// 0x00C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                IdLocal;                                          		// 0x00C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                nLastDamage;                                      		// 0x00CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fLastDamageUpdate;                                		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fAmmoPulseTimer;                                  		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fTmpShieldIndicator;                              		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              fTmpHealthIndicator;                              		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              fHealthInterpSpeed;                               		// 0x00E0 (0x0004) [0x0000000000000000]              
	unsigned long                                      WeaponsUseHeat : 1;                               		// 0x00E4 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bOutOfAmmoWeaponSwap : 1;                         		// 0x00E4 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bShieldsBlockPowers : 1;                          		// 0x00E4 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      UseSharedPowerCooldown : 1;                       		// 0x00E4 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bUseConsoleControls : 1;                          		// 0x00E4 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bShowScore : 1;                                   		// 0x00E4 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bReviveSquadOnUse : 1;                            		// 0x00E4 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bIsFullAmmo : 1;                                  		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bBudgetEnforced : 1;                              		// 0x00E4 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      CanShootDeadBodies : 1;                           		// 0x00E4 (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	unsigned long                                      bAimAssistEnabled : 1;                            		// 0x00E4 (0x0004) [0x0000000000004000] [0x00000400] ( CPF_Config )
	unsigned long                                      bLastDamageUpdate : 1;                            		// 0x00E4 (0x0004) [0x0000000000004000] [0x00000800] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int RecordTreasure ( unsigned char eType, int Award, int LevelId );
	struct FTreasureBudget GetGlobalBudget ( );
	struct FTreasureBudget GetLevelBudget ( );
};

// Class SFXGame.SFXPRI
// 0x0116 (0x0488 - 0x0372)
class ASFXPRI : public ASFXPRI_NativeBase
{
public:
	struct TArray<struct FKillScore>                   PointsFor_SpecialKills;                           		// 0x0374 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FKillScore>                   PointsFor_GameEffectKills;                        		// 0x0384 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FDamageRecordStruct>          DamageRecord;                                     		// 0x0394 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FScoreEvent>                  ScoreLog;                                         		// 0x03A4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FDamageCalculationAlgorithm                 LastDamageCalculation;                            		// 0x03B4 (0x0038) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      CurrentTarget;                                    		// 0x03EC (0x0008) [0x0000000000000000]              
	float                                              Multiplier;                                       		// 0x03F4 (0x0004) [0x0000000000000000]              
	float                                              PointsFor_DamageDealt;                            		// 0x03F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PointsFor_DamageReceived;                         		// 0x03FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PointsFor_HeadShot;                               		// 0x0400 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PointsFor_Kill_Minion;                            		// 0x0404 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PointsFor_Kill_Elite;                             		// 0x0408 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PointsFor_Kill_SubBoss;                           		// 0x040C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PointsFor_Kill_Boss;                              		// 0x0410 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PointsFor_FlamethrowerTankKill;                   		// 0x0414 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ShotsFired;                                       		// 0x0418 (0x0004) [0x0000000000000000]              
	int                                                ShotsHit;                                         		// 0x041C (0x0004) [0x0000000000000000]              
	float                                              RawDamage;                                        		// 0x0420 (0x0004) [0x0000000000000000]              
	float                                              NetDamage;                                        		// 0x0424 (0x0004) [0x0000000000000000]              
	int                                                HeadShots;                                        		// 0x0428 (0x0004) [0x0000000000000000]              
	int                                                ShotsFiredCurrentTarget;                          		// 0x042C (0x0004) [0x0000000000000000]              
	int                                                ShotsHitCurrentTarget;                            		// 0x0430 (0x0004) [0x0000000000000000]              
	float                                              RawDamageCurrentTarget;                           		// 0x0434 (0x0004) [0x0000000000000000]              
	float                                              NetDamageCurrentTarget;                           		// 0x0438 (0x0004) [0x0000000000000000]              
	float                                              DamageTakenRaw;                                   		// 0x043C (0x0004) [0x0000000000000000]              
	float                                              DamageTakenNet;                                   		// 0x0440 (0x0004) [0x0000000000000000]              
	float                                              TimeInCombat;                                     		// 0x0444 (0x0004) [0x0000000000000000]              
	float                                              TimeLastCombat;                                   		// 0x0448 (0x0004) [0x0000000000000000]              
	float                                              LastCombatTimestamp;                              		// 0x044C (0x0004) [0x0000000000000000]              
	float                                              DifficultyScore;                                  		// 0x0450 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LockedScore;                                      		// 0x0454 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ChallengeModifier;                                		// 0x0458 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentHealthMultiplier;                          		// 0x045C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentShieldModifier;                            		// 0x0460 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentMaxAttackTickets;                          		// 0x0464 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentMaxAttackTicketsHench;                     		// 0x0468 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentMaxTargetTickets;                          		// 0x046C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentMaxTargetTicketsHench;                     		// 0x0470 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AmmoPct;                                          		// 0x0474 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RecoilBonus;                                      		// 0x0478 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              WeaponPassiveDamageBonus;                         		// 0x047C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              WeaponDamageBonus;                                		// 0x0480 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bCalculatedChallenge : 1;                         		// 0x0484 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DivyPoints ( class AController* Other );
	void ResetDamageDealt ( );
	void ScoreFinesseKill ( class ABioPawn* Other, class UClass* DamageType );
	void AddGrinderAchievement ( unsigned char AchievementId, class ABioPawn* oTarget );
	void AddScore ( int Points, struct FString Message, unsigned long bAddDifficultyScore );
	void LockScore ( float fScore );
	void DrawScore ( );
	void RecordDamageDone ( class AController* DamageCauser, float Amount );
	void SwitchTarget ( class AActor* Target );
	void Clear ( );
	class ASFXPRI* FindLocalPRI ( );
	void PostBeginPlay ( );
	void Tick ( float DeltaTime );
	void UpdateScoreDifficulty ( );
};

// Class SFXGame.SFXDifficulty
// 0x0084 (0x00E4 - 0x0060)
class USFXDifficulty : public UObject
{
public:
	struct FVector2D                                   PlayerHealthMultiplierLow;                        		// 0x0060 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   PlayerHealthMultiplierHigh;                       		// 0x0068 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   HenchHealthMultiplierLow;                         		// 0x0070 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   HenchHealthMultiplierHigh;                        		// 0x0078 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   EnemyHealthMultiplierLow;                         		// 0x0080 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   EnemyHealthMultiplierHigh;                        		// 0x0088 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   FriendlyHealthMultiplierLow;                      		// 0x0090 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   FriendlyHealthMultiplierHigh;                     		// 0x0098 (0x0008) [0x0000000000004000]              ( CPF_Config )
	float                                              EnemyShieldBonus;                                 		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EnemyAimMultiplier;                               		// 0x00A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AmmoDecayMultiplier;                              		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              BleedOutInterval;                                 		// 0x00AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              BreachDuration;                                   		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                DifficultyLevel;                                  		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MinScore;                                         		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxScore;                                         		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PlayerShieldRechargeModifier;                     		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxAttackTickets;                                 		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxAttackTicketsHench;                            		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxTargetTickets;                                 		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxTargetTicketsHench;                            		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AmmoPct;                                          		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EnemyPowerCooldownMultiplier;                     		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SquadPowerDurationMultiplier;                     		// 0x00DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SquadPowerCooldownMultiplier;                     		// 0x00E0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateDifficulty ( class ASFXPRI* PRI );
	float GetPlayerDifficultyScore ( );
	float GetDurationMultiplier ( class AActor* Owner );
	float GetCooldownMultiplier ( class AActor* Owner );
};

// Class SFXGame.SFXShield_Base
// 0x00F9 (0x03F9 - 0x0300)
class ASFXShield_Base : public AInventory
{
public:
	struct FScaledFloat                                MaxShields;                                       		// 0x0300 (0x0028) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScaledFloat                                ShieldRegenDelay;                                 		// 0x0328 (0x0028) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __ShieldDestroyedPowerCallback__Delegate;         		// 0x0350 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     ShieldOffset;                                     		// 0x0360 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             PS_Impact;                                        		// 0x036C (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UParticleSystem*                             PS_Recharged;                                     		// 0x0374 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UParticleSystem*                             PS_Breach;                                        		// 0x037C (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UParticleSystem*                             PS_CriticalHit;                                   		// 0x0384 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UParticleSystem*                             PS_Explode;                                       		// 0x038C (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UPhysicalMaterial*                           PhysMat;                                          		// 0x0394 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEventPairObject*                       ShieldsDownSound;                                 		// 0x039C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   ShieldRechargeTime;                               		// 0x03A4 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   PenetrationDefault;                               		// 0x03AC (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   PenetrationVeryLight;                             		// 0x03B4 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   PenetrationLight;                                 		// 0x03BC (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   PenetrationMedium;                                		// 0x03C4 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   PenetrationHeavy;                                 		// 0x03CC (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                ShieldDisplayName;                                		// 0x03D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ShieldScale;                                      		// 0x03D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShieldRegenTimer;                                 		// 0x03DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentShields;                                   		// 0x03E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PartialBreakPct;                                  		// 0x03E4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              BoostedShieldMax;                                 		// 0x03E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShieldPointsPerBar;                               		// 0x03EC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              HardenedDamageMultiplier;                         		// 0x03F0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      bShowBarrierOnGUI : 1;                            		// 0x03F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRechargeable : 1;                                		// 0x03F4 (0x0004) [0x0000000000004001] [0x00000002] ( CPF_Edit | CPF_Config )
	unsigned long                                      bHardened : 1;                                    		// 0x03F4 (0x0004) [0x0000000000004001] [0x00000004] ( CPF_Edit | CPF_Config )
	unsigned long                                      bFastCoverRegen : 1;                              		// 0x03F4 (0x0004) [0x0000000000004001] [0x00000008] ( CPF_Edit | CPF_Config )
	unsigned long                                      bAbsorbDamageOnBreak : 1;                         		// 0x03F4 (0x0004) [0x0000000000004001] [0x00000010] ( CPF_Edit | CPF_Config )
	unsigned char                                      Resistance;                                       		// 0x03F8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ItemRemovedFromInvManager ( );
	void GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate );
	int GetShieldBars ( );
	float GetImpactScale ( class ASFXWeapon* Weapon, struct FVector HitLocation );
	void PlayShieldSound ( class ASFXWeapon* Weapon, struct FTraceHitInfo HitInfo, struct FVector HitLocation );
	void AdjustShieldImpactLocation ( struct FVector HitNormal, struct FVector* HitLocation );
	void ActivateWeaponImpact ( class ASFXWeapon* Weapon, class UParticleSystem* Template, class USkeletalMeshComponent* SMC, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation );
	void ActivatePSC ( class UParticleSystem* Template, float ImpactScale, struct FVector Offset );
	float GetDamageResistance ( class UClass* DamageType );
	void ApplyDamageToShields ( class UClass* DamageType, struct FVector Momentum, struct FVector HitLocation, struct FTraceHitInfo HitInfo, class AController* InstigatedBy, float* Damage );
	void ApplyDamage ( class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, float* Damage, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum );
	void Tick ( float DeltaSeconds );
	float GetShieldRechargeTime ( );
	float GetShieldRegenDelay ( );
	void ScaleShields ( );
	void ShieldDestroyedPowerCallback ( class AActor* ShieldActor, class ASFXShield_Base* Shield );
};

// Class SFXGame.SFXArmor_Base
// 0x0044 (0x0344 - 0x0300)
class ASFXArmor_Base : public AInventory
{
public:
	struct FName                                       ScalePlotId;                                      		// 0x0300 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   DamageResistance;                                 		// 0x0308 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   PenetrationDefault;                               		// 0x0310 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   PenetrationVeryLight;                             		// 0x0318 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   PenetrationLight;                                 		// 0x0320 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   PenetrationMedium;                                		// 0x0328 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   PenetrationHeavy;                                 		// 0x0330 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ArmorLevel;                                       		// 0x0338 (0x0004) [0x0000000000000000]              
	float                                              FortifiedThreshold;                               		// 0x033C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      bShowFortifyOnGUI : 1;                            		// 0x0340 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyDamage ( class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, float* Damage, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum );
	float GetDamageResistance ( class UClass* DamageType );
	float GetLevelRatio ( );
};

// Class SFXGame.SFXPlayerController
// 0x0003 (0x0B89 - 0x0B86)
class ASFXPlayerController : public ABioPlayerController
{
public:
	unsigned char                                      CurrentCustomAction;                              		// 0x0B88 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ServerBecomeActivePlayer ( );
	void MantleCover ( struct FCovPosInfo CovInfo );
	void ClimbCover ( struct FCovPosInfo CovInfo );
	bool TryClimbOrMantleCover ( );
	bool GetCurrentCustomAction ( class UBioCustomAction** pAction );
	void CustomActionEnded ( unsigned char PrevAction );
	void CustomActionStarted ( unsigned char NewAction );
	bool VerifyCAHasBeenInstanced ( unsigned char CAction );
	bool eventCanDoCustomAction ( unsigned char CAction );
	void EndCustomAction ( );
	void eventDoCustomAction ( unsigned char NewAction );
	bool NotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	void CheckNearMiss ( class APawn* Shooter, class AWeapon* W, struct FVector WeapLoc, struct FVector LineDir, struct FVector HitLocation );
};

// Class SFXGame.SFXBonusList
// 0x0368 (0x03C8 - 0x0060)
class USFXBonusList : public UObject
{
public:
	struct FName                                       RchAssaultRifleName;                              		// 0x0060 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchAutoPistolName;                                		// 0x0068 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchBioDmgUpgradeName;                             		// 0x0070 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchExploreScannerName;                            		// 0x0078 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchGruntUpgradeName;                              		// 0x0080 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchHWAmmoName;                                    		// 0x0088 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchHeavyPistolName;                               		// 0x0090 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchJackUpgradeName;                               		// 0x0098 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchLegionUpgradeName;                             		// 0x00A0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchMedigelName;                                   		// 0x00A8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchMiniGameDecryptName;                           		// 0x00B0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchMiniGameHackName;                              		// 0x00B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchMordinUpgradeName;                             		// 0x00C0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchQuarianShieldName;                             		// 0x00C8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchHealthUpgradeName;                             		// 0x00D0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchShieldUpgradeName;                             		// 0x00D8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchShipProbesName;                                		// 0x00E0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchShipFuelName;                                  		// 0x00E8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchShipScannerName;                               		// 0x00F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchShotgunName;                                   		// 0x00F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchSniperRifleName;                               		// 0x0100 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchTechDmgUpgradeName;                            		// 0x0108 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchARResistanceDamageName;                        		// 0x0110 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchAssaultRifleAccuracyName;                      		// 0x0118 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchAutoPistolResistanceDmgName;                   		// 0x0120 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchAutoPistolMaxAmmoName;                         		// 0x0128 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchBioticDurationName;                            		// 0x0130 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchBioticCooldownName;                            		// 0x0138 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchHPistolArmorDmgName;                           		// 0x0140 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchHPistolBonusShotName;                          		// 0x0148 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchMediGelHealName;                               		// 0x0150 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchMediGelShieldName;                             		// 0x0158 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchShepardMeleeResistanceName;                    		// 0x0160 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchMeleeUpgradeName;                              		// 0x0168 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchShieldRestoreName;                             		// 0x0170 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchShieldDamageName;                              		// 0x0178 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchShotgunResistanceDmgName;                      		// 0x0180 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchShotgunMagCountName;                           		// 0x0188 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchSniperArmorDmgName;                            		// 0x0190 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchSniperHeadShotDmgName;                         		// 0x0198 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchTechDurationName;                              		// 0x01A0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchTechCooldownName;                              		// 0x01A8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RchBovineFortitudeName;                           		// 0x01B0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchAssaultRifleID;                                		// 0x01B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchAssaultRifleBonus;                             		// 0x01BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchAssaultRifleCache;                             		// 0x01C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchAutoPistolID;                                  		// 0x01C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchAutoPistolBonus;                               		// 0x01C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchAutoPistolCache;                               		// 0x01CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchBioDmgUpgradeID;                               		// 0x01D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchBioDmgUpgradeBonus;                            		// 0x01D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchBioDmgUpgradeCache;                            		// 0x01D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchExploreScannerID;                              		// 0x01DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchExploreScannerBonus;                           		// 0x01E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchExploreScannerCache;                           		// 0x01E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchGruntUpgradeID;                                		// 0x01E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchGruntUpgradeBonus;                             		// 0x01EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchGruntUpgradeCache;                             		// 0x01F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchHWAmmoID;                                      		// 0x01F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchHWAmmoBonus;                                   		// 0x01F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchHWAmmoCache;                                   		// 0x01FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchHeavyPistolID;                                 		// 0x0200 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchHeavyPistolBonus;                              		// 0x0204 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchHeavyPistolCache;                              		// 0x0208 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchJackUpgradeID;                                 		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchJackUpgradeBonus;                              		// 0x0210 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchJackUpgradeCache;                              		// 0x0214 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchLegionUpgradeID;                               		// 0x0218 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchLegionUpgradeBonus;                            		// 0x021C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchLegionUpgradeCache;                            		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchMedigelID;                                     		// 0x0224 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchMedigelCache;                                  		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchMiniGameDecryptID;                             		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchMiniGameDecryptBonus;                          		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchMiniGameDecryptCache;                          		// 0x0234 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchMiniGameHackID;                                		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchMiniGameHackBonus;                             		// 0x023C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchMiniGameHackCache;                             		// 0x0240 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchMordinUpgradeID;                               		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchMordinUpgradeBonus;                            		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchMordinUpgradeCache;                            		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchQuarianShieldID;                               		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchQuarianShieldBonus;                            		// 0x0254 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchQuarianShieldCache;                            		// 0x0258 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchHealthUpgradeID;                               		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchHealthUpgradeBonus;                            		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchHealthUpgradeCache;                            		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchShieldUpgradeID;                               		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShieldUpgradeBonus;                            		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShieldUpgradeCache;                            		// 0x0270 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchShipProbesID;                                  		// 0x0274 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShipProbesBonus;                               		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShipProbesCache;                               		// 0x027C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchShipFuelID;                                    		// 0x0280 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShipFuelBonus;                                 		// 0x0284 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShipFuelCache;                                 		// 0x0288 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchShipScannerID;                                 		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShipScannerBonus;                              		// 0x0290 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShipScannerCache;                              		// 0x0294 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchShotgunID;                                     		// 0x0298 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShotgunBonus;                                  		// 0x029C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShotgunCache;                                  		// 0x02A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchSniperRifleID;                                 		// 0x02A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchSniperRifleBonus;                              		// 0x02A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchSniperRifleCache;                              		// 0x02AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchTechDmgUpgradeID;                              		// 0x02B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchTechDmgUpgradeBonus;                           		// 0x02B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchTechDmgUpgradeCache;                           		// 0x02B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchARResistanceDamageID;                          		// 0x02BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchARResistanceDamageBonus;                       		// 0x02C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchARResistanceDamageCache;                       		// 0x02C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchAssaultRifleAccuracyID;                        		// 0x02C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchAssaultRifleAccuracyBonus;                     		// 0x02CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchAssaultRifleAccuracyCache;                     		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchAutoPistolResistanceDmgID;                     		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchAutoPistolResistanceDmgBonus;                  		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchAutoPistolResistanceDmgCache;                  		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchAutoPistolMaxAmmoID;                           		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchAutoPistolMaxAmmoBonus;                        		// 0x02E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchAutoPistolMaxAmmoCache;                        		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchBioticDurationID;                              		// 0x02EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchBioticDurationBonus;                           		// 0x02F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchBioticDurationCache;                           		// 0x02F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchBioticCooldownID;                              		// 0x02F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchBioticCooldownBonus;                           		// 0x02FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchBioticCooldownCache;                           		// 0x0300 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchHPistolArmorDmgID;                             		// 0x0304 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchHPistolArmorDmgBonus;                          		// 0x0308 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchHPistolArmorDmgCache;                          		// 0x030C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchHPistolBonusShotID;                            		// 0x0310 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchHPistolBonusShotBonus;                         		// 0x0314 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchHPistolBonusShotCache;                         		// 0x0318 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchHPistolBonusShotChance;                        		// 0x031C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchMediGelHealID;                                 		// 0x0320 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchMediGelHealCache;                              		// 0x0324 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchMediGelShieldID;                               		// 0x0328 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchMediGelShieldCache;                            		// 0x032C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchShepardMeleeResistanceID;                      		// 0x0330 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShepardMeleeResistanceBonus;                   		// 0x0334 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShepardMeleeResistanceCache;                   		// 0x0338 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchMeleeUpgradeID;                                		// 0x033C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchMeleeUpgradeBonus;                             		// 0x0340 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchMeleeUpgradeCache;                             		// 0x0344 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchMeleePhysLevelBonus;                           		// 0x0348 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchMeleePhysLevelCache;                           		// 0x034C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchShieldRestoreID;                               		// 0x0350 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShieldRestoreBonus;                            		// 0x0354 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShieldRestoreCache;                            		// 0x0358 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShieldRestoreChance;                           		// 0x035C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchShieldDamageID;                                		// 0x0360 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShieldDamageBonus;                             		// 0x0364 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShieldDamageCache;                             		// 0x0368 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchShotgunResistanceDmgID;                        		// 0x036C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShotgunResistanceDmgBonus;                     		// 0x0370 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShotgunResistanceDmgCache;                     		// 0x0374 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchShotgunMagCountID;                             		// 0x0378 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShotgunMagCountBonus;                          		// 0x037C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchShotgunMagCountCache;                          		// 0x0380 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchSniperArmorDmgID;                              		// 0x0384 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchSniperArmorDmgBonus;                           		// 0x0388 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchSniperArmorDmgCache;                           		// 0x038C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchSniperHeadShotDmgID;                           		// 0x0390 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchSniperHeadShotDmgBonus;                        		// 0x0394 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchSniperHeadShotDmgCache;                        		// 0x0398 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchTechDurationID;                                		// 0x039C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchTechDurationBonus;                             		// 0x03A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchTechDurationCache;                             		// 0x03A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchTechCooldownID;                                		// 0x03A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchTechCooldownBonus;                             		// 0x03AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchTechCooldownCache;                             		// 0x03B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RchBovineFortitudeID;                             		// 0x03B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchBovineFortitudeBonus;                          		// 0x03B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchBovineFortitudeCache;                          		// 0x03BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RchBovineFortitudeChance;                         		// 0x03C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      ExportIDsCached : 1;                              		// 0x03C4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void TecBovineFortitude ( class UBioGlobalVariableTable* gv );
	void TecTechR2 ( class UBioGlobalVariableTable* gv );
	void TecTechR1 ( class UBioGlobalVariableTable* gv );
	void TecSniperRifleR2 ( class UBioGlobalVariableTable* gv );
	void TecSniperRifleR1 ( class UBioGlobalVariableTable* gv );
	void TecShotgunR2 ( class UBioGlobalVariableTable* gv, class ABioPawn* Player );
	void TecShotgunR1 ( class UBioGlobalVariableTable* gv );
	void TecShieldR2 ( class UBioGlobalVariableTable* gv );
	void TecShieldR1 ( class UBioGlobalVariableTable* gv );
	void TecShepardR2 ( class UBioGlobalVariableTable* gv, struct TArray<class ABioPawn*> Squad );
	void TecShepardR1 ( class UBioGlobalVariableTable* gv );
	void TecMediGelR2 ( class UBioGlobalVariableTable* gv );
	void TecMediGelR1 ( class UBioGlobalVariableTable* gv );
	void TecHeavyPistolR2 ( class UBioGlobalVariableTable* gv );
	void TecHeavyPistolR1 ( class UBioGlobalVariableTable* gv );
	void TecBioticR2 ( class UBioGlobalVariableTable* gv );
	void TecBioticR1 ( class UBioGlobalVariableTable* gv );
	void TecAutoPistolR2 ( class UBioGlobalVariableTable* gv, class ABioPawn* Player );
	void TecAutoPistolR1 ( class UBioGlobalVariableTable* gv );
	void TecAssaultRifleR2 ( class UBioGlobalVariableTable* gv, struct TArray<class ABioPawn*> Squad );
	void TecAssaultRifleR1 ( class UBioGlobalVariableTable* gv );
	void TecTechUpgrade ( class UBioGlobalVariableTable* gv );
	void TecSniperRifle ( class UBioGlobalVariableTable* gv, struct TArray<class ABioPawn*> Squad );
	void TecShotgun ( class UBioGlobalVariableTable* gv, struct TArray<class ABioPawn*> Squad );
	void TecShipScanner ( class UBioGlobalVariableTable* gv );
	void TecShipFuel ( class UBioGlobalVariableTable* gv );
	void TecShipProbes ( class UBioGlobalVariableTable* gv );
	void TecShield ( class UBioGlobalVariableTable* gv, struct TArray<class ABioPawn*> Squad );
	void TecShepardHealth ( class UBioGlobalVariableTable* gv, class ABioPawn* Player );
	void TecQuarianShield ( class UBioGlobalVariableTable* gv, struct TArray<class ABioPawn*> Squad );
	void TecMordinUpgrade ( class UBioGlobalVariableTable* gv );
	void TecMiniGameHack ( class UBioGlobalVariableTable* gv );
	void TecMiniGameDecrypt ( class UBioGlobalVariableTable* gv );
	void TecMedigelUpgrade ( class UBioGlobalVariableTable* gv );
	void TecLegionUpgrade ( class UBioGlobalVariableTable* gv, struct TArray<class ABioPawn*> Squad );
	void TecJackUpgrade ( class UBioGlobalVariableTable* gv );
	void TecHeavyPistol ( class UBioGlobalVariableTable* gv, struct TArray<class ABioPawn*> Squad );
	void TecHeavyAmmo ( class UBioGlobalVariableTable* gv, class ABioPawn* Player );
	void TecGruntUpgrade ( class UBioGlobalVariableTable* gv, struct TArray<class ABioPawn*> Squad );
	void TecExploreScanner ( class UBioGlobalVariableTable* gv );
	void TecBioticUpgrade ( class UBioGlobalVariableTable* gv );
	void TecAutoPistol ( class UBioGlobalVariableTable* gv, struct TArray<class ABioPawn*> Squad );
	void TecAssaultRifle ( class UBioGlobalVariableTable* gv, struct TArray<class ABioPawn*> Squad );
	void ScaleSquadShields ( struct TArray<class ABioPawn*> Squad );
	void ScaleSquadWeapons ( class UClass* WeaponClass, struct TArray<class ABioPawn*> Squad );
	void GetPlayerSquad ( class ABioWorldInfo* WorldInfo, struct TArray<class ABioPawn*>* Squad, class ABioPawn** Player );
	void AwardTechBonus ( struct FName nmTech, class ABioWorldInfo* WorldInfo );
	void UpdateCache ( class ABioWorldInfo* WorldInfo );
	void DoPatchDefaultPropertyUpdates ( );
	void CacheExportIDs ( class ABioWorldInfo* WorldInfo );
};

// Class SFXGame.SFXPlayerCamera
// 0x0088 (0x0630 - 0x05A8)
class ASFXPlayerCamera : public ASFXCameraNativeBase
{
public:
	struct FInterpCurveFloat                           StandardCurve;                                    		// 0x05A8 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpCurveFloat                           SlowRampUpCurve;                                  		// 0x05BC (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpCurveFloat                           TaperOverTimeCurve;                               		// 0x05D0 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpCurveFloat                           LongEaseInCurve;                                  		// 0x05E4 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FRotator                                    KickBackModifier;                                 		// 0x05F8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USFXCameraTransition_FaceTarget*             FaceTargetTransition;                             		// 0x0604 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class USFXCameraMode*                              FreeCam;                                          		// 0x060C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXCameraModifier_ScreenShake*              ScreenShakeModifier;                              		// 0x0614 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              DefaultTransitionTime;                            		// 0x061C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TransitionTimeout;                                		// 0x0620 (0x0004) [0x0000000000000000]              
	float                                              LastTransitionTime;                               		// 0x0624 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastAspectRatio;                               		// 0x0628 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bCurrentTransitionIsModal : 1;                    		// 0x062C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDebugging : 1;                                   		// 0x062C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bLastConstrainAspect : 1;                       		// 0x062C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetBaseRotation ( struct FRotator NewRotation );
	struct FRotator GetBaseRotation ( );
	void SwitchTo ( class USFXCameraMode* NewMode );
	void SetBehavior ( class USFXCameraMode* Mode, class USFXCameraMode_Interpolate* NewTransition, float Time, unsigned long PreserveTarget );
	void UpdateCameraManager ( float fDeltaTime, float* fAspectRatio, struct FTPOV* POV );
	void PickCameraMode ( float DeltaTime );
	void PlayCameraTransition ( class USFXCameraMode_Interpolate* Transition, float Time );
	void RotateToFace ( struct FVector AimPoint, float Time );
	void UpdateViewTarget ( float DeltaTime, struct FTViewTarget* OutVT );
	class UCameraModifier* CreateCameraModifier ( class UClass* ModifierClass );
	void AddScreenShake ( struct FScreenShakeStruct Shake );
	void PostBeginPlay ( );
};

// Class SFXGame.SFXAI_Henchman
// 0x0069 (0x07F8 - 0x078F)
class ASFXAI_Henchman : public ASFXAI_Core
{
public:
	struct TArray<struct FHenchmanOrder>               m_Orders;                                         		// 0x0790 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     m_vHoldLocation;                                  		// 0x07A0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class ASFXAI_Henchman*                             m_OtherHenchman;                                  		// 0x07AC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_ActorToDefend;                                  		// 0x07B4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UGoal_AtCover*                               AtCover_NearDefendGoal;                           		// 0x07BC (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              TetherDistance;                                   		// 0x07C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TetherDistanceWhileExecutingOrder;                		// 0x07C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TetherDistanceForFollowOrder;                     		// 0x07CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DistanceToStartCombatWhileFollowing;              		// 0x07D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AttackDelayAfterBeingShot;                        		// 0x07D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamagePercentToRemainInCover;                     		// 0x07D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fHeadshotProbability;                           		// 0x07DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fDistanceFromActorToDefend;                     		// 0x07E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinDistanceFromTargetForCrouch;                   		// 0x07E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCoverEvaluationCount;                          		// 0x07E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nBackingAwayCount;                              		// 0x07EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxBackAwayDistance;                              		// 0x07F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bFollowPlayer : 1;                              		// 0x07F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bHoldingPosition : 1;                           		// 0x07F4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bResetHenchman : 1;                             		// 0x07F4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bDelayPowerUse : 1;                             		// 0x07F4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bTooFarToAttack : 1;                            		// 0x07F4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bMeleeAttacker : 1;                             		// 0x07F4 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bEnemiesPerceived : 1;                          		// 0x07F4 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bCheckPlayerReachability : 1;                   		// 0x07F4 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bOriginalStartRootMotion : 1;                   		// 0x07F4 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bOriginalStopRootMotion : 1;                    		// 0x07F4 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bAllowInstantPowerWhileVisible : 1;             		// 0x07F4 (0x0004) [0x0000000000004000] [0x00000400] ( CPF_Config )
	unsigned long                                      m_bBackingAwayFromTarget : 1;                     		// 0x07F4 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void CheckThreatRadius ( );
	bool IsWithinThreatRadius ( );
	void NotifyKnockedOutOfCover ( );
	bool CanInstantlyUsePowers ( );
	void InstantUsePower ( );
	void OnCombatStart ( );
	bool IsPlayerReachable ( );
	bool ShouldWaitForPlayer ( );
	void AdjustEnemyRating ( class APawn* EnemyPawn, float* fRating );
	void AdjustRatingByTickets ( int EnemyIdx, float* out_Rating );
	void CheckInCombat ( );
	void NotifyNewEnemy ( class APawn* NewEnemy );
	void ApplyOrderBonus ( );
	void ModifyBurstDelay ( class ASFXWeapon* Weapon, float* BurstDelay );
	void OnTargetChanged ( );
	void CheckMeleeAttacker ( );
	void CheckLineOfFireClear ( );
	void CheckPlayerLineOfFire ( );
	bool IsInPlayerLineOfFire ( int* nPlayerIsFiring );
	void StopDefendingActor ( );
	bool StartDefendingActor ( class AActor* ActorToDefend, float fMaxDistanceFromActor );
	bool StartFollowingActor ( class AActor* ActorToFollow );
	struct FVector GetAimLocation ( int EnemyIdx, struct FVector StartLoc );
	void NotifyPowerDelayFinished ( );
	void NotifySharedCooldownFinished ( );
	bool ArePowersCoolingDown ( );
	void NotifyHenchmenLoaded ( );
	void eventOnEnteringStasis ( );
	bool ShouldAttack ( );
	bool CanUsePowers ( unsigned long bCheckProfileOption );
	bool ChooseDefensivePower ( struct FName* nmPower );
	bool ChooseAttackPowerHelper ( class AActor* oTarget, unsigned long bPlayerRequest, struct FName* nmPower, int* nRequiresAttackTicket, struct FVector* AttackOrigin );
	bool ChooseAttackPower ( class AActor* oTarget, struct FName* nmPower, int* nRequiresAttackTicket, struct FVector* AttackOrigin );
	bool RespondToBump ( class AActor* Other, struct FVector HitNormal );
	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	bool WantsToRun ( float fDistance );
	void SetSquadIntoCombat ( );
	bool IsInCombat ( unsigned long bForceCheck );
	bool IsInMoveTo ( );
	bool ShouldFollowPlayer ( );
	bool TeleportToActor ( class AActor* oActor, unsigned long bForceTeleport );
	void NotifyUnderAttack ( unsigned long bHit );
	void ResetFarAwayFlag ( );
	bool NotifyCoverClaimViolation ( class AController* NewClaim, class ACoverLink* Link, int SlotIdx );
	bool HenchmanMoveToCover ( );
	void eventBioClearCrossLevelReferences ( class ULevel* oLevel );
	void NotifyChangedWeapon ( class AWeapon* PreviousWeapon, class AWeapon* NewWeapon );
	void TriggerAttackVocalization ( );
	void OutOfWorld ( );
	struct FHenchmanOrder GetNextOrder ( unsigned char eOrder );
	void ExecuteOrders ( );
	void RemoveOldSwitchWeaponOrders ( );
	bool CanStartImmediateOrder ( );
	bool CanQueueOrder ( );
	bool CancelOrder ( unsigned char eOrder, struct FName nmPower );
	int GetInstantOrderCount ( );
	bool AddOrder ( unsigned char eOrder, class AActor* oTargetActor, struct FVector vTargetLocation, struct FName nmPower, class ASFXWeapon* oWeapon, int nQueue );
};

// Class SFXGame.BioHintSystem
// 0x0065 (0x01C5 - 0x0160)
class UBioHintSystem : public UBioHintSystemBase
{
public:
	struct FName                                       m_nmCurrentWeapon;                                		// 0x0160 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmLastUsedPower;                                		// 0x0168 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmMappedPower;                                  		// 0x0170 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmLeftMappedPower;                              		// 0x0178 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmRightMappedPower;                             		// 0x0180 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmClassMappedPower;                             		// 0x0188 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmNearestEnemy;                                 		// 0x0190 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmTutorialSelectHint;                           		// 0x0198 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmTutorialHighlightHint;                        		// 0x01A0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fAmmoPercent;                                   		// 0x01A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fHealthPercent;                                 		// 0x01AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fNearestEnemyDistance;                          		// 0x01B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMedigel;                                       		// 0x01B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMostUnspentTalentPoints;                       		// 0x01B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRealTimeSeconds;                               		// 0x01BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bInCombat : 1;                                  		// 0x01C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bUsingHeavyWeapon : 1;                          		// 0x01C0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bUsingSniperRifle : 1;                          		// 0x01C0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bUsingShotgun : 1;                              		// 0x01C0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bUsingAmmoPower : 1;                            		// 0x01C0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bHasAnyAmmoPowers : 1;                          		// 0x01C0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bAnyHenchmenDead : 1;                           		// 0x01C0 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bUsingGamepad : 1;                              		// 0x01C0 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bPowerWheelTutorialEnabled : 1;                 		// 0x01C0 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bWeaponWheelTutorialEnabled : 1;                		// 0x01C0 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bShowingSelectHint : 1;                         		// 0x01C0 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned char                                      m_ePowerTutorialType;                             		// 0x01C4 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void AddNotificationOneParameter ( struct FSFXNotificationData oNoteData, int nParam1 );
	void eventJournalUpdate ( int srTitle, int srDescription );
	void eventCodexUpdate ( int srTitle, int srDescription );
	void AddNotification_HeavyAmmoFull ( );
	void AddNotification_MediGelFull ( );
	void AddNotification_SalvageRecovery ( int Amount );
	void AddNotification_ProbeRecovery ( int Amount );
	void AddNotification_LevelUp ( int Level );
	void AddNotification_XP ( int Amount );
	void AddNotification_TechUnlocked ( struct FString sTitle, struct FString sName, struct FString sMessage, class UTexture* oImage );
	void AddNotification_Tech ( struct FString sTitle, struct FString sName, struct FString sMessage, class UTexture* oImage );
	void AddNotification_Weapon ( struct FString sTitle, struct FString sName, struct FString sMessage, class UTexture* oImage );
	void AddNotification_ResearchRecovered ( struct FString sName, struct FString sMessage, class UTexture* oImage );
	bool PowerCast ( struct FName* nmContext );
	void UpdateWeaponWheelTutorialHint ( int nWeaponType );
	void UpdatePowerWheelTutorialHint ( struct FName nmPower );
	void GeneratePowerWheelTutorialHint ( unsigned long bPowerWheel, unsigned long bWeaponWheel );
	bool FindHintDefinition ( struct FName nmHint, struct FHintDefinition* oHint );
	void EnableWeaponTutorialHint ( unsigned long bOn );
	void EnablePowerTutorialHint ( unsigned long bOn, unsigned char eTutType );
	bool UseAmmoPowerHint ( );
	bool FindLandingSite ( );
	bool LaunchProbeHint ( );
	bool PlanetScanHint ( );
	bool CooldownHint ( );
	bool LevelUpHint ( );
	bool HackGameHint ( );
	bool BypassGameHint ( );
	bool ResurrectHint ( );
	bool MeleeHint ( );
	bool ClassMappedPowerHint ( );
	bool RightMappedPowerHint ( );
	bool LeftMappedPowerHint ( );
	bool PCMappedPowerHint ( );
	bool ZoomHint ( );
	bool TakeCoverHint ( );
	bool ManualReloadHint ( );
	void eventCacheCurrentState ( );
};

// Class SFXGame.BioConditionals
// 0x0000 (0x0060 - 0x0060)
class UBioConditionals : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioConvNodeTrackDebugInst
// 0x0000 (0x0064 - 0x0064)
class UBioConvNodeTrackDebugInst : public USFXGameInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomActionTypes
// 0x0000 (0x0060 - 0x0060)
class USFXCustomActionTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXArmor_Light
// 0x0000 (0x0344 - 0x0344)
class ASFXArmor_Light : public ASFXArmor_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXPower_PassivePower
// 0x0010 (0x01BC - 0x01AC)
class USFXPower_PassivePower : public USFXPower
{
public:
	struct TArray<float>                               CharmIntimidateModifier;                          		// 0x01AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetNegotiationBonus ( );
	void ModifyIntimidateSkill ( int nRankToUse, float* fIntimidateSkill );
	void ModifyCharmSkill ( int nRankToUse, float* fCharmSkill );
};

// Class SFXGame.SFXPowerLevelUpHelper
// 0x0034 (0x0094 - 0x0060)
class USFXPowerLevelUpHelper : public UObject
{
public:
	struct TArray<class USFXPower*>                    m_powers;                                         		// 0x0060 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FNewPowerInfo>                m_UpdatedPowers;                                  		// 0x0070 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ABioWorldInfo*                               m_WorldInfo;                                      		// 0x0080 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    m_Pawn;                                           		// 0x0088 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPointsSpent;                                   		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool CanMakePurchase ( );
	int GetNextWheelDisplayIndex ( );
	float GetCurrentRankByPower ( class USFXPower* Power );
	float GetCurrentRank ( int nPowerIndex );
	void CancelEvolution ( class USFXPower* OriginalPower );
	void EvolvePower ( class USFXPower* OriginalPower, class UClass* EvolvedPowerClass );
	void CancelChanges ( );
	void ApplyChanges ( );
	bool CanEvolvePower ( int nPowerIndex );
	bool IsUnlocked ( int nPowerIndex );
	int GetAvailableRank ( int nPowerIndex );
	int GetRemainingPoints ( );
	bool CanIncreaseRank ( int nPowerIndex, int* nCostToIncrease );
	bool IncreaseRank ( int nPowerIndex );
	void AutoLevelUp ( );
	bool SetPawn ( class ABioPawn* Pawn );
	bool Initialize ( class ABioWorldInfo* WorldInfo );
};

// Class SFXGame.SFXWeapon_SniperRifle_Base
// 0x0003 (0x0974 - 0x0971)
class ASFXWeapon_SniperRifle_Base : public ASFXWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ModifyDamage ( struct FVector HitLocation, class AActor* HitActor, float* BaseDamage );
};

// Class SFXGame.BioSeqEvt_PawnPhysicsChange
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_PawnPhysicsChange : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_Pawn_WaypointReached
// 0x000A (0x0130 - 0x0126)
class UBioSeqEvt_Pawn_WaypointReached : public USequenceEvent
{
public:
	class ABioPathPoint*                               m_oPathPointTrigger;                              		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXPhysicalMaterialProperty
// 0x0028 (0x0088 - 0x0060)
class USFXPhysicalMaterialProperty : public UPhysicalMaterialPropertyBase
{
public:
	class USFXPhysicalMaterialDecals*                  PhysicalMaterialDecals;                           		// 0x0060 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class USFXPhysicalMaterialImpactEffects*           PhysicalMaterialImpactEffects;                    		// 0x0068 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class USFXPhysicalMaterialImpactSounds*            PhysicalMaterialImpactSounds;                     		// 0x0070 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class USFXPhysicalMaterialFootSteps*               PhysicalMaterialFootSteps;                        		// 0x0078 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class USFXPhysicalMaterialPhysics*                 PhysicalMaterialPhysics;                          		// 0x0080 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXPhysicalMaterialBase
// 0x0000 (0x0060 - 0x0060)
class USFXPhysicalMaterialBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXPhysicalMaterialFootSteps
// 0x00B8 (0x0118 - 0x0060)
class USFXPhysicalMaterialFootSteps : public USFXPhysicalMaterialBase
{
public:
	class UWwiseEvent*                                 HHWalkingSound;                                   		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HHRunningSound;                                   		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 WalkingSound;                                     		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 RunningSound;                                     		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HLWalkingSound;                                   		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HLRunningSound;                                   		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 RHWalkingSound;                                   		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 RHRunningSound;                                   		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 RMWalkingSound;                                   		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 RMRunningSound;                                   		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 RLWalkingSound;                                   		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 RLRunningSound;                                   		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HuskWalkingSound;                                 		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HuskRunningSound;                                 		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 CollectorWalkingSound;                            		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 CollectorRunningSound;                            		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 OtherWalkingSound;                                		// 0x00E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 OtherRunningSound;                                		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 Landing;                                          		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 Leaping;                                          		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             FootstepWalk;                                     		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             FootstepRun;                                      		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 TireSound;                                        		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_DeathEffect
// 0x0017 (0x00A8 - 0x0091)
class USFXGameEffect_DeathEffect : public USFXGameEffect
{
public:
	class UBioVFXTemplate*                             DeathEffect;                                      		// 0x0094 (0x0008) [0x0000000000000000]              
	class UWwiseEvent*                                 DeathSoundEffect;                                 		// 0x009C (0x0008) [0x0000000000000000]              
	int                                                Priority;                                         		// 0x00A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXPawn_PlayerEngineer
// 0x0001 (0x0DB8 - 0x0DB7)
class ASFXPawn_PlayerEngineer : public ASFXPawn_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXPawn_PlayerAdept
// 0x0001 (0x0DB8 - 0x0DB7)
class ASFXPawn_PlayerAdept : public ASFXPawn_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXPawn_PlayerInfiltrator
// 0x0001 (0x0DB8 - 0x0DB7)
class ASFXPawn_PlayerInfiltrator : public ASFXPawn_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXPawn_PlayerSentinel
// 0x0001 (0x0DB8 - 0x0DB7)
class ASFXPawn_PlayerSentinel : public ASFXPawn_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXPawn_PlayerVanguard
// 0x0001 (0x0DB8 - 0x0DB7)
class ASFXPawn_PlayerVanguard : public ASFXPawn_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXArmor_Heavy
// 0x0000 (0x0344 - 0x0344)
class ASFXArmor_Heavy : public ASFXArmor_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_Regeneration
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_Regeneration : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnUpdate ( float DeltaSeconds );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXAI_None
// 0x0001 (0x0790 - 0x078F)
class ASFXAI_None : public ASFXAI_Core
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SwitchWeapon ( class ASFXWeapon* oWpn );
	void MoveToGoalExternal ( class AActor* NewMoveGoal, float NewMoveOffset, struct FScriptDelegate MoveDelegate );
	void FireWeaponAtTarget ( class AActor* oTarget, unsigned long bCheckLOS, struct FScriptDelegate FireDelegate );
	void UsePowerOnTarget ( struct FName nmPowerToUse, class AActor* oTarget, struct FScriptDelegate PowerDelegate, unsigned long bIgnoreSuppression );
	void SetTarget ( class AActor* oTarget );
};

// Class SFXGame.BioSeqEvt_PowerCooldownFinished
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_PowerCooldownFinished : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_PowerEffectDurationComplete
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_PowerEffectDurationComplete : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqEvt_CastPower
// 0x0002 (0x0128 - 0x0126)
class USFXSeqEvt_CastPower : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqEvt_OrderedPower
// 0x0002 (0x0128 - 0x0126)
class USFXSeqEvt_OrderedPower : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_NotifyLimbDetached
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_NotifyLimbDetached : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_OrbitalGame
// 0x014C (0x0258 - 0x010C)
class UBioSeqAct_OrbitalGame : public USeqAct_Latent
{
public:
	struct TArray<class UWwiseBaseSoundObject*>        MineralStartEvents;                               		// 0x010C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UWwiseBaseSoundObject*>        MineralStopEvents;                                		// 0x011C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FString>                      MineralRTPCNames;                                 		// 0x012C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     LandingSiteIndicator_RTPCName;                    		// 0x013C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UWwiseBaseSoundObject*>        AnomalyDetectedVO;                                		// 0x014C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UWwiseBaseSoundObject*>        ProbeLaunchedVO;                                  		// 0x015C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FRotator                                    ReticleRotStart;                                  		// 0x016C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ReticleRotMaxClamp;                               		// 0x0178 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ReticleRotMinClamp;                               		// 0x0184 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AInterpActor*                                Planet;                                           		// 0x0190 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AInterpActor*                                Clouds;                                           		// 0x0198 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AInterpActor*                                Probe;                                            		// 0x01A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AInterpActor*                                Ring;                                             		// 0x01A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AInterpActor*                                ScanSphere;                                       		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AEmitter*                                    ProbeTrail;                                       		// 0x01B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             LandingSiteMarker;                                		// 0x01C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             Reticle;                                          		// 0x01C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ScanReticle;                                      		// 0x01D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             LaunchReticle;                                    		// 0x01D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ScanWipe;                                         		// 0x01E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ScanDirection;                                    		// 0x01E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ScanBlip;                                         		// 0x01F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ProbeImpact;                                      		// 0x01F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ProbeLocationMarker;                              		// 0x0200 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       ProbeImpactSound;                                 		// 0x0208 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       MineralRecoverySound_None;                        		// 0x0210 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       MineralRecoverySound_Small;                       		// 0x0218 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       MineralRecoverySound_Medium;                      		// 0x0220 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       MineralRecoverySound_Large;                       		// 0x0228 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       ProbeLaunchSound_NoProbes;                        		// 0x0230 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       LandingSiteIndicator;                             		// 0x0238 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       AnomalyStaticStart;                               		// 0x0240 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseBaseSoundObject*                       AnomalyStaticStop;                                		// 0x0248 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioPlanet*                                  CurrentPlanet;                                    		// 0x0250 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UBioCameraBehaviorGalaxy* GetGalaxyCamera ( );
	void SignalProbeImpact ( );
	void SignalProbeLaunch ( );
	void EndAction ( );
	bool eventUpdate ( float DeltaTime );
	void eventActivated ( );
};

// Class SFXGame.BioCustomAction_CoverClimbMantleBase
// 0x006C (0x00FD - 0x0091)
class UBioCustomAction_CoverClimbMantleBase : public UBioCustomAction
{
public:
	struct FCovPosInfo                                 m_CurrentCoverInfo;                               		// 0x0094 (0x0038) [0x0000000000002000]              ( CPF_Transient )
	struct FBodyStance                                 m_BS_StanceFromExplore;                           		// 0x00CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FBodyStance                                 m_BS_StanceFromCombat;                            		// 0x00D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FBodyStance                                 m_BS_StanceFromCover;                             		// 0x00E4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCollisionOffPerioud;                           		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              m_fCollisionOffTime;                              		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bCoverCacheValid : 1;                           		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      m_CurrentBodyStance;                              		// 0x00FC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void CacheCoverInfo ( struct FCovPosInfo CoverInfo );
	void EndPlayBodyStance ( unsigned char StanceID );
	void StopPlayBodyStance ( unsigned char StanceID );
	bool StartPlayBodyStance ( unsigned char StanceID );
	bool GetBodyStance ( unsigned char StanceID, struct FBodyStance* out_BodyStance );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void eventTickCustomAction ( float fDeltaTime );
	void StopCustomAction ( );
	void StartCustomAction ( );
};

// Class SFXGame.BioCustomAction_CoverMantle
// 0x001F (0x011C - 0x00FD)
class UBioCustomAction_CoverMantle : public UBioCustomAction_CoverClimbMantleBase
{
public:
	struct TArray<class AActor*>                       aBumpList;                                        		// 0x0100 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     vStartLocation;                                   		// 0x0110 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool NotifyBump ( class AActor* Other, struct FVector HitNormal );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void StartCustomAction ( );
};

// Class SFXGame.BioCustomAction_CoverClimb
// 0x0003 (0x0100 - 0x00FD)
class UBioCustomAction_CoverClimb : public UBioCustomAction_CoverClimbMantleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void StartCustomAction ( );
};

// Class SFXGame.SFXCustomAction_DamageReaction
// 0x004C (0x00DD - 0x0091)
class USFXCustomAction_DamageReaction : public UBioCustomAction
{
public:
	struct FBodyStance                                 BS_Reaction;                                      		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FBodyStance                                 BS_ReactionExplore;                               		// 0x00A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             PS_Impact;                                        		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AController*                                 Instigator;                                       		// 0x00B4 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              fAnimPlayRate;                                    		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimBlendInTime;                                 		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimBlendOutTime;                                		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAnimStartTime;                                   		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fReactionDuration;                                		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationTime;                                     		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactScale;                                      		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAnimLooping : 1;                                 		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAllowAnimInterrupt : 1;                          		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRagdollOnFinish : 1;                             		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRotateOnHit : 1;                                 		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      ERootMotionMode;                                  		// 0x00DC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FTraceHitInfo HitInfo );
	void EndThisCustomAction ( );
	void CheckForRagdollRecovery ( );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void OnCustomActionTimeUp ( );
	void StartCustomAction ( );
	void Init ( struct FVector HitLocation, struct FVector HitNormal, struct FTraceHitInfo HitInfo, unsigned long bPlayImpact, class AController* Inst );
};

// Class SFXGame.SFXSeqAct_ResetCanonPlots
// 0x0000 (0x00F8 - 0x00F8)
class USFXSeqAct_ResetCanonPlots : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.SFXSeqAct_LegacyDataCallback
// 0x0000 (0x0110 - 0x0110)
class USFXSeqAct_LegacyDataCallback : public UBioSequenceLatentAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void CopyComicPlotStates ( class UBioGlobalVariableTable* OriginalVarTable, class UBioGlobalVariableTable* NewVarTable );
	void ApplyME2PlotStates ( );
	void ApplyME1PlotStates ( class UBioGlobalVariableTable* ImportVarTable );
	void ResetCanonPlotStates ( );
	void ApplyCanonPlotStates ( );
	bool eventUpdateOp ( float DeltaTime );
	void eventActivated ( );
};

// Class SFXGame.BioCustomAction_CombatActivate
// 0x000F (0x00A0 - 0x0091)
class UBioCustomAction_CombatActivate : public UBioCustomAction
{
public:
	struct FBodyStance                                 BS_CombatActivate;                                		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void ContinueCustomAction ( );
	void PauseCustomAction ( );
	void StartCustomAction ( );
};

// Class SFXGame.BioCustomAction_DeathCrawl
// 0x000F (0x00A0 - 0x0091)
class UBioCustomAction_DeathCrawl : public UBioCustomAction
{
public:
	struct FBodyStance                                 BS_DeathCrawl;                                    		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void StartCustomAction ( );
};

// Class SFXGame.BioCustomAction_PraetorianTeleport
// 0x000F (0x00A0 - 0x0091)
class UBioCustomAction_PraetorianTeleport : public UBioCustomAction
{
public:
	struct FBodyStance                                 BS_TeleportAction;                                		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void StartCustomAction ( );
};

// Class SFXGame.BioCustomAction_PraetorianTeleportEnd
// 0x0000 (0x00A0 - 0x00A0)
class UBioCustomAction_PraetorianTeleportEnd : public UBioCustomAction_PraetorianTeleport
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioCustomAction_PraetorianTeleportStart
// 0x0000 (0x00A0 - 0x00A0)
class UBioCustomAction_PraetorianTeleportStart : public UBioCustomAction_PraetorianTeleport
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioCustomAction_WaypointAnimation
// 0x000F (0x00A0 - 0x0091)
class UBioCustomAction_WaypointAnimation : public UBioCustomAction
{
public:
	struct FBodyStance                                 BS_WaypointAnim;                                  		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool SetWaypointAnim ( struct FName AnimName, int eStance );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void StartCustomAction ( );
};

// Class SFXGame.BioDamageTypeCanister
// 0x0003 (0x0114 - 0x0111)
class UBioDamageTypeCanister : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioDamageTypePhysics
// 0x0003 (0x0114 - 0x0111)
class UBioDamageTypePhysics : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioDeprecated
// 0x0000 (0x0060 - 0x0060)
class UBioDeprecated : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGameReplicationInfo
// 0x0004 (0x0310 - 0x030C)
class ABioGameReplicationInfo : public AGameReplicationInfo
{
public:
	unsigned long                                      Temp : 1;                                         		// 0x030C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeapon_Shotgun_Base
// 0x0003 (0x0974 - 0x0971)
class ASFXWeapon_Shotgun_Base : public ASFXWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ScaleWeapon ( int Level );
	void ModifyDamage ( struct FVector HitLocation, class AActor* HitActor, float* BaseDamage );
};

// Class SFXGame.BioLookAtTarget
// 0x001E (0x02A8 - 0x028A)
class ABioLookAtTarget : public AActor
{
public:
	float                                              m_fDelay;                                         		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fConeDeg;                                       		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMinDistance;                                   		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCODelayRemaining;                              		// 0x0298 (0x0004) [0x0000000000000000]              
	float                                              m_fNCODelayRemaining;                             		// 0x029C (0x0004) [0x0000000000000000]              
	float                                              m_fConeCos;                                       		// 0x02A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bCOSeen : 1;                                    		// 0x02A4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bNCOSeen : 1;                                   		// 0x02A4 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_WaypointSet_WaypointReached
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_WaypointSet_WaypointReached : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPathPointFactory
// 0x0000 (0x008C - 0x008C)
class UBioPathPointFactory : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqEvt_ExceededPhysicsThreshold
// 0x0002 (0x0128 - 0x0126)
class USFXSeqEvt_ExceededPhysicsThreshold : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXPhysicalMaterialPhysics
// 0x000C (0x006C - 0x0060)
class USFXPhysicalMaterialPhysics : public USFXPhysicalMaterialBase
{
public:
	class UWwiseEvent*                                 Sound;                                            		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                WwiseType;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameModeGalaxy
// 0x0017 (0x00E4 - 0x00CD)
class USFXGameModeGalaxy : public USFXGameModeBase
{
public:
	class UBioCameraBehaviorGalaxy*                    GalaxyCam;                                        		// 0x00D0 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraTransition_GalaxyMap*              InstantTransition;                                		// 0x00D8 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              DeadZone;                                         		// 0x00E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void TabLeft ( );
	void TabRight ( );
	void StopFuel ( );
	void StartFuel ( );
	bool BuyFuel ( );
	void BuyProbes ( );
	void BeginExitGalaxyMap ( unsigned long resize );
	bool CanExit ( );
	class USFXCameraMode* HACK_GetCameraMode ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	void Initialize ( );
};

// Class SFXGame.SFXGameModeOrbital
// 0x0200 (0x02E4 - 0x00E4)
class USFXGameModeOrbital : public USFXGameModeGalaxy
{
public:
	struct TArray<class UParticleSystemComponent*>     TemporaryComponents;                              		// 0x00E4 (0x0010) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FScreenShakeStruct                          Shake;                                            		// 0x00F4 (0x0070) [0x0000000000000000]              
	struct FScreenShakeStruct                          BigShake;                                         		// 0x0164 (0x0070) [0x0000000000000000]              
	struct FRotator                                    ReticleRot;                                       		// 0x01D4 (0x000C) [0x0000000000000000]              
	struct FRotator                                    ReticleRotMaxClamp;                               		// 0x01E0 (0x000C) [0x0000000000000000]              
	struct FRotator                                    ReticleRotMinClamp;                               		// 0x01EC (0x000C) [0x0000000000000000]              
	struct FVector                                     ProbeLaunchLocation;                              		// 0x01F8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ProbeTargetLocation;                              		// 0x0204 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ProbeControlPtLocation;                           		// 0x0210 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    ReticleEffect;                                    		// 0x021C (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    ScanReticleEffect;                                		// 0x0224 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    ScanWipeEffect;                                   		// 0x022C (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    ScanBlipEffect;                                   		// 0x0234 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    ScanDirectionEffect;                              		// 0x023C (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    LaunchReticleEffect;                              		// 0x0244 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    ProbeExplosionEffect;                             		// 0x024C (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UForceFeedbackWaveform*                      ResourceFFWaveForm;                               		// 0x0254 (0x0008) [0x0000000000000000]              
	class UWwiseAudioComponent*                        AudioComponent;                                   		// 0x025C (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              PlanetRotationSpeed;                              		// 0x0264 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ScanPlanetRotationSpeed;                          		// 0x0268 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ReticleMoveSpeed;                                 		// 0x026C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ScanReticleMoveSpeed;                             		// 0x0270 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GamepadPlanetRotationSpeed;                       		// 0x0274 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GamepadScanPlanetRotationSpeed;                   		// 0x0278 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GamepadReticleMoveSpeed;                          		// 0x027C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GamepadScanReticleMoveSpeed;                      		// 0x0280 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RumbleScale;                                      		// 0x0284 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MoveDist;                                         		// 0x0288 (0x0004) [0x0000000000000000]              
	float                                              ProbeControlAxisOffset;                           		// 0x028C (0x0004) [0x0000000000000000]              
	float                                              ProbeControlTargetOffset;                         		// 0x0290 (0x0004) [0x0000000000000000]              
	float                                              ScannerRotateSpeed;                               		// 0x0294 (0x0004) [0x0000000000000000]              
	float                                              ProbeLaunchTime;                                  		// 0x0298 (0x0004) [0x0000000000000000]              
	float                                              ProbeLaunchTimeMax;                               		// 0x029C (0x0004) [0x0000000000000000]              
	float                                              ScanDist;                                         		// 0x02A0 (0x0004) [0x0000000000000000]              
	float                                              ReticleScale;                                     		// 0x02A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Roll;                                             		// 0x02A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fRescaleTime;                                     		// 0x02AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fInitialScale;                                    		// 0x02B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fNewScale;                                        		// 0x02B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fMaxRescaleTime;                                  		// 0x02B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ImpactTime;                                       		// 0x02BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ImpactTimeMax;                                    		// 0x02C0 (0x0004) [0x0000000000000000]              
	float                                              fSpectrographUpdateTime;                          		// 0x02C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fSpectrographUpdateDelay;                         		// 0x02C8 (0x0004) [0x0000000000000000]              
	float                                              fResourceRetrievalFactor;                         		// 0x02CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fResourceTimer;                                   		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fReticleUpDown;                                   		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fReticleLeftRight;                                		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fPlanetLeftRight;                                 		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      Scanning : 1;                                     		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      ProbeActive : 1;                                  		// 0x02E0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bRescaling : 1;                                   		// 0x02E0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bExiting : 1;                                     		// 0x02E0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      ImpactActive : 1;                                 		// 0x02E0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      DrawProbeDebugLines : 1;                          		// 0x02E0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bMouseLock : 1;                                   		// 0x02E0 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void setshakelfreq ( float X, float Y, float Z );
	void setshakelamp ( float X, float Y, float Z );
	void setshakerfreq ( float X, float Y, float Z );
	void setshakeramp ( float X, float Y, float Z );
	void setshaket ( float T );
	void SetResourceRetrievalFactor ( float F );
	void ToggleProbeDebug ( );
	void SetProbeTime ( float T );
	void SetProbeControl ( float A, float T );
	void SetReticleScale ( float Scale );
	void SetPlanetRotateSpeed ( float Speed );
	void SetScanRotateSpeed ( float Speed );
	void SetScanSpeed ( float Speed );
	void SetReticleRotMaxClamp ( float P, float Y, float R );
	void SetReticleRotMinClamp ( float P, float Y, float R );
	void SetScanDist ( float A );
	void GiveResource ( unsigned char FeatureType, unsigned char MineralType, int Amount );
	void RingReticleUpDown ( float Axis );
	void RingReticleLeftRight ( float Axis );
	float GetScannerSpeedUpgradeFactor ( );
	void UpdateReticle ( float DeltaTime );
	void UpdatePlanetLeftRight ( float Axis, float DeltaTime );
	void PlanetLeftRight ( float Axis );
	float GetPlanetRotationSpeed ( );
	float GetReticleMoveSpeed ( );
	bool UseGamepadModifier ( );
	void LaunchProbe ( );
	void EndImpact ( );
	void ShowProbeImpactVFX ( class UBioPlanet* PlanetData, struct FVector pos, class AInterpActor* Planet );
	void ProbeImpact ( );
	void StopScanning ( );
	void StartScanning ( );
	void SetButtonLabel ( struct FString sButton, int nText );
	void SetLTriggerLabelVisible ( unsigned long bShow );
	void SetRTriggerLabelVisible ( unsigned long bShow );
	void UpdateProbeHudElement ( int nProbes );
	void ToggleMouseLock ( unsigned long bNewMouseLock );
	void StopFeatureSounds ( );
	void StartFeatureSounds ( );
	struct FVector GetRelativeReticlePosition ( );
	void UpdateAnomalyIndicator ( struct FVector toLanding, float DeltaTime, unsigned long flashIndicator );
	void ShowHUDAnomalyIndicator ( );
	void ScanResources ( float DeltaTime );
	int ScannedResourceAmount ( float fDistTo, int ResourceAmount );
	void Update ( float DeltaTime );
	void UpdatePlanetScale ( float DeltaTime );
	void ResetProbe ( );
	bool eventCanExit ( );
	class UBioSeqAct_OrbitalGame* GetGameData ( );
	void BeginExitGalaxyMap ( unsigned long resize );
	void Deactivated ( );
	void UpdatePlanetRichness ( );
	void Activated ( );
	void DoPatchDefaultPropertyUpdates ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

// Class SFXGame.SFXCustomAction_Frozen
// 0x0007 (0x00E4 - 0x00DD)
class USFXCustomAction_Frozen : public USFXCustomAction_DamageReaction
{
public:
	unsigned long                                      bWelded : 1;                                      		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void CheckEndRecovery ( );
	void CheckBeginRecovery ( );
	void StopCustomAction ( );
	void StartRagdollPhase ( );
	void UnWeldPhysicsAssetInstance ( );
	void StartCustomAction ( );
	void Init ( struct FVector HitLocation, struct FVector HitNormal, struct FTraceHitInfo HitInfo, unsigned long bPlayImpact, class AController* Inst );
};

// Class SFXGame.SFXCustomAction_Ragdoll
// 0x0007 (0x00E4 - 0x00DD)
class USFXCustomAction_Ragdoll : public USFXCustomAction_DamageReaction
{
public:
	unsigned long                                      bHeldInRagdoll : 1;                               		// 0x00E0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void CheckEndRecovery ( );
	void CheckBeginRecovery ( );
	void RegisterRagdollVocCallback ( );
	void OnRagdollPhysicsImpact ( class APawn* Pawn, class AActor* oImpactActor, struct FVector vImpactDir );
	void RestartScream ( );
	void PlayScream ( );
	void StopCustomAction ( );
	void StartCustomAction ( );
	void Init ( struct FVector HitLocation, struct FVector HitNormal, struct FTraceHitInfo HitInfo, unsigned long bPlayImpact, class AController* Inst );
};

// Class SFXGame.SFXGameEffect_PassiveWeaponDamageBonus
// 0x0007 (0x0098 - 0x0091)
class USFXGameEffect_PassiveWeaponDamageBonus : public USFXGameEffect
{
public:
	unsigned long                                      bRemoved : 1;                                     		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_DamageMultiplier
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_DamageMultiplier : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
	void ComputeEffectValue ( float* Value );
	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
};

// Class SFXGame.SFXCustomAction_Knockback
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_Knockback : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_DeathKnockback
// 0x0007 (0x00E4 - 0x00DD)
class USFXCustomAction_DeathKnockback : public USFXCustomAction_DamageReaction
{
public:
	float                                              RagdollDuration;                                  		// 0x00E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
};

// Class SFXGame.SFXCustomAction_PlayerStagger
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_PlayerStagger : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_PlayerMeleed
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_PlayerMeleed : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_PlayerStandardImpact
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_PlayerStandardImpact : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_PlayerKnockback
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_PlayerKnockback : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_Meleed
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_Meleed : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_BloodyPlayerStandardImpact
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_BloodyPlayerStandardImpact : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_PlayerOnFire
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_PlayerOnFire : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_ElectricStandardImpact
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_ElectricStandardImpact : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_MeleedII
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_MeleedII : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXModule_AimAssist
// 0x00D8 (0x0144 - 0x006C)
class USFXModule_AimAssist : public USFXModule
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x006C (0x0004) MISSED OFFSET
	struct FQuat                                       DebugAdhesion_PerfectAim;                         		// 0x0070 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FQuat                                       DebugAdhesion_StrafeAssist;                       		// 0x0080 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FQuat                                       AdhesionSmoothRot;                                		// 0x0090 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastCamLoc;                                       		// 0x00A0 (0x000C) [0x0000000000000000]              
	struct FRotator                                    DebugAdhesion_Smoothed;                           		// 0x00AC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    DebugAdhesion_Combined;                           		// 0x00B8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    DebugAdhesion_Final;                              		// 0x00C4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ZoomSnapTarget;                                   		// 0x00D0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CurrentAimAssistBoneLocation;                     		// 0x00DC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       LastAdhesionTarget;                               		// 0x00E8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       LastFrictionTarget;                               		// 0x00F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      LastZoomSnapTarget;                               		// 0x00F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      CurrentAimAssistTarget;                           		// 0x0100 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              GlobalFrictionFactor;                             		// 0x0108 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GlobalAimCorrectionFactor;                        		// 0x010C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GlobalAdhesionFactor;                             		// 0x0110 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EnemyMovementAdhesionFactor;                      		// 0x0114 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastDistToTarget;                                 		// 0x0118 (0x0004) [0x0000000000000000]              
	float                                              LastDistMultiplier;                               		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              LastDistFromAimZ;                                 		// 0x0120 (0x0004) [0x0000000000000000]              
	float                                              LastDistFromAimY;                                 		// 0x0124 (0x0004) [0x0000000000000000]              
	float                                              LastFrictionMultiplier;                           		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              LastTargetRadius;                                 		// 0x012C (0x0004) [0x0000000000000000]              
	float                                              LastTargetHeight;                                 		// 0x0130 (0x0004) [0x0000000000000000]              
	float                                              AdhesionSmoothRate;                               		// 0x0134 (0x0004) [0x0000000000000000]              
	float                                              FrictionSmoothValue;                              		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FrictionSmoothRate;                               		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              CurrentAimAssistSoftMargin;                       		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DebugDraw_ZoomSnap ( class ABioHUD* H );
	void ZoomSnap ( );
	void DebugDraw_Adhesion ( class ABioHUD* H );
	struct FString PrintQuat ( struct FQuat Q );
	struct FRotator ViewAdhesion ( float DeltaTime, class ASFXWeapon* Weapon );
	void DebugDraw_Friction ( class ABioHUD* H );
	void ViewFriction ( float DeltaTime, class ASFXWeapon* Weapon );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	struct FRotator GetMagneticAimCorrection ( struct FVector StartFireLoc, struct FRotator BaseAimRot, float MaxAngle, float Threshold, float Range );
	void UpdateViewRotationForAdhesion ( float DeltaTime, struct FRotator ViewRotation );
	void CacheCurrentAimAssistTarget ( );
};

// Class SFXGame.SFXCameraMode_Photo
// 0x0038 (0x0250 - 0x0218)
class USFXCameraMode_Photo : public USFXCameraMode
{
public:
	struct FScriptDelegate                             ExternalModifyPPSettings;                         		// 0x0218 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ModifyPostProcess__Delegate;                    		// 0x0228 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              RotationInterpSpeed;                              		// 0x0238 (0x0004) [0x0000000000000000]              
	float                                              FOVInterpSpeed;                                   		// 0x023C (0x0004) [0x0000000000000000]              
	float                                              CurrentRoll;                                      		// 0x0240 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetRoll;                                       		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentFOV;                                       		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetFOV;                                        		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float DeltaTime );
	void UpdateRollAndFOV ( float DeltaTime );
	void UpdateOffset ( struct FVector Location );
	void ModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
	void ResetRoll ( );
	void InitFromMode ( float NewFOV );
	void ModifyPostProcess ( struct FPostProcessSettings* PPSettings );
};

// Class SFXGame.SFXCameraMode_PhotoOrbit
// 0x0000 (0x0250 - 0x0250)
class USFXCameraMode_PhotoOrbit : public USFXCameraMode_Photo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateOffset ( struct FVector Location );
};

// Class SFXGame.SFXSeqEvt_Tutorial
// 0x0002 (0x0128 - 0x0126)
class USFXSeqEvt_Tutorial : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqEvt_TutorialReload
// 0x0000 (0x0128 - 0x0128)
class USFXSeqEvt_TutorialReload : public USFXSeqEvt_Tutorial
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.SFXSeqEvt_TutorialMelee
// 0x0000 (0x0128 - 0x0128)
class USFXSeqEvt_TutorialMelee : public USFXSeqEvt_Tutorial
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.SFXSeqEvt_TutorialZoom
// 0x0000 (0x0128 - 0x0128)
class USFXSeqEvt_TutorialZoom : public USFXSeqEvt_Tutorial
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.SFXSeqEvt_TutorialQuickCast
// 0x0000 (0x0128 - 0x0128)
class USFXSeqEvt_TutorialQuickCast : public USFXSeqEvt_Tutorial
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.SFXSeqEvt_TutorialWeaponSwitch
// 0x0000 (0x0128 - 0x0128)
class USFXSeqEvt_TutorialWeaponSwitch : public USFXSeqEvt_Tutorial
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.SFXSeqEvt_TutorialStorm
// 0x0000 (0x0128 - 0x0128)
class USFXSeqEvt_TutorialStorm : public USFXSeqEvt_Tutorial
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.SFXSeqEvt_TutorialOrderHenchman
// 0x0000 (0x0128 - 0x0128)
class USFXSeqEvt_TutorialOrderHenchman : public USFXSeqEvt_Tutorial
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.SFXSeqEvt_TutorialWheelHidden
// 0x0000 (0x0128 - 0x0128)
class USFXSeqEvt_TutorialWheelHidden : public USFXSeqEvt_Tutorial
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.SFXSeqEvt_TutorialAreaMapHidden
// 0x0000 (0x0128 - 0x0128)
class USFXSeqEvt_TutorialAreaMapHidden : public USFXSeqEvt_Tutorial
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.SFXDifficulty_Level1
// 0x0000 (0x00E4 - 0x00E4)
class USFXDifficulty_Level1 : public USFXDifficulty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDifficulty_Level3
// 0x0000 (0x00E4 - 0x00E4)
class USFXDifficulty_Level3 : public USFXDifficulty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDifficulty_Level4
// 0x0000 (0x00E4 - 0x00E4)
class USFXDifficulty_Level4 : public USFXDifficulty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDifficulty_Level5
// 0x0000 (0x00E4 - 0x00E4)
class USFXDifficulty_Level5 : public USFXDifficulty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDifficulty_Level6
// 0x0000 (0x00E4 - 0x00E4)
class USFXDifficulty_Level6 : public USFXDifficulty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDifficulty_Level2
// 0x0000 (0x00E4 - 0x00E4)
class USFXDifficulty_Level2 : public USFXDifficulty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPlayerReplicationInfo
// 0x0002 (0x0368 - 0x0366)
class ABioPlayerReplicationInfo : public APlayerReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPlaypenVolumeAdditive
// 0x0000 (0x02E0 - 0x02E0)
class ABioPlaypenVolumeAdditive : public ABioPlaypenVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

// Class SFXGame.BioPlaypenVolumeSubtractive
// 0x0000 (0x02E0 - 0x02E0)
class ABioPlaypenVolumeSubtractive : public ABioPlaypenVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

// Class SFXGame.SFXShield_Energy
// 0x0003 (0x03FC - 0x03F9)
class ASFXShield_Energy : public ASFXShield_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXShield_Biotic
// 0x0003 (0x03FC - 0x03F9)
class ASFXShield_Biotic : public ASFXShield_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXShield_Armour
// 0x0003 (0x03FC - 0x03F9)
class ASFXShield_Armour : public ASFXShield_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void AdjustShieldImpactLocation ( struct FVector HitNormal, struct FVector* HitLocation );
};

// Class SFXGame.BioPowerScriptDesign
// 0x0000 (0x00EC - 0x00EC)
class UBioPowerScriptDesign : public UBioPowerScript
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool HasRemainingShieldOfType ( class ABioPawn* oPawn, class UClass* ShieldClass );
	void SpawnVFXAtLocation ( struct FVector Location, class UParticleSystem* PS );
	bool ImpactPlaceable ( class AActor* oCaster, class AActor* oImpacted, struct FVector Momentum, float PlotPlaceableDamage, unsigned long bForceDamage );
	void RagdollPhysicsImpact ( class APawn* oPawn, class AActor* oImpactActor, struct FVector vImpactDir, float fVelocityToDamageMult );
	void CheckBioticComboAchievement ( class ABioPawn* oCaster, class ABioPawn* oTarget, unsigned long bOrderedByPlayer );
	void RemoveBioticEffects ( class ABioPawn* oPawn, unsigned long bRemoveStasis );
	bool HasEffectType ( class AActor* oTarget, class UClass* EffectClass );
	float GetPhysicsLevelResistance ( class AActor* oTarget );
	float GetBioticMultiplier ( class AActor* oTarget );
	float GetWeaponDamage ( class ASFXWeapon* Weapon, struct FVector HitLocation, class AActor* HitActor );
	float GetBulletsPerSecond ( class ASFXWeapon* Weapon );
	float LerpPowerParameter2D ( struct FVector2D Parameter, int PowerRank );
	float LerpPowerParameter ( struct FVector Parameter, int PowerRank );
	bool CanBeRagdolledByPowers ( class ABioPawn* oPawn );
	bool IsInRagdoll ( class AActor* oActor );
	bool PlayRandomReaction ( class ABioPawn* oPawn, class AController* InstigatedBy, struct TArray<unsigned char>* Actions );
	int HasAnimatedReactions ( class ABioPawn* oPawn, struct TArray<unsigned char>* Actions );
	bool IsPlayingCombatReaction ( class AActor* oTarget );
	unsigned char GetCustomActionMapping ( unsigned char Reaction );
	bool CauseDamageReaction ( class AActor* oActor, class AController* InstigatedBy, unsigned char Reaction, unsigned long OverrideCurrentReaction );
	bool ApplyPermanentGameEffect ( class AActor* oTarget, class UClass* ClassName, float fEffectValue, struct FName nmCategory, class AController* InInstigator );
	bool ApplyTemporaryGameEffect ( class AActor* oTarget, class UClass* ClassName, float fDuration, float fEffectValue, struct FName nmCategory, class AController* InInstigator );
	bool HideActorMesh ( class AActor* oActor );
	bool PurgeWeaponHeat ( class ASFXWeapon* Weapon, unsigned long PurgeHeavyWeapons );
	class ABioPawn* GetPawnByName ( class AWorldInfo* oWorldInfo, struct FName PawnName );
	bool SetWeaponTracerVFX ( class AActor* oCaster, class UStaticMesh* Mesh );
	void SpawnRandomImpactVFX ( class ABioPawn* Pawn, class UParticleSystem* ImpactParticleSystem );
	struct FName GetRandomImpactBone ( class ABioPawn* Pawn );
	void SpawnWeaponImpactVFX ( struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale );
	bool AdjustInventoryResource ( class AActor* oActor, unsigned char eResource, int nAmount );
	bool IncreaseAllPowerCooldowns ( class AActor* oActor, float fDuration, unsigned long bIncreaseTech, unsigned long bIncreaseBiotic, unsigned long bIncreaseWeapon, unsigned long bIncreaseCombat );
	bool ClearAllPowerCooldowns ( class AActor* oActor );
	bool ModifyArmor ( class AActor* oTarget, float fArmor, unsigned long bSetHeavyArmor );
	bool ResetBioticResistance ( class AActor* oTarget );
	bool SetBioticResistance ( class AActor* oTarget, float fResistance );
	unsigned char GetFactionRelationship ( class AActor* oCaster, class AActor* oTarget );
	float GetDistanceModifier ( class AActor* oTarget );
	int GetPhysicsLevel ( class AActor* oImpacted, unsigned long bIgnoreResistance );
	bool IsMachineRace ( class AActor* oImpacted );
	bool IsAnimalRace ( class AActor* oImpacted );
	bool IsHumanoidRace ( class AActor* oImpacted );
	bool IsOfRace ( class AActor* oImpacted, unsigned char eRace );
	bool IsDeadBody ( class AActor* oImpacted );
	bool IsPlaceable ( class AActor* oImpacted );
};

// Class SFXGame.SFXGameEffect_BioticWeakness
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_BioticWeakness : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_Singularity
// 0x003B (0x00CC - 0x0091)
class USFXGameEffect_Singularity : public USFXGameEffect
{
public:
	struct FVector                                     SingularityLocation;                              		// 0x0094 (0x000C) [0x0000000000000000]              
	class ABioPawn*                                    Caster;                                           		// 0x00A0 (0x0008) [0x0000000000000000]              
	struct FName                                       BoneName;                                         		// 0x00A8 (0x0008) [0x0000000000000000]              
	float                                              ForceTimer;                                       		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              InnerRadius;                                      		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              ForceInterval;                                    		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              SingularityRadius;                                		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              Force;                                            		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              minHeightForBodyFallSound;                        		// 0x00C4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bApplied : 1;                                     		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool OutOfRangeCheck ( float Distance );
	bool IsStillInSingularity ( );
	void OnRemoved ( );
	void MoveActor ( );
	void InitialMovement ( );
	void OnUpdate ( float DeltaSeconds );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_Crush
// 0x0027 (0x00B8 - 0x0091)
class USFXGameEffect_Crush : public USFXGameEffect
{
public:
	struct FName                                       BoneName;                                         		// 0x0094 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             SlamPS;                                           		// 0x009C (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class ABioPawn*                                    Caster;                                           		// 0x00A4 (0x0008) [0x0000000000000000]              
	float                                              UpwardForce;                                      		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              SlamDownForce;                                    		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              minHeightForBodyFallSound;                        		// 0x00B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnUpdate ( float DeltaSeconds );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_Pull
// 0x0043 (0x00D4 - 0x0091)
class USFXGameEffect_Pull : public USFXGameEffect
{
public:
	struct FVector                                     ForceVector;                                      		// 0x0094 (0x000C) [0x0000000000000000]              
	struct FVector                                     Direction;                                        		// 0x00A0 (0x000C) [0x0000000000000000]              
	struct FName                                       BoneName;                                         		// 0x00AC (0x0008) [0x0000000000000000]              
	class ABioPawn*                                    Caster;                                           		// 0x00B4 (0x0008) [0x0000000000000000]              
	float                                              Force;                                            		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              GravityRampUpTime;                                		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              MinimumVelocity;                                  		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              MinimumVelocityForceMult;                         		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              minHeightForBodyFallSound;                        		// 0x00CC (0x0004) [0x0000000000000000]              
	unsigned long                                      bGravityRampUp : 1;                               		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool HasOtherGravityEffects ( );
	void OnRemoved ( );
	void MoveActor ( struct FVector vForce );
	void OnUpdate ( float DeltaSeconds );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_AntiGravity
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_AntiGravity : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_Ragdoll
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_Ragdoll : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_WeldPhysics
// 0x001D (0x00C5 - 0x00A8)
class USFXGameEffect_WeldPhysics : public USFXGameEffect_DeathEffect
{
public:
	class ABioPawn*                                    Caster;                                           		// 0x00A8 (0x0008) [0x0000000000000000]              
	class UBioVFXTemplate*                             CrustTemplate;                                    		// 0x00B0 (0x0008) [0x0000000000000000]              
	class ABioVisualEffect*                            CrustEffect;                                      		// 0x00B8 (0x0008) [0x0000000000000000]              
	unsigned long                                      bFreezeSucceeded : 1;                             		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      CustomActionType;                                 		// 0x00C4 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void RemoveExistingWeldEffects ( );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_Stasis
// 0x0003 (0x00C8 - 0x00C5)
class USFXGameEffect_Stasis : public USFXGameEffect_WeldPhysics
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_PhysicsDamageMultiplier
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_PhysicsDamageMultiplier : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXDamageType_PowerPhysics
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_PowerPhysics : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_CryoFreeze
// 0x0027 (0x00EC - 0x00C5)
class USFXGameEffect_CryoFreeze : public USFXGameEffect_WeldPhysics
{
public:
	class UBioVFXTemplate*                             ThawCrustTemplate;                                		// 0x00C8 (0x0008) [0x0000000000000000]              
	class ABioVisualEffect*                            ThawCrust;                                        		// 0x00D0 (0x0008) [0x0000000000000000]              
	class USFXGameEffect_PhysicsDamageMultiplier*      PhysicsDamageMultiplier;                          		// 0x00D8 (0x0008) [0x0000000000000000]              
	float                                              ThawTime;                                         		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              FrozenPhysicsDamageIncrease;                      		// 0x00E4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bThawStarted : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnUpdate ( float DeltaSeconds );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_DelayedCryoFreeze
// 0x0037 (0x00C8 - 0x0091)
class USFXGameEffect_DelayedCryoFreeze : public USFXGameEffect
{
public:
	struct TArray<unsigned char>                       AnimatedReactions;                                		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioVFXTemplate*                             DeathEffect;                                      		// 0x00A4 (0x0008) [0x0000000000000000]              
	class UBioVFXTemplate*                             CrustTemplate;                                    		// 0x00AC (0x0008) [0x0000000000000000]              
	class UWwiseEvent*                                 FreezingSound;                                    		// 0x00B4 (0x0008) [0x0000000000000000]              
	class ABioVisualEffect*                            CrustEffect;                                      		// 0x00BC (0x0008) [0x0000000000000000]              
	unsigned long                                      bReactionPlayed : 1;                              		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnUpdate ( float DeltaSeconds );
	void OnApplied ( );
};

// Class SFXGame.SFXEmitter
// 0x0004 (0x02A4 - 0x02A0)
class ASFXEmitter : public AEmitter
{
public:
	unsigned long                                      bPooled : 1;                                      		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetLifeTime ( float Seconds );
	void OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent );
	void Reuse ( );
	void Initialize ( class UParticleSystem* Template );
	void Recycle ( );
};

// Class SFXGame.BioRandomActivity
// 0x0018 (0x00A4 - 0x008C)
class UBioRandomActivity : public UBioBaseActivity
{
public:
	struct TArray<float>                               m_afTwitchProbabilitys;                           		// 0x008C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_fBaseTime;                                      		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fVarianceTime;                                  		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ActivateCharacterCreation
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_ActivateCharacterCreation : public USequenceAction
{
public:
	struct FString                                     m_sCharacterCreationMap;                          		// 0x00F8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_AddPlaypenVolume
// 0x0018 (0x0110 - 0x00F8)
class UBioSeqAct_AddPlaypenVolume : public USequenceAction
{
public:
	struct TArray<class AActor*>                       Volumes;                                          		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      Squad;                                            		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_AddSquadToPerception
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_AddSquadToPerception : public USequenceAction
{
public:
	class AActor*                                      oPawn;                                            		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oPerceivedSquad;                                  		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_AddToParty
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_AddToParty : public USequenceAction
{
public:
	float                                              TeleportOffsetRear;                               		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TeleportOffsetSide;                               		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      TeleportToLeader : 1;                             		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.SFXTreasureUseModule
// 0x0005 (0x00C1 - 0x00BC)
class USFXTreasureUseModule : public USFXSimpleUseModule
{
public:
	int                                                ResourcePercent;                                  		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TreasureType;                                     		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsDefaultActionPossible ( );
	bool GiveAmmo ( unsigned char ttype, class ABioWorldInfo* oWorldInfo, int ResourceAmount );
	void ScaleAmmo ( class ASFXHeavyWeapon* HWeapon );
	bool GiveInventoryTreasure ( unsigned char InvType, int Amount, class ABioWorldInfo* oWorldInfo, unsigned long bIsSalvage, unsigned long bIgnoreBudget, unsigned long bExtraIfLow, unsigned long bSuppressNotifications );
	bool GiveMediGel ( unsigned char ttype, class ABioWorldInfo* oWorldInfo, int ResourceAmount, unsigned long bAbsoluteAmount );
	bool GiveCash ( unsigned char ttype, class ABioWorldInfo* oWorldInfo, int nBudgetPercent, unsigned long bAbsoluteAmount, unsigned long bIsSalvage );
	bool AwardResource ( unsigned char ttype, class ABioWorldInfo* oWorldInfo, int nBudgetPercent, unsigned long bAbsoluteAmount, unsigned long bIsSalvage );
	void SetTargetable ( unsigned long bTargetable );
	void PostBeginPlay ( );
	void OnUsed ( class AActor* User );
};

// Class SFXGame.SFXDroppedAmmo
// 0x0034 (0x02DC - 0x02A8)
class ASFXDroppedAmmo : public ADroppedPickup
{
public:
	class UStaticMeshComponent*                        AmmoMesh;                                         		// 0x02A8 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UWwiseEvent*                                 AmmoPickupSound;                                  		// 0x02B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Clip_MM;                                          		// 0x02B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInterface*                          Clip_MM_Disabled;                                 		// 0x02C0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       PlayerNameCache;                                  		// 0x02C8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   AmmoDropPct;                                      		// 0x02D0 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      bIsDisabled : 1;                                  		// 0x02D8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDecays : 1;                                      		// 0x02D8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bPooled : 1;                                      		// 0x02D8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUnTouch ( class AActor* Other );
	void Reuse ( );
	void Recycle ( );
	void eventTick ( float DeltaTime );
	void PickedUpBy ( class APawn* P );
	void eventEncroachedBy ( class AActor* Other );
	void Reset ( );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void SetCollisionCylinderSize ( float CollisionRadius, float CollisionHeight );
	void GiveTo ( class APawn* P );
	bool GiveAmmo ( class AInventoryManager* InvManager, float fBonusAmmo );
	bool ShouldDropAmmo ( class ASFXWeapon* Weapon, class APlayerController* PC );
	float GetUsedAmmoPct ( class AInventoryManager* InvManager, unsigned long bCountAmmoInMagazine );
	bool CanPickUpAmmo ( class AInventoryManager* InvManager );
	float CalculateAmmoStarvation ( class AInventoryManager* InvManager );
};

// Class SFXGame.BioSeqAct_AdjustCostForDiscount
// 0x0019 (0x0111 - 0x00F8)
class UBioSeqAct_AdjustCostForDiscount : public USequenceAction
{
public:
	struct FName                                       nmLevel;                                          		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                nPrice;                                           		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nState;                                           		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nDiscountedPrice;                                 		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDiscount : 1;                                    		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      TreasureType;                                     		// 0x0110 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_AOECauseDamage
// 0x0020 (0x0118 - 0x00F8)
class UBioSeqAct_AOECauseDamage : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                       		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      InstigatorController;                             		// 0x0100 (0x0008) [0x0000000000000000]              
	float                                              DamageAmount;                                     		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageRadius;                                     		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MomentumScale;                                    		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDamageFalloff : 1;                               		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceCinematicDamage : 1;                        		// 0x0114 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_AreaTransition
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_AreaTransition : public USequenceAction
{
public:
	struct FName                                       AreaName;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       StartPoint;                                       		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_AttachCrustEffect
// 0x0014 (0x010C - 0x00F8)
class UBioSeqAct_AttachCrustEffect : public USequenceAction
{
public:
	class UBioVFXTemplate*                             oEffect;                                          		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Target;                                           		// 0x0100 (0x0008) [0x0000000000000000]              
	float                                              fLifeTime;                                        		// 0x0108 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_AttachVisualEffect
// 0x002C (0x0124 - 0x00F8)
class UBioSeqAct_AttachVisualEffect : public USequenceAction
{
public:
	struct TArray<class AActor*>                       m_oAttachTo;                                      		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     m_vOffset;                                        		// 0x0108 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmSocketOrBone;                                 		// 0x0114 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             m_oEffect;                                        		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_BioToggleCinematicMode
// 0x0014 (0x0110 - 0x00FC)
class UBioSeqAct_BioToggleCinematicMode : public USeqAct_ToggleCinematicMode
{
public:
	struct FString                                     sSkipEvent;                                       		// 0x00FC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bCinematicInputMode : 1;                          		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableCinematicSkip : 1;                        		// 0x010C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bEnterCombatModeOnEnd : 1;                      		// 0x010C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_CauseDamage
// 0x001C (0x0114 - 0x00F8)
class UBioSeqAct_CauseDamage : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                       		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      InstigatorController;                             		// 0x0100 (0x0008) [0x0000000000000000]              
	float                                              DamageAmount;                                     		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MomentumScale;                                    		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceCinematicDamage : 1;                        		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_ChangeAI
// 0x0014 (0x010C - 0x00F8)
class UBioSeqAct_ChangeAI : public USequenceAction
{
public:
	class UClass*                                      ControllerClass;                                  		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oPawn;                                            		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      SaveOldAIController : 1;                          		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_ClearBrowserWheelStateOverrides
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_ClearBrowserWheelStateOverrides : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_Crouch
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_Crouch : public USequenceAction
{
public:
	class AActor*                                      m_oActor;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bCrouch : 1;                                    		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_CustomizeStageCameras
// 0x001C (0x0114 - 0x00F8)
class UBioSeqAct_CustomizeStageCameras : public USequenceAction
{
public:
	float                                              m_fCameraHeightDelta;                             		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCameraPitchDelta;                              		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCameraYawDelta;                                		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCameraFOVDelta;                                		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCameraNearPlaneDelta;                          		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCameraFocusInnerRadiusDelta;                   		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCameraFocusDistanceDelta;                      		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_Deprecated
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_Deprecated : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_DisableSquad
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_DisableSquad : public USequenceAction
{
public:
	class ABioBaseSquad*                               Squad;                                            		// 0x00F8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DoActionInRadius
// 0x0030 (0x0128 - 0x00F8)
class UBioSeqAct_DoActionInRadius : public USequenceAction
{
public:
	struct TArray<class AActor*>                       m_aActorList;                                     		// 0x00F8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      ClassFilter;                                      		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      SourceActor;                                      		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      CurrentObject;                                    		// 0x0118 (0x0008) [0x0000000000000000]              
	float                                              Radius;                                           		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nIndex;                                         		// 0x0124 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DoActionInVolume
// 0x002C (0x0124 - 0x00F8)
class UBioSeqAct_DoActionInVolume : public USequenceAction
{
public:
	struct TArray<class AActor*>                       m_aActorList;                                     		// 0x00F8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      ClassFilter;                                      		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Volume;                                           		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      CurrentObject;                                    		// 0x0118 (0x0008) [0x0000000000000000]              
	int                                                m_nIndex;                                         		// 0x0120 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUIClear
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_DUIClear : public USequenceAction
{
public:
	unsigned long                                      bModal : 1;                                       		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetBarFillDirection
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_DUISetBarFillDirection : public USequenceAction
{
public:
	unsigned long                                      bModalBar : 1;                                    		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLeftToRight : 1;                                 		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetBarFillPercent
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_DUISetBarFillPercent : public USequenceAction
{
public:
	int                                                nPercent;                                         		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bModalBar : 1;                                    		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetBarMarkers
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_DUISetBarMarkers : public USequenceAction
{
public:
	int                                                nMarker1;                                         		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nMarker2;                                         		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bModalBar : 1;                                    		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetCounterValue
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_DUISetCounterValue : public USequenceAction
{
public:
	int                                                nValue;                                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bModalCounter : 1;                                		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetElementColor
// 0x0005 (0x00FD - 0x00F8)
class UBioSeqAct_DUISetElementColor : public USequenceAction
{
public:
	struct FColor                                      oColor;                                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Element;                                          		// 0x00FC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetElementPulsing
// 0x000D (0x0105 - 0x00F8)
class UBioSeqAct_DUISetElementPulsing : public USequenceAction
{
public:
	float                                              fMinAlpha;                                        		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCycleTime;                                       		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPulsing : 1;                                     		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      Element;                                          		// 0x0104 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetElementVisible
// 0x0009 (0x0101 - 0x00F8)
class UBioSeqAct_DUISetElementVisible : public USequenceAction
{
public:
	float                                              fFadeTime;                                        		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVisible : 1;                                     		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      Element;                                          		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetTextStringRef
// 0x0005 (0x00FD - 0x00F8)
class UBioSeqAct_DUISetTextStringRef : public USequenceAction
{
public:
	int                                                srText;                                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Element;                                          		// 0x00FC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_EndGame
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_EndGame : public USequenceAction
{
public:
	int                                                srEndGameMessage;                                 		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_FactionRelationShip
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_FactionRelationShip : public USequenceAction
{
public:
	class UObject*                                     Input1;                                           		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     Input2;                                           		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventPreVersionUpdated ( int OldVersion, int NewVersion );
	int eventGetObjClassVersion ( );
	void Activated ( );
	class ABioPawn* GetPawnFrom ( class UObject* oInObj );
};

// Class SFXGame.BioSeqAct_ForceActorMipsResident
// 0x0003 (0x00DC - 0x00D9)
class UBioSeqAct_ForceActorMipsResident : public USequenceOp
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ForceResourceLoad
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_ForceResourceLoad : public USequenceAction
{
public:
	struct TArray<class UObject*>                      ResourceArray;                                    		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_GetEquippedWeapon
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_GetEquippedWeapon : public USequenceAction
{
public:
	class AActor*                                      oPawn;                                            		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bZoomed : 1;                                      		// 0x0100 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXWeapon_AssaultRifle_Base
// 0x0003 (0x0974 - 0x0971)
class ASFXWeapon_AssaultRifle_Base : public ASFXWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ScaleWeapon ( int Level );
	float CalculateStaticBonus ( );
};

// Class SFXGame.SFXWeapon_HeavyPistol_Base
// 0x0003 (0x0974 - 0x0971)
class ASFXWeapon_HeavyPistol_Base : public ASFXWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ModifyDamage ( struct FVector HitLocation, class AActor* HitActor, float* BaseDamage );
};

// Class SFXGame.SFXWeapon_AutoPistol_Base
// 0x0003 (0x0974 - 0x0971)
class ASFXWeapon_AutoPistol_Base : public ASFXWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ScaleWeapon ( int Level );
	void ModifyDamage ( struct FVector HitLocation, class AActor* HitActor, float* BaseDamage );
};

// Class SFXGame.BioSeqAct_GetShieldPercentage
// 0x0015 (0x010D - 0x00F8)
class UBioSeqAct_GetShieldPercentage : public USequenceAction
{
public:
	class AActor*                                      m_oPawn;                                          		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fShieldPct;                                     		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              m_fShieldMax;                                     		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              m_fShieldCurrent;                                 		// 0x0108 (0x0004) [0x0000000000000000]              
	unsigned char                                      eType;                                            		// 0x010C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_GetSquad
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_GetSquad : public USequenceAction
{
public:
	class AActor*                                      oPawn;                                            		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oSquad;                                           		// 0x0100 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_GetSquadInfo
// 0x0020 (0x0118 - 0x00F8)
class UBioSeqAct_GetSquadInfo : public USequenceAction
{
public:
	class AActor*                                      m_oActor;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class APawn*                                       m_oSquadLeader;                                   		// 0x0100 (0x0008) [0x0000000000000000]              
	int                                                m_nSquadCount;                                    		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                m_nHackedCount;                                   		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                m_nHazardLevelMax;                                		// 0x0110 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIncludeDeadInCount : 1;                          		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bIsEmpty : 1;                                   		// 0x0114 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_HideSniperHudOverlay
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_HideSniperHudOverlay : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_HUDDisplayState
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_HUDDisplayState : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_InterruptAmbientConversation
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_InterruptAmbientConversation : public USequenceAction
{
public:
	class UBioConversation*                            IgnoreConversation;                               		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_IsActiveConversation
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_IsActiveConversation : public USequenceAction
{
public:
	class UBioConversation*                            Conversation;                                     		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_KillPawn
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_KillPawn : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_ModifyPropertyBaseSquad
// 0x0000 (0x0170 - 0x0170)
class UBioSeqAct_ModifyPropertyBaseSquad : public UBioSeqAct_ModifyProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_NearClipPlane
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_NearClipPlane : public USequenceAction
{
public:
	float                                              fValue;                                           		// 0x00F8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_Ragdoll
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_Ragdoll : public USequenceAction
{
public:
	class AActor*                                      mActor;                                           		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_RemoveFromParty
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_RemoveFromParty : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_RemovePlaypenVolume
// 0x0018 (0x0110 - 0x00F8)
class UBioSeqAct_RemovePlaypenVolume : public USequenceAction
{
public:
	struct TArray<class AActor*>                       Volumes;                                          		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      Squad;                                            		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_ResumeWalking
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_ResumeWalking : public USequenceAction
{
public:
	class ABioPawn*                                    m_oPawn;                                          		// 0x00F8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXAI_Ambient
// 0x001E (0x07AD - 0x078F)
class ASFXAI_Ambient : public ASFXAI_Core
{
public:
	class ASFXNav_WayPoint*                            m_oCurrentWaypoint;                               		// 0x0790 (0x0008) [0x0000000000000000]              
	struct FName                                       m_WaypointAnimName;                               		// 0x0798 (0x0008) [0x0000000000000000]              
	int                                                m_nWaypointIndex;                                 		// 0x07A0 (0x0004) [0x0000000000000000]              
	int                                                m_nWaypointBodyStance;                            		// 0x07A4 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bPaused : 1;                                    		// 0x07A8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bCountingUp : 1;                                		// 0x07A8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      m_eWalkOrder;                                     		// 0x07AC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PlayWaypointAnim ( struct FName AnimName, int eStance );
	void ResumeWalking ( );
	void MoveOnScriptedRoute ( class ARoute* oRoute, int nNearestWaypoint, unsigned long bWalking, unsigned char eWalkOrder, unsigned long bSkipNodes );
	int FindNearestRoutePoint ( struct FVector vLoc, class ARoute* oRoute );
	void SetMovementSpeed ( );
};

// Class SFXGame.BioSeqAct_ResurrectHenchman
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_ResurrectHenchman : public USequenceAction
{
public:
	float                                              PctHealthRegained;                                		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SelectWeapon
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_SelectWeapon : public USequenceAction
{
public:
	class UClass*                                      cWeapon;                                          		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    oPawn;                                            		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetActionState
// 0x0009 (0x0101 - 0x00F8)
class UBioSeqAct_SetActionState : public USequenceAction
{
public:
	class AActor*                                      m_oActor;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eActionState;                                   		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetActive
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_SetActive : public USequenceAction
{
public:
	unsigned long                                      bSetActive : 1;                                   		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetBase
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_SetBase : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetBoolGroup
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_SetBoolGroup : public USequenceAction
{
public:
	int                                                nBoolGroup;                                       		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nBoolID;                                          		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSetNotClear : 1;                                 		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_SetBrowserWheelAvailable
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_SetBrowserWheelAvailable : public USequenceAction
{
public:
	unsigned long                                      m_bMakeAvailable : 1;                             		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.SFXGameEffect_ResearchCostMultiplier
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_ResearchCostMultiplier : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.BioTimerList
// 0x0020 (0x0080 - 0x0060)
class UBioTimerList : public UObject
{
public:
	struct TArray<struct FBioTimer>                    lstTimers;                                        		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __BioTimerDelegate__Delegate;                     		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float fDeltaT );
	bool KillTimer ( struct FString i_sTimerName );
	void AddTimer ( struct FScriptDelegate TimerDelegate, class UObject* Params, float fTime, struct FString i_sTimerName );
	void BioTimerDelegate ( class UObject* Params );
};

// Class SFXGame.BioSeqAct_SetBrowserWheelStateOverrides
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_SetBrowserWheelStateOverrides : public USequenceAction
{
public:
	struct TArray<struct FSubPageState>                PageStates;                                       		// 0x00F8 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_SetCanWalkOffLedges
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_SetCanWalkOffLedges : public USequenceAction
{
public:
	class APawn*                                       m_oPawn;                                          		// 0x00F8 (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bCanWalkOffLedges : 1;                          		// 0x0100 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetExploreCameraRotation
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_SetExploreCameraRotation : public USequenceAction
{
public:
	class AActor*                                      oTarget;                                          		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceInstant : 1;                                		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
	bool eventIsCameraExploreMode ( class USFXCameraMode* pCameraMode );
};

// Class SFXGame.SFXCameraMode_Explore
// 0x0000 (0x0218 - 0x0218)
class USFXCameraMode_Explore : public USFXCameraMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Initialize ( class ABioPlayerController* PC );
};

// Class SFXGame.BioSeqAct_SetIsInCombat
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_SetIsInCombat : public USequenceAction
{
public:
	unsigned long                                      bInCombat : 1;                                    		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetLookAtTarget
// 0x0018 (0x0110 - 0x00F8)
class UBioSeqAct_SetLookAtTarget : public USequenceAction
{
public:
	struct TArray<class AActor*>                       Pawns;                                            		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      LookAtTarget;                                     		// 0x0108 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetPlotPartySize
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_SetPlotPartySize : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
	class ABioWorldInfo* getWorld ( );
};

// Class SFXGame.BioSeqAct_SetPowerCooldown
// 0x0014 (0x010C - 0x00F8)
class UBioSeqAct_SetPowerCooldown : public USequenceAction
{
public:
	class APawn*                                       m_oPawn;                                          		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmPower;                                        		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCooldownTimeRemaining;                         		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetRadarDisplay
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_SetRadarDisplay : public USequenceAction
{
public:
	class AActor*                                      m_oActor;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bDisabled : 1;                                  		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetSquadFaction
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_SetSquadFaction : public USequenceAction
{
public:
	class UClass*                                      NewSquadFaction;                                  		// 0x00F8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AActor*                                      m_oActor;                                         		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_ShowMessage
// 0x001F (0x012F - 0x0110)
class UBioSeqAct_ShowMessage : public UBioSequenceLatentAction
{
public:
	int                                                srText;                                           		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                srAButton;                                        		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                srBButton;                                        		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDisplayTime;                                     		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nIconIndex;                                       		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRemainingDisplayTime;                          		// 0x0124 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNoFade : 1;                                      		// 0x0128 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bFinished : 1;                                  		// 0x0128 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bAPressed : 1;                                  		// 0x0128 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bWasPaused : 1;                                 		// 0x0128 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned char                                      nIconSet;                                         		// 0x012C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_Skin;                                           		// 0x012D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_TextAlign;                                      		// 0x012E (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void MessageBoxUpdate ( float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox );
	void MessageInputPressed ( unsigned long bAPressed, int nContext );
	bool UpdateOp ( float fDeltaT );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_SwitchWeighted
// 0x0050 (0x0148 - 0x00F8)
class UBioSeqAct_SwitchWeighted : public USequenceAction
{
public:
	float                                              fWeight[ 0xA ];                                   		// 0x00F8 (0x0028) [0x0000000000000000]              
	float                                              fWeight0;                                         		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight1;                                         		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight2;                                         		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight3;                                         		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight4;                                         		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight5;                                         		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight6;                                         		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight7;                                         		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight8;                                         		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight9;                                         		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_TalkObjSelect
// 0x0040 (0x0138 - 0x00F8)
class UBioSeqAct_TalkObjSelect : public USequenceAction
{
public:
	class AActor*                                      oPlayer;                                          		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              f00_Vixen;                                        		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f01_Leading;                                      		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f02_Convict;                                      		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f03_Geth;                                         		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f04_Thief;                                        		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f05_Garrus;                                       		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f06_Assassin;                                     		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f07_Tali;                                         		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f08_Professor;                                    		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f09_Grunt;                                        		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f10_Mystic;                                       		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              f11_Veteran;                                      		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nHench1;                                          		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nHench2;                                          		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
	int GetHenchID ( struct FName Tag );
};

// Class SFXGame.BioSeqAct_ToggleCombat
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_ToggleCombat : public USequenceAction
{
public:
	unsigned long                                      m_bEnable : 1;                                    		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_ToggleSave
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_ToggleSave : public USequenceAction
{
public:
	int                                                srReason;                                         		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnable : 1;                                      		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqCond_Deprecated
// 0x0000 (0x00DC - 0x00DC)
class UBioSeqCond_Deprecated : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqCond_GetBoolGroup
// 0x0008 (0x00E4 - 0x00DC)
class UBioSeqCond_GetBoolGroup : public USequenceCondition
{
public:
	int                                                nBoolGroup;                                       		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nBoolID;                                          		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSeqCond_HasPlaypenVolume
// 0x0010 (0x00EC - 0x00DC)
class UBioSeqCond_HasPlaypenVolume : public USequenceCondition
{
public:
	class AActor*                                      Volume;                                           		// 0x00DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Squad;                                            		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqCond_InCombat
// 0x0000 (0x00DC - 0x00DC)
class UBioSeqCond_InCombat : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqEvt_AllActionsComplete
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_AllActionsComplete : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_Deprecated
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_Deprecated : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqEvt_EnterFollowFormation
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_EnterFollowFormation : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_EnterRestFormation
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_EnterRestFormation : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_NoLongerSeePlayer
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_NoLongerSeePlayer : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSFHandler_Achievement
// 0x0013 (0x00AC - 0x0099)
class UBioSFHandler_Achievement : public UBioSFHandler
{
public:
	int                                                m_nSelectedItemIndex;                             		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                m_nShiftItemIndex;                                		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                srEmpty;                                          		// 0x00A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bFromMainMenu : 1;                              		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void PopulateAchievementItemListEntry ( int nDisplayIndex, struct FAchievementData* Achievement );
	void PopulateAchievementItemList ( );
	void Init ( );
	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* lstArguments );
	void SetFromMainMenu ( );
	void OnPanelAdded ( );
};

// Class SFXGame.BioSFHandler_SharedIGG
// 0x0003 (0x009C - 0x0099)
class UBioSFHandler_SharedIGG : public UBioSFHandler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* lstArguments );
	void eventHandleInputEvent ( unsigned char Event, float fValue );
};

// Class SFXGame.BioSFHandler_CharacterRecord2
// 0x00BB (0x0154 - 0x0099)
class UBioSFHandler_CharacterRecord2 : public UBioSFHandler
{
public:
	struct TArray<float>                               m_ParagonRenegadeBarValues;                       		// 0x009C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<int>                                 m_SquadNames;                                     		// 0x00AC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UTexture*>                     m_SquadIcons;                                     		// 0x00BC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<int>                                 m_bPowerLockedStatus;                             		// 0x00CC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class ABioPawn*>                     m_SpawnedSquadMembersSource;                      		// 0x00DC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCloseCallback__Delegate;                      		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ABioWorldInfo*                               m_WorldInfo;                                      		// 0x00FC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXPowerLevelUpHelper*                      m_Helper;                                         		// 0x0104 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMaxRenegade;                                   		// 0x010C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nMaxParagon;                                    		// 0x0110 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_CurrentPawnIndex;                               		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fScrollValue;                                   		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_InitialHiddenTimer;                             		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_srXPFormat;                                     		// 0x0120 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srSpendTalentPointsMessageXBox;                 		// 0x0124 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srParagonRenegadeMessageXBox;                   		// 0x0128 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srSpendTalentPointsMessagePC;                   		// 0x012C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srParagonRenegadeMessagePC;                     		// 0x0130 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srSpendTalentPointsMessagePS3;                  		// 0x0134 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srParagonRenegadeMessagePS3;                    		// 0x0138 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srOk;                                           		// 0x013C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srShepardLevelClassFormat;                      		// 0x0140 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srTalentDescriptionFormat;                      		// 0x0144 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srRankDescriptionFormat;                        		// 0x0148 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srFaceCodeFormat;                               		// 0x014C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bCloseGUIButtonPressed : 1;                     		// 0x0150 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void AdditionalShutdownHandling ( );
	void CancelEvolution ( class USFXPower* OriginalPower );
	void EvolvePower ( class USFXPower* OriginalPower, class UClass* EvolvedPowerClass );
	void CancelChanges ( );
	void GetSquadMemberNamesAndIcons ( int* srCurrentMember, int* srPreviousMember, int* srNextMember, class UTexture** NextMemberIcon, class UTexture** PrevMemberIcon );
	bool GetExperienceProgress ( int* CurrentXP, int* TargetXP );
	void UpdatePoints ( );
	void UpdatePowerRanks ( int nPowerIndex );
	void UpdatePowerList ( );
	void CreatePowerList ( );
	float FloorEx ( float Value );
	void UpdateParagonRenegadeValues ( unsigned long bAnimate );
	void GetParagonRenegadePercentage ( class ASFXPawn_Player* PlayerPawn, float* ParagonPercent, float* RenegadePercent );
	void UpdateCharacterStats ( );
	void UpdateAll ( );
	void CleanupCharacter ( );
	void PurchasePowerRank ( int nPowerIndex );
	void AutoLevelUp ( );
	bool ChangeToCharacter ( class ABioPawn* NextCharacter );
	bool NextCharacter ( unsigned long bNext );
	bool InitializeCharacterRecord ( );
	void Callback_ClosedTalentMsgBox ( unsigned long bAPressed, int context );
	void OnPanelAdded ( );
	void OnPanelRemoved ( );
	void Update ( float fDeltaT );
	void ProcessRStickAxisInput ( float fValue );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* Parameters );
	void SetOnCloseCallback ( struct FScriptDelegate fn_OnCloseDelegate );
	void OnCloseCallback ( );
};

// Class SFXGame.BioSFHandler_Specialization
// 0x0043 (0x00DC - 0x0099)
class UBioSFHandler_Specialization : public UBioSFHandler
{
public:
	struct FScriptDelegate                             __EvolvePowerDelegate__Delegate;                  		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CancelEvolutionDelegate__Delegate;              		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXPower*                                   m_OriginalPower;                                  		// 0x00BC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXPower*                                   m_EvolvedPower1;                                  		// 0x00C4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXPower*                                   m_EvolvedPower2;                                  		// 0x00CC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_Description;                                    		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRScrollValue;                                  		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void CancelEvolution ( );
	void EvolvePower ( int nIndex );
	void UpdatePowerList ( );
	void Update ( float fDeltaT );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* Parameters );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	bool Initialize ( class ABioPawn* oPawn, struct FName nmPowerName );
	void CancelEvolutionDelegate ( class USFXPower* OriginalPower );
	void EvolvePowerDelegate ( class USFXPower* OriginalPower, class UClass* EvolvedPowerClass );
};

// Class SFXGame.BioSFHandler_IntroText
// 0x0007 (0x00A0 - 0x0099)
class UBioSFHandler_IntroText : public UBioSFHandler
{
public:
	int                                                srText;                                           		// 0x009C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* lstArguments );
};

// Class SFXGame.BioSFHandler_LoadScreen
// 0x0003 (0x009C - 0x0099)
class UBioSFHandler_LoadScreen : public UBioSFHandler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnPanelAdded ( );
	void OnPanelRemoved ( );
	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* lstArguments );
};

// Class SFXGame.BioSFHandler_PartySelection
// 0x007F (0x0118 - 0x0099)
class UBioSFHandler_PartySelection : public UBioSFHandler
{
public:
	struct TArray<struct FPartySelectMemberInfo>       lstMemberInfo;                                    		// 0x009C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FAdditionalAppearanceInfo>    lstAppearances;                                   		// 0x00AC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FPartySelectDynamicInfo>      lstDynamicInfo;                                   		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ExternalCallback_OnComplete__Delegate;          		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       nmFireTeamLeaderLabel;                            		// 0x00DC (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       nmSpecialistLabel;                                		// 0x00E4 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       m_nmMorinthPlotState;                             		// 0x00EC (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       nmForcedHenchman;                                 		// 0x00F4 (0x0008) [0x0000000000000000]              
	int                                                srPartyConfirm;                                   		// 0x00FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srPartyCancel;                                    		// 0x0100 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srPartyQuestion;                                  		// 0x0104 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nStrMorinthName;                                		// 0x0108 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nPartyMember1;                                  		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                m_nPartyMember2;                                  		// 0x0110 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bNoSelectMode : 1;                              		// 0x0114 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bSFScreenInitialized : 1;                       		// 0x0114 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ExitScreen ( );
	void FinalizeParty ( unsigned long bAPressed, int nContext );
	void ConfirmParty ( );
	void DoInitialization ( );
	void SendInfo ( int nChar );
	void SetInfo ( struct FName nmTag, class USFXPlayerSquadLoadoutData* oLoadout );
	void PlayConflict ( int nChar1, int nChar2 );
	void SetCharacterAppearance ( int nChar, int nAppearance );
	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* lstArguments );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	void ClearDelegates ( );
	void SetExternalCallback_OnComplete ( struct FScriptDelegate pDelegate );
	void ExternalCallback_OnComplete ( );
};

// Class SFXGame.BioSFHandler_SniperOverlay
// 0x0003 (0x009C - 0x0099)
class UBioSFHandler_SniperOverlay : public UBioSFHandler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetDistance ( int nDistance );
};

// Class SFXGame.SFXAreaMapData
// 0x0049 (0x00A9 - 0x0060)
class USFXAreaMapData : public UObject
{
public:
	struct FVector                                     RefPoint1_Image_Px;                               		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RefPoint1_Unreal_UU;                              		// 0x006C (0x000C) [0x0000000000000000]              
	struct FVector                                     RefPoint2_Image_Px;                               		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RefPoint2_Unreal_UU;                              		// 0x0084 (0x000C) [0x0000000000000000]              
	struct FVector                                     UUCoorAtPxOrigin;                                 		// 0x0090 (0x000C) [0x0000000000000000]              
	class UTexture2D*                                  MapAsset;                                         		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              PxPerUU;                                          		// 0x00A4 (0x0004) [0x0000000000000000]              
	unsigned char                                      MapLayout;                                        		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void GetPixelCoordinates ( float UU_X, float UU_Y, float* Px, float* Py );
	void ReCalculate ( );
	void GetUUCordAtPxOrigin ( float* UU_X, float* UU_Y );
	float GetPxPerUU ( );
};

// Class SFXGame.BioSFHandler_PCAchievement
// 0x0000 (0x00AC - 0x00AC)
class UBioSFHandler_PCAchievement : public UBioSFHandler_Achievement
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnPanelAdded ( );
};

// Class SFXGame.BioSFHandler_PCCharacterRecord2
// 0x0000 (0x0154 - 0x0154)
class UBioSFHandler_PCCharacterRecord2 : public UBioSFHandler_CharacterRecord2
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void eventOnPanelAdded ( );
};

// Class SFXGame.BioSFHandler_PCChoiceGUI
// 0x0000 (0x0120 - 0x0120)
class UBioSFHandler_PCChoiceGUI : public UBioSFHandler_ChoiceGUI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void ScrollText ( float fValue );
	void OnPanelAdded ( );
};

// Class SFXGame.SFXSFHandler_MultiAspectRatioConversation
// 0x0004 (0x0134 - 0x0130)
class USFXSFHandler_MultiAspectRatioConversation : public UBioSFHandler_Conversation
{
public:
	unsigned long                                      m_bEnforce16x9 : 1;                               		// 0x0130 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateAspectRatio_PanelAndSubtitles ( unsigned long bForceRecalculate );
	void Enforce16x9_PanelAndSubtitles ( );
	void UpdateEnforce16x9 ( unsigned long bVal );
	void Update ( float fDeltaT );
	void OnPanelAdded ( );
};

// Class SFXGame.BioSFHandler_PCConversation
// 0x0010 (0x0144 - 0x0134)
class UBioSFHandler_PCConversation : public USFXSFHandler_MultiAspectRatioConversation
{
public:
	struct FVector                                     vMouseInput;                                      		// 0x0134 (0x000C) [0x0000000000000000]              
	float                                              AccumulationDivisor;                              		// 0x0140 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void CalculateArrowPosition ( struct FASParams* stParam, struct TArray<struct FASParams>* lstParams );
	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void HighlightDefaultConvSegment ( );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void OnPanelAdded ( );
};

// Class SFXGame.BioSFHandler_PCCredits
// 0x0000 (0x00FC - 0x00FC)
class UBioSFHandler_PCCredits : public UBioSFHandler_Credits
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void HandleInputEvent ( unsigned char Event, float fValue );
};

// Class SFXGame.BioSFHandler_PCDataCodex
// 0x0000 (0x010C - 0x010C)
class UBioSFHandler_PCDataCodex : public UBioSFHandler_DataCodex
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void OnPanelAdded ( );
};

// Class SFXGame.BioSFHandler_PCDesignerUI
// 0x0000 (0x0138 - 0x0138)
class UBioSFHandler_PCDesignerUI : public UBioSFHandler_DesignerUI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSFHandler_PCGameOver
// 0x0000 (0x00B0 - 0x00B0)
class UBioSFHandler_PCGameOver : public UBioSFHandler_GameOver
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void OnPanelAdded ( );
};

// Class SFXGame.BioSFHandler_PCJournal
// 0x0000 (0x00DC - 0x00DC)
class UBioSFHandler_PCJournal : public UBioSFHandler_Journal
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void OnPanelAdded ( );
};

// Class SFXGame.SFXCameraMode_Interpolate
// 0x005D (0x0275 - 0x0218)
class USFXCameraMode_Interpolate : public USFXCameraMode
{
public:
	struct FInterpCurveFloat                           Curve;                                            		// 0x0218 (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     AimPoint;                                         		// 0x022C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotationOffset;                                   		// 0x0238 (0x000C) [0x0000000000000000]              
	struct FVector                                     LocationOffset;                                   		// 0x0244 (0x000C) [0x0000000000000000]              
	class USFXCameraMode*                              From;                                             		// 0x0250 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USFXCameraMode*                              To;                                               		// 0x0258 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TotalTime;                                        		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentTime;                                      		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultTime;                                      		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AimPointDistance;                                 		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bComplete : 1;                                    		// 0x0270 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableAimPointPreservation : 1;                 		// 0x0270 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned char                                      InterpMethod;                                     		// 0x0274 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FRotator GetCurrentShake ( );
	void Tick ( float TimeDelta );
	void Trace ( class AActor** HitActor, struct FVector* HitLocation );
	void InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget );
	bool CheckLoop ( class USFXCameraMode* Mode, int RecurseLevel );
	float Interpolate ( float T );
};

// Class SFXGame.SFXGameModePhoto
// 0x01C9 (0x0296 - 0x00CD)
class USFXGameModePhoto : public USFXGameModeBase
{
public:
	struct FPostProcessSettings                        PostProcessSettings;                              		// 0x00D0 (0x00E0) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpCurveFloat                           ButtonCooldownCurve;                              		// 0x01B0 (0x0014) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FCachedActorState>            CachedPlayer;                                     		// 0x01C4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FCachedActorState>            CachedParty;                                      		// 0x01D4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FCachedActorState>            CachedEnemies;                                    		// 0x01E4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FCachedActorState>            CachedVehicles;                                   		// 0x01F4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FCachedActorState>            CachedNPCs;                                       		// 0x0204 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FString>                      CharacterMeshFilter;                              		// 0x0214 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FString>                      FilterMaterialPaths;                              		// 0x0224 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<class UMaterialEffect*>              FilterEffects;                                    		// 0x0234 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<float>                               ButtonPressTimes;                                 		// 0x0244 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UWwiseEvent*                                 TakePhotoSound;                                   		// 0x0254 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USFXCameraMode_PhotoFree*                    PhotoCamFree;                                     		// 0x025C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_PhotoOrbit*                   PhotoCamOrbit;                                    		// 0x0264 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraTransition_GalaxyMap*              InstantTransition;                                		// 0x026C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UMaterialEffect*                             ME_ScreenEffect;                                  		// 0x0274 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              CamTransitionTime;                                		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultPP_DOF_Radius;                             		// 0x0280 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DefaultPP_DOF_FalloffExponent;                    		// 0x0284 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DefaultPP_DOF_BlurKernelSize;                     		// 0x0288 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DefaultPP_DOF_BlurBloomKernelSize;                		// 0x028C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseOrbitCam : 1;                                 		// 0x0290 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bOldAllowFilmGrain : 1;                           		// 0x0290 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bPlayerHidden : 1;                                		// 0x0290 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bPartyHidden : 1;                                 		// 0x0290 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bEnemiesHidden : 1;                               		// 0x0290 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bVehiclesHidden : 1;                              		// 0x0290 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bNPCsHidden : 1;                                  		// 0x0290 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bOldConvInputDisabled : 1;                        		// 0x0290 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bOldConvHandleInputThisFrame : 1;                 		// 0x0290 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned char                                      bOldIgnoreMoveInput;                              		// 0x0294 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bOldIgnoreLookInput;                              		// 0x0295 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void TakePhoto ( );
	void DisableCamera ( );
	void EnableCamera ( );
	void ToggleOptions ( );
	void ShowMenu ( );
	void GuiKey ( unsigned char Event );
	void HideAttachedActors ( struct TArray<struct FCachedActorState>* InHiddenActors );
	void SetVehicleHidden ( unsigned long bValue );
	void SetNPCsHidden ( unsigned long bValue );
	bool HasCharacterMesh ( class AActor* TestActor );
	void SetEnemiesHidden ( unsigned long bValue );
	void SetPartyHidden ( unsigned long bValue );
	void SetPlayerHidden ( unsigned long bValue );
	void SetVignetteEnabled ( unsigned long bValue );
	void SetFilmGrainStrength ( float Value );
	void SetFilmGrainEnabled ( unsigned long bValue );
	void SetBloomThreshold ( float Value );
	void SetBloomIntensity ( float Value );
	void SetEffectFilter ( int Value );
	void SetContrast ( float Value );
	void SetBrightness ( float Value );
	void SetSaturation ( float Value );
	void SetDOFIntensity ( float Value );
	void SetDOFFStop ( float Value );
	void SetDOFDistance ( float Value );
	void SetDOFEnabled ( unsigned long bValue );
	void SetCameraFOV ( float NewFOV );
	void SetCameraRoll ( float NewRoll );
	void SetOrbitCam ( unsigned long bValue );
	void ModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
	void ResetFilters ( );
	void InitializeFilters ( );
	void InitializePostProcessSettings ( );
	void Deactivated ( );
	void Activated ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

// Class SFXGame.SFXGameModeDefault
// 0x00EF (0x01BC - 0x00CD)
class USFXGameModeDefault : public USFXGameModeBase
{
public:
	struct FInterpCurveFloat                           ZoomSnapCurve;                                    		// 0x00D0 (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UWwiseEvent*                                 UseSucceeded;                                     		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 UseFailed;                                        		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USFXCameraMode_Combat*                       CombatCam;                                        		// 0x00F4 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_Explore*                      ExploreCam;                                       		// 0x00FC (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_CombatStorm*                  CombatStormCam;                                   		// 0x0104 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_ExploreStorm*                 ExploreStormCam;                                  		// 0x010C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_TightAim*                     TightAimCam;                                      		// 0x0114 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_SniperZoom*                   SniperZoomCam;                                    		// 0x011C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_TightAimCover*                TightAimCoverCam;                                 		// 0x0124 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_TightAimCover*                TightAimCoverPopupCam;                            		// 0x012C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_SniperZoomCover*              SniperZoomCoverCam;                               		// 0x0134 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_Cover*                        AimBackCam;                                       		// 0x013C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_Cover*                        CoverStand;                                       		// 0x0144 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_Cover*                        CoverCrouch;                                      		// 0x014C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_CoverFixed*                   CoverPeekLeftStand;                               		// 0x0154 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_CoverFixed*                   CoverPeekLeftCrouch;                              		// 0x015C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_CoverFixed*                   CoverPeekRightStand;                              		// 0x0164 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_CoverFixed*                   CoverPeekRightCrouch;                             		// 0x016C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_SniperZoomCover*              SniperZoomCover_AimBack;                          		// 0x0174 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_TightAimCover*                TightAimCover_AimBack;                            		// 0x017C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraTransition_ZoomSnap*               ZoomSnapTransition;                               		// 0x0184 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              InputDelayStormExit;                              		// 0x018C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              InputDelayTightAimExit;                           		// 0x0190 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RadarMapDisplayTime;                              		// 0x0194 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SprintTransitionTime;                             		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SprintFastTransitionTime;                         		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultAimTransitionTime;                         		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultAimTransitionExit;                         		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultCombatTransitionTime;                      		// 0x01A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoverEnter;                                       		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoverTransitionTime;                              		// 0x01B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoverSlowTransitionTime;                          		// 0x01B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SniperZoomTransitionTime;                         		// 0x01B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SwitchToBackup ( );
	bool ShowAreaMap ( );
	void TryUsePower ( int Power );
	void TurnStormOff ( );
	void StormOff ( );
	void StormOn ( );
	void NextWeapon ( );
	void PrevWeapon ( );
	void TrySwapWeapon ( );
	void ResetSelectionMaterialParams ( );
	bool Used ( );
	void TryHolster ( );
	void TryHeavyMelee ( );
	void TryMelee ( );
	void TryReload ( );
	void DisableWalking ( );
	void EnableWalking ( );
	bool TryExitCover ( unsigned long bForceExit );
	void UseAbility ( int Ability );
	void EnterCommandMenu ( );
	void EnterWeaponWheel ( );
	void EnterPowerWheel ( );
	void TurnOffTightAim ( );
	void StopTightAim ( );
	void TightAim ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	void Initialize ( );
};

// Class SFXGame.SFXGameModePowerWheel
// 0x0007 (0x00D4 - 0x00CD)
class USFXGameModePowerWheel : public USFXGameModeBase
{
public:
	float                                              DisableMoveTime;                                  		// 0x00D0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ShowMenu ( );
	void ExitPowerWheel ( );
	void EnableMovement ( );
	void Deactivated ( );
	void Activated ( );
};

// Class SFXGame.SFXGameModeWeaponWheel
// 0x0007 (0x00D4 - 0x00CD)
class USFXGameModeWeaponWheel : public USFXGameModeBase
{
public:
	float                                              DisableMoveTime;                                  		// 0x00D0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ShowMenu ( );
	void ExitWeaponWheel ( );
	void EnableMovement ( );
	void Deactivated ( );
	void Activated ( );
};

// Class SFXGame.SFXGameModeCommand
// 0x0007 (0x00D4 - 0x00CD)
class USFXGameModeCommand : public USFXGameModeBase
{
public:
	unsigned long                                      bCameraEnabled : 1;                               		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ShowMenu ( );
	void ExitCommandMenu ( );
	void DisableCamera ( );
	void EnableCamera ( );
	void Deactivated ( );
	void Activated ( );
};

// Class SFXGame.SFXGameModeVehicle
// 0x000B (0x00D8 - 0x00CD)
class USFXGameModeVehicle : public USFXGameModeBase
{
public:
	class USFXCameraMode_Vehicle*                      VehicleCam;                                       		// 0x00D0 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ShowMenu ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	void Initialize ( );
};

// Class SFXGame.SFXGameModeConversation
// 0x0013 (0x00E0 - 0x00CD)
class USFXGameModeConversation : public USFXGameModeBase
{
public:
	class UBioCameraBehaviorConversation*              ConversationCam;                                  		// 0x00D0 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraTransition_GalaxyMap*              InstantTransition;                                		// 0x00D8 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void HighlightDefaultResponse ( );
	void SkipConversation ( );
	void SelectResponse ( );
	void InterruptParagon ( );
	void InterruptRenegade ( );
	void Deactivated ( );
	void Activated ( );
	class USFXCameraMode* HACK_GetCameraMode ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

// Class SFXGame.SFXGameModeCinematic
// 0x0003 (0x00D0 - 0x00CD)
class USFXGameModeCinematic : public USFXGameModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SkipCinematic ( );
	void Deactivated ( );
	void Activated ( );
};

// Class SFXGame.SFXGameModeGUI
// 0x0023 (0x00F0 - 0x00CD)
class USFXGameModeGUI : public USFXGameModeBase
{
public:
	struct TArray<struct FName>                        StackedGuis;                                      		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioCameraBehaviorFlourish*                  DeathCam;                                         		// 0x00E0 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraTransition_GalaxyMap*              InstantTransition;                                		// 0x00E8 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void TryEnterPhotoMode ( );
	void SlideshowExit ( );
	void SlideshowAdvance ( unsigned long bForward );
	class USFXSFHandler_Slideshow* GetSlideshowHandler ( );
	bool HideAreaMap ( );
	void DecryptSelect ( );
	void DecryptRight ( );
	void DecryptLeft ( );
	void DecryptDown ( );
	void DecryptUp ( );
	void PrevCerberusItem ( );
	void NextCerberusItem ( );
	void DeactivateSpecifier ( struct FName ModeSpecifier );
	void ActivateSpecifier ( struct FName ModeSpecifier );
	void Deactivated ( );
	void Activated ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

// Class SFXGame.SFXGameModeMovie
// 0x0007 (0x00D4 - 0x00CD)
class USFXGameModeMovie : public USFXGameModeBase
{
public:
	unsigned long                                      bLoadingMovie : 1;                                		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SkipMovie ( );
	void Deactivated ( );
	void ActivateSpecifier ( struct FName ModeSpecifier );
};

// Class SFXGame.SFXGameModeCheatMenu
// 0x0003 (0x00D0 - 0x00CD)
class USFXGameModeCheatMenu : public USFXGameModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void IPEDownAction ( );
	void IPEUpAction ( );
	void IPELeftTrigger ( );
	void IPERightTrigger ( );
	void IPELeftShoulder ( );
	void IPERightShoulder ( );
	void EndIPE ( );
	void IPEBack ( );
	void IPEForward ( );
};

// Class SFXGame.BioSFHandler_PCPartySelection
// 0x0000 (0x0118 - 0x0118)
class UBioSFHandler_PCPartySelection : public UBioSFHandler_PartySelection
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void eventUpdate ( float fDeltaT );
	void OnPanelAdded ( );
};

// Class SFXGame.BioSFHandler_PCSpecialization
// 0x0000 (0x00DC - 0x00DC)
class UBioSFHandler_PCSpecialization : public UBioSFHandler_Specialization
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void OnPanelAdded ( );
};

// Class SFXGame.BioSFHandler_SelectCharacter
// 0x0003 (0x009C - 0x0099)
class UBioSFHandler_SelectCharacter : public UBioSFHandler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateCharacterData ( );
	bool DoCharactersExist ( );
	void HandleEvent ( unsigned char nCommand, struct TArray<struct FString>* lstArguments );
};

// Class SFXGame.BioSkillGame_Bypass_PCHandler
// 0x0000 (0x012C - 0x012C)
class UBioSkillGame_Bypass_PCHandler : public UBioSkillGame_Bypass_Handler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void OnPanelAdded ( );
};

// Class SFXGame.BioSkillGame_Decryption_PCHandler
// 0x0000 (0x0114 - 0x0114)
class UBioSkillGame_Decryption_PCHandler : public UBioSkillGame_Decryption_Handler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void OnPanelAdded ( );
};

// Class SFXGame.BioSkillMap
// 0x0014 (0x0074 - 0x0060)
class UBioSkillMap : public UObject
{
public:
	struct TArray<struct FName>                        SkillToStateMap;                                  		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bClosedIsSkillState : 1;                        		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsSkillInMap ( struct FName Skill );
	struct FName GetSkill ( int Num );
};

// Class SFXGame.BioSkillMap_Door
// 0x0000 (0x0074 - 0x0074)
class UBioSkillMap_Door : public UBioSkillMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSkillMap_Test
// 0x0000 (0x0074 - 0x0074)
class UBioSkillMap_Test : public UBioSkillMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSpectator
// 0x001C (0x0088 - 0x006C)
class UBioSpectator : public UBioBaseComponent
{
public:
	struct TArray<class UBioSpectatorMode*>            m_modes;                                          		// 0x006C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ABioWorldInfo*                               m_WorldInfo;                                      		// 0x007C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nSelectedMode;                                  		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void NextMode ( );
	void PrevMode ( );
	void InitializeModes ( class ABioWorldInfo* WorldInfo );
};

// Class SFXGame.BioSpectatorMode
// 0x003C (0x00A8 - 0x006C)
class UBioSpectatorMode : public UBioBaseComponent
{
public:
	struct FString                                     m_desc;                                           		// 0x006C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FString>                      m_options;                                        		// 0x007C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FString>                      m_subOptions;                                     		// 0x008C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m_nCurrentLevel;                                  		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nSelectedOption;                                		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nSelectedSubOption;                             		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void NextOption ( );
	void PrevOption ( );
	struct FString GetBelowOptionText ( int Level );
	struct FString GetSelectedOptionText ( int Level );
	struct FString GetAboveOptionText ( int Level );
	void DeactivateOption ( class ABioWorldInfo* WorldInfo );
	void ActivateOption ( class ABioWorldInfo* WorldInfo );
	void InitializeOptions ( class ABioWorldInfo* WorldInfo );
};

// Class SFXGame.BioSpectatorModeState
// 0x0000 (0x00A8 - 0x00A8)
class UBioSpectatorModeState : public UBioSpectatorMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ActivateOption ( class ABioWorldInfo* WorldInfo );
	void InitializeOptions ( class ABioWorldInfo* WorldInfo );
};

// Class SFXGame.BioSpectatorModeAnim
// 0x0000 (0x00A8 - 0x00A8)
class UBioSpectatorModeAnim : public UBioSpectatorMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ActivateOption ( class ABioWorldInfo* WorldInfo );
	void InitializeOptions ( class ABioWorldInfo* WorldInfo );
};

// Class SFXGame.BioSpectatorModeAnimSpeed
// 0x0000 (0x00A8 - 0x00A8)
class UBioSpectatorModeAnimSpeed : public UBioSpectatorMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ActivateOption ( class ABioWorldInfo* WorldInfo );
	void InitializeOptions ( class ABioWorldInfo* WorldInfo );
};

// Class SFXGame.BioSpectatorModeLOD
// 0x0000 (0x00A8 - 0x00A8)
class UBioSpectatorModeLOD : public UBioSpectatorMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ActivateOption ( class ABioWorldInfo* WorldInfo );
	void InitializeOptions ( class ABioWorldInfo* WorldInfo );
};

// Class SFXGame.BioStartPoint
// 0x0000 (0x038C - 0x038C)
class ABioStartPoint : public ANavigationPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioStartLocation
// 0x0002 (0x028C - 0x028A)
class ABioStartLocation : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_PassiveHeadShotBonus
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_PassiveHeadShotBonus : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_NonCoverDamageResistBonus
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_NonCoverDamageResistBonus : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_DamageImmunity
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_DamageImmunity : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
};

// Class SFXGame.SFXSeqEvt_CombatStarted
// 0x0002 (0x0128 - 0x0126)
class USFXSeqEvt_CombatStarted : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.SFXSeqEvt_CombatEnded
// 0x0002 (0x0128 - 0x0126)
class USFXSeqEvt_CombatEnded : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioTempNavPoint
// 0x0000 (0x038C - 0x038C)
class ABioTempNavPoint : public ANavigationPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioTimedActivity
// 0x0010 (0x009C - 0x008C)
class UBioTimedActivity : public UBioBaseActivity
{
public:
	struct TArray<struct FTwitchRec>                   m_aTwitchAnims;                                   		// 0x008C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioTrigger
// 0x0004 (0x02A0 - 0x029C)
class ABioTrigger : public ATrigger
{
public:
	unsigned long                                      Enabled : 1;                                      		// 0x029C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      OneShot : 1;                                      		// 0x029C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

// Class SFXGame.BioTriggerActorFactory
// 0x0000 (0x008C - 0x008C)
class UBioTriggerActorFactory : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioTriggerVolume
// 0x0004 (0x02D0 - 0x02CC)
class ABioTriggerVolume : public ATriggerVolume
{
public:
	unsigned long                                      Enabled : 1;                                      		// 0x02CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      OneShot : 1;                                      		// 0x02CC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

// Class SFXGame.BioWaypointSetFactory
// 0x0000 (0x008C - 0x008C)
class UBioWaypointSetFactory : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWorldInfoTick
// 0x0002 (0x028C - 0x028A)
class ABioWorldInfoTick : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float fDeltaT );
};

// Class SFXGame.BioWp_Kismet
// 0x0000 (0x0390 - 0x0390)
class ABioWp_Kismet : public ABioPathPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool OnCreatureReachedWayPoint ( class APawn* PathFindingCreature );
};

// Class SFXGame.DynamicCylindricalForceActor
// 0x0000 (0x02C0 - 0x02C0)
class ADynamicCylindricalForceActor : public ARB_CylindricalForceActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXActorFactoryPhysicsAsset
// 0x0000 (0x00B8 - 0x00B8)
class USFXActorFactoryPhysicsAsset : public UActorFactoryPhysicsAsset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXKAssetSpawnable
// 0x0000 (0x02B4 - 0x02B4)
class ASFXKAssetSpawnable : public ASFXKAsset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXNav_WayPoint
// 0x000C (0x0398 - 0x038C)
class ASFXNav_WayPoint : public ANavigationPoint
{
public:
	float                                              m_fDelay;                                         		// 0x038C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMoveOffset;                                    		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bPrecisionMovement : 1;                         		// 0x0394 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bMaintainVelocity : 1;                          		// 0x0394 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool OnPawnReachedWayPoint ( class APawn* oPawn );
};

// Class SFXGame.SFXAI_CombatScripted
// 0x0001 (0x0790 - 0x078F)
class ASFXAI_CombatScripted : public ASFXAI_Core
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SwitchWeapon ( class ASFXWeapon* oWpn );
	void MoveToGoalExternal ( class AActor* NewMoveGoal, float NewMoveOffset, struct FScriptDelegate MoveDelegate );
	void FireWeaponAtTarget ( class AActor* oTarget, unsigned long bCheckLOS, struct FScriptDelegate FireDelegate );
	void UsePowerOnTarget ( struct FName nmPowerToUse, class AActor* oTarget, struct FScriptDelegate PowerDelegate, unsigned long bIgnoreSuppression );
};

// Class SFXGame.SFXAI_Critter
// 0x001D (0x07AC - 0x078F)
class ASFXAI_Critter : public ASFXAI_Core
{
public:
	struct FVector                                     m_vRepulsor;                                      		// 0x0790 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vCurrentSteeringDirection;                      		// 0x079C (0x000C) [0x0000000000000000]              
	unsigned long                                      m_bUnderAttack : 1;                               		// 0x07A8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Initialize ( );
};

// Class SFXGame.SFXAI_Humanoid
// 0x000A (0x0799 - 0x078F)
class ASFXAI_Humanoid : public ASFXAI_Core
{
public:
	int                                                m_nInvalidatedCoverRetries;                       		// 0x0790 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCoverMoveCount;                                		// 0x0794 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_eCurrentBehaviour;                              		// 0x0798 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void NotifyUnderAttack ( unsigned long bHit );
	bool SetDefaultBehaviour ( struct FName NewBehaviour );
};

// Class SFXGame.SFXCustomAction_Freezing
// 0x0013 (0x00F0 - 0x00DD)
class USFXCustomAction_Freezing : public USFXCustomAction_DamageReaction
{
public:
	struct TArray<struct FBodyStance>                  BodyStances;                                      		// 0x00E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void StartCustomAction ( );
};

// Class SFXGame.SFXCustomAction_Headshot
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_Headshot : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void StartCustomAction ( );
};

// Class SFXGame.SFXCustomAction_GreatPain
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_GreatPain : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_Staggering
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_Staggering : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_Reave
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_Reave : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_HitLeftLeg
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_HitLeftLeg : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_HitRightLeg
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_HitRightLeg : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_CorkscrewDeath
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_CorkscrewDeath : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_ExplosionDeath
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_ExplosionDeath : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_LeftArmDeath
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_LeftArmDeath : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_RightArmDeath
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_RightArmDeath : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_StomachDeath
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_StomachDeath : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_OnFire
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_OnFire : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_TakeAKnee
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_TakeAKnee : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_StaggerImpact
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_StaggerImpact : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_StandardImpact
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_StandardImpact : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_ShieldKnockback
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_ShieldKnockback : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_ShieldStaggerImpact
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_ShieldStaggerImpact : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_ShieldStandardImpact
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_ShieldStandardImpact : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_NeuralShock
// 0x0017 (0x00F4 - 0x00DD)
class USFXCustomAction_NeuralShock : public USFXCustomAction_DamageReaction
{
public:
	struct FName                                       GameEffectCategory;                               		// 0x00E0 (0x0008) [0x0000000000000000]              
	struct FName                                       PowerName;                                        		// 0x00E8 (0x0008) [0x0000000000000000]              
	float                                              RagdollDuration;                                  		// 0x00F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
};

// Class SFXGame.SFXCustomAction_PlayerShortStagger
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_PlayerShortStagger : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_StumbleForward
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_StumbleForward : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_GreatPainII
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_GreatPainII : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_KnockbackII
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_KnockbackII : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_PunchDeathKnockback
// 0x0007 (0x00E4 - 0x00DD)
class USFXCustomAction_PunchDeathKnockback : public USFXCustomAction_DamageReaction
{
public:
	float                                              RagdollDuration;                                  		// 0x00E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
};

// Class SFXGame.SFXCustomAction_ExplosiveKnockback
// 0x0007 (0x00E4 - 0x00DD)
class USFXCustomAction_ExplosiveKnockback : public USFXCustomAction_DamageReaction
{
public:
	float                                              RagdollDuration;                                  		// 0x00E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
};

// Class SFXGame.SFXCustomAction_OnFireShort
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_OnFireShort : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXAI_TechDrone
// 0x0001 (0x0790 - 0x078F)
class ASFXAI_TechDrone : public ASFXAI_Core
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ClearForcedTarget ( );
	void Initialize ( );
};

// Class SFXGame.SFXAI_TechDrone_NPC
// 0x0005 (0x0794 - 0x078F)
class ASFXAI_TechDrone_NPC : public ASFXAI_Core
{
public:
	unsigned long                                      bHasHowled : 1;                                   		// 0x0790 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHasFlanked : 1;                                  		// 0x0790 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bHasTaunted : 1;                                  		// 0x0790 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bHasWarned : 1;                                   		// 0x0790 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetMovementSpeed ( );
};

// Class SFXGame.SFXAI_Vanguard
// 0x0011 (0x07A0 - 0x078F)
class ASFXAI_Vanguard : public ASFXAI_Core
{
public:
	int                                                m_nInvalidatedCoverRetries;                       		// 0x0790 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCoverMoveCount;                                		// 0x0794 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fAggressiveTime;                                		// 0x0798 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bApproachTarget : 1;                            		// 0x079C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bCheckLOSBeforeStop : 1;                        		// 0x079C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHasHowled : 1;                                   		// 0x079C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bFarHowled : 1;                                   		// 0x079C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bApproachEnemy : 1;                             		// 0x079C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetMovementSpeed ( );
	void AdvanceOnEnemy ( );
	void AdvanceTimer ( );
	void NotifyUnderAttack ( unsigned long bHit );
};

// Class SFXGame.SFXAmmoContainer
// 0x000C (0x02E8 - 0x02DC)
class ASFXAmmoContainer : public ASFXDroppedAmmo
{
public:
	float                                              RespawnTime;                                      		// 0x02DC (0x0004) [0x0000000000000000]              
	float                                              BonusAmmo;                                        		// 0x02E0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bRespawns : 1;                                    		// 0x02E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void GiveTo ( class APawn* P );
	void StartSleeping ( );
	void SetRespawn ( );
	void eventSetInitialState ( );
};

// Class SFXGame.SFXAnimNotify_DisableProcEyeBlink
// 0x0000 (0x0060 - 0x0060)
class USFXAnimNotify_DisableProcEyeBlink : public UAnimNotify_Scripted
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Notify ( class AActor* Owner, class UAnimNodeSequence* Sequence );
};

// Class SFXGame.SFXAnimNotify_EnableProcEyeBlink
// 0x0000 (0x0060 - 0x0060)
class USFXAnimNotify_EnableProcEyeBlink : public UAnimNotify_Scripted
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_ArmorBonus
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_ArmorBonus : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXArmor_Medium
// 0x0000 (0x0344 - 0x0344)
class ASFXArmor_Medium : public ASFXArmor_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXArmor_Player
// 0x0000 (0x0344 - 0x0344)
class ASFXArmor_Player : public ASFXArmor_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCameraAction_QuickTurn
// 0x0007 (0x027C - 0x0275)
class USFXCameraAction_QuickTurn : public USFXCameraMode_Interpolate
{
public:
	int                                                CurrentOffsetApplied;                             		// 0x0278 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
	void InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget );
};

// Class SFXGame.SFXCameraMode_Combat
// 0x0000 (0x0218 - 0x0218)
class USFXCameraMode_Combat : public USFXCameraMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCameraMode_CombatStorm
// 0x0008 (0x0220 - 0x0218)
class USFXCameraMode_CombatStorm : public USFXCameraMode_Combat
{
public:
	class UMotionBlurEffect*                           Blur;                                             		// 0x0218 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void MakeInactive ( );
	void MakeActive ( );
};

// Class SFXGame.SFXCameraMode_Cover
// 0x0000 (0x0218 - 0x0218)
class USFXCameraMode_Cover : public USFXCameraMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float fTimeDelta );
};

// Class SFXGame.SFXCameraMode_CoverFixed
// 0x0000 (0x0218 - 0x0218)
class USFXCameraMode_CoverFixed : public USFXCameraMode_Cover
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FVector GetCameraLocation ( );
	struct FVector GetCollisionCameraHook ( );
	bool Hack_IsViable ( );
};

// Class SFXGame.SFXCameraMode_ExploreStorm
// 0x0000 (0x0218 - 0x0218)
class USFXCameraMode_ExploreStorm : public USFXCameraMode_Explore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCameraMode_PhotoFree
// 0x0000 (0x0250 - 0x0250)
class USFXCameraMode_PhotoFree : public USFXCameraMode_Photo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float DeltaTime );
	void Initialize ( class ABioPlayerController* NewOwner );
};

// Class SFXGame.SFXCameraMode_SniperZoom
// 0x0008 (0x0220 - 0x0218)
class USFXCameraMode_SniperZoom : public USFXCameraMode
{
public:
	class UBioCameraZoom*                              ZoomData;                                         		// 0x0218 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
	void DoCameraCollision ( class AActor* A, struct FVector* V, struct FRotator* R );
	void ModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
};

// Class SFXGame.SFXSeqEvt_LeaveWorld
// 0x0002 (0x0128 - 0x0126)
class USFXSeqEvt_LeaveWorld : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_TimeDilation
// 0x001B (0x00AC - 0x0091)
class USFXGameEffect_TimeDilation : public USFXGameEffect
{
public:
	struct FInterpCurveFloat                           SlowDown;                                         		// 0x0094 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              TimeRemainingBeforePause;                         		// 0x00A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnUnpaused ( );
	void OnPaused ( );
	void OnRemoved ( );
	void OnUpdate ( float TimeDelta );
	void OnApplied ( );
};

// Class SFXGame.SFXCameraMode_TightAim
// 0x0000 (0x0218 - 0x0218)
class USFXCameraMode_TightAim : public USFXCameraMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
};

// Class SFXGame.SFXCameraMode_TightAimCover
// 0x00CC (0x02E4 - 0x0218)
class USFXCameraMode_TightAimCover : public USFXCameraMode_TightAim
{
public:
	struct FVector                                     PosOffset[ 0x6 ];                                 		// 0x0218 (0x0048) [0x0000000000000000]              
	struct FVector                                     PosHookOffset[ 0x6 ];                             		// 0x0260 (0x0048) [0x0000000000000000]              
	struct FName                                       PosHookName[ 0x6 ];                               		// 0x02A8 (0x0030) [0x0000000000000000]              
	struct FVector                                     LastPosition;                                     		// 0x02D8 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
	struct FVector GetCameraLocation ( );
	void SetPosition ( unsigned char pos );
};

// Class SFXGame.SFXCameraTransition_ZoomSnap
// 0x0027 (0x029C - 0x0275)
class USFXCameraTransition_ZoomSnap : public USFXCameraMode_Interpolate
{
public:
	struct FVector                                     ZoomSnapTargetLocation;                           		// 0x0278 (0x000C) [0x0000000000000000]              
	struct FRotator                                    StartRotation;                                    		// 0x0284 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartLocation;                                    		// 0x0290 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
	void MakeInactive ( );
	void InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget );
};

// Class SFXGame.SFXCameraMode_SniperZoomCover
// 0x00CC (0x02EC - 0x0220)
class USFXCameraMode_SniperZoomCover : public USFXCameraMode_SniperZoom
{
public:
	struct FVector                                     PosOffset[ 0x6 ];                                 		// 0x0220 (0x0048) [0x0000000000000000]              
	struct FVector                                     PosHookOffset[ 0x6 ];                             		// 0x0268 (0x0048) [0x0000000000000000]              
	struct FName                                       PosHookName[ 0x6 ];                               		// 0x02B0 (0x0030) [0x0000000000000000]              
	struct FVector                                     LastPosition;                                     		// 0x02E0 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FVector GetCameraLocation ( );
	void SetPosition ( unsigned char pos );
};

// Class SFXGame.SFXCameraMode_Vehicle
// 0x0054 (0x026C - 0x0218)
class USFXCameraMode_Vehicle : public USFXCameraMode
{
public:
	struct FVector                                     RegularCameraHookOffset;                          		// 0x0218 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     AlternateCameraHookOffset;                        		// 0x0224 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     ElasticPosition;                                  		// 0x0230 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     HookLocation;                                     		// 0x023C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UMotionBlurEffect*                           Blur;                                             		// 0x0248 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              ArcRadius;                                        		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RegularCameraArcRadius;                           		// 0x0254 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AlternateCameraArcRadius;                         		// 0x0258 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ElasticSpeed;                                     		// 0x025C (0x0004) [0x0000000000000000]              
	float                                              ElasticScale;                                     		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastDeltaT;                                       		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUpdatedThisFrame : 1;                            		// 0x0268 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void MakeInactive ( );
	void MakeActive ( );
	void Tick ( float DeltaTime );
	void UpdatePosition ( );
	struct FVector GetCameraLocation ( );
	void Initialize ( class ABioPlayerController* PC );
};

// Class SFXGame.SFXCameraTransition_Animated
// 0x0017 (0x028C - 0x0275)
class USFXCameraTransition_Animated : public USFXCameraMode_Interpolate
{
public:
	class UCameraAnim*                                 Anim;                                             		// 0x0278 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultBlendInTime;                               		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultBlendOutTime;                              		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAnimationBegun : 1;                              		// 0x0288 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bScalePlayRate : 1;                               		// 0x0288 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
	void InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget );
};

// Class SFXGame.SFXCameraTransition_FaceTarget
// 0x0027 (0x029C - 0x0275)
class USFXCameraTransition_FaceTarget : public USFXCameraMode_Interpolate
{
public:
	struct FVector                                     TargetLocation;                                   		// 0x0278 (0x000C) [0x0000000000000000]              
	struct FRotator                                    StartRotation;                                    		// 0x0284 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartLocation;                                    		// 0x0290 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
	void InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget );
};

// Class SFXGame.SFXCameraTransition_GalaxyMap
// 0x0003 (0x0278 - 0x0275)
class USFXCameraTransition_GalaxyMap : public USFXCameraMode_Interpolate
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
	void InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget );
};

// Class SFXGame.SFXCameraTransition_VanguardSlam
// 0x0054 (0x02E0 - 0x028C)
class USFXCameraTransition_VanguardSlam : public USFXCameraTransition_Animated
{
public:
	struct FInterpCurveFloat                           FOVCurve;                                         		// 0x028C (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpCurveFloat                           MovementCurve;                                    		// 0x02A0 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     StartLocation;                                    		// 0x02B4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    StartRotation;                                    		// 0x02C0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      TargetActor;                                      		// 0x02CC (0x0008) [0x0000000000000000]              
	float                                              StartFOV;                                         		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FOVChange;                                        		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FirstPhaseLength;                                 		// 0x02DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
	void InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget );
};

// Class SFXGame.SFXCustomAction_BloodLust
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_BloodLust : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_BovineFortitude
// 0x000F (0x00EC - 0x00DD)
class USFXCustomAction_BovineFortitude : public USFXCustomAction_DamageReaction
{
public:
	class UWwiseEvent*                                 Moo;                                              		// 0x00E0 (0x0008) [0x0000000000000000]              
	float                                              HealDuration;                                     		// 0x00E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DelayedSoundEffect ( );
	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
};

// Class SFXGame.SFXGameEffect_HealOverTime
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_HealOverTime : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnUpdate ( float DeltaSeconds );
};

// Class SFXGame.SFXCustomAction_Exploration_Comm
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_Exploration_Comm : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void CheckMoving ( );
	void StartCustomAction ( );
};

// Class SFXGame.SFXCustomAction_GlobalDeath
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_GlobalDeath : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_GreatPainII_Death
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_GreatPainII_Death : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_HeavyMeleed
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_HeavyMeleed : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_HeavyPunchLunge
// 0x00CF (0x0160 - 0x0091)
class USFXCustomAction_HeavyPunchLunge : public UBioCustomAction
{
public:
	struct TArray<class ABioPawn*>                     PawnTargets;                                      		// 0x0094 (0x0010) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct FScreenShakeStruct                          HitShake;                                         		// 0x00A4 (0x0070) [0x0000000000000001]              ( CPF_Edit )
	struct FVisualEffect                               UtilizeCrust;                                     		// 0x0114 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FBodyStance                                 BS_Punch;                                         		// 0x0124 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      HitForceFeedback;                                 		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxLungeDistance;                                 		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeAngle;                                        		// 0x013C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                MaxRagdollPhysLevel;                              		// 0x0140 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              WindUpDuration;                                   		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChargePoseDuration;                               		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SwingDuration;                                    		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HitPoseDuration;                                  		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeDilationDuration;                             		// 0x0154 (0x0004) [0x0000000000000000]              
	float                                              TimeDilationAmount;                               		// 0x0158 (0x0004) [0x0000000000000000]              
	unsigned long                                      bRequireTarget : 1;                               		// 0x015C (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void PlayImpact ( );
	void Lunge ( );
	void StartCustomAction ( );
	void SetLeftArmIKEnabled ( unsigned long bEnabled );
};

// Class SFXGame.SFXGameEffect_MeleeDamageBonus
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_MeleeDamageBonus : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXDamageType_HeavyMelee
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_HeavyMelee : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_HuskImpact
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_HuskImpact : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_MawBurrow
// 0x001C (0x00AD - 0x0091)
class USFXCustomAction_MawBurrow : public UBioCustomAction
{
public:
	struct FBodyStance                                 BS_MawLower;                                      		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FBodyStance                                 BS_MawRaise;                                      		// 0x00A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eCurrentBurrowAction;                           		// 0x00AC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void ContinueCustomAction ( );
	void StopCustomAction ( );
	void StartCustomAction ( );
};

// Class SFXGame.SFXCustomAction_MawDeath
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_MawDeath : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
};

// Class SFXGame.SFXCustomAction_MechDogIdle
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_MechDogIdle : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_Melee
// 0x0097 (0x0128 - 0x0091)
class USFXCustomAction_Melee : public UBioCustomAction
{
public:
	struct FScreenShakeStruct                          HitShake;                                         		// 0x0094 (0x0070) [0x0000000000000001]              ( CPF_Edit )
	struct FBodyStance                                 BS_Swipe;                                         		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    AnimSet;                                          		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      HitForceFeedback;                                 		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              Damage;                                           		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Force;                                            		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Cleanup ( );
	void EndAction ( );
	void Impact ( );
	void StartCustomAction ( );
};

// Class SFXGame.SFXCustomAction_OculusDeath
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_OculusDeath : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_PlayerMeleedII
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_PlayerMeleedII : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_PlayerMeleedNoRotate
// 0x0000 (0x00E0 - 0x00E0)
class USFXCustomAction_PlayerMeleedNoRotate : public USFXCustomAction_PlayerMeleed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_PlayerStumbleForward
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_PlayerStumbleForward : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_Possessed
// 0x000F (0x00A0 - 0x0091)
class USFXCustomAction_Possessed : public UBioCustomAction
{
public:
	struct FBodyStance                                 BS_Possession;                                    		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StopCustomAction ( );
	void StartCustomAction ( );
};

// Class SFXGame.SFXCustomAction_PraetorianDeath
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_PraetorianDeath : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void StartCustomAction ( );
};

// Class SFXGame.SFXCustomAction_RoboticImpact
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_RoboticImpact : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_ScionHeadless
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_ScionHeadless : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_ScionImpact
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_ScionImpact : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_Spider
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_Spider : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void StartCustomAction ( );
};

// Class SFXGame.SFXCustomAction_SpiderImpact
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_SpiderImpact : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_TentacleDeath
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_TentacleDeath : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_Utilize
// 0x0037 (0x0114 - 0x00DD)
class USFXCustomAction_Utilize : public USFXCustomAction_DamageReaction
{
public:
	struct FVisualEffect                               UtilizeCrust;                                     		// 0x00E0 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FBodyStance                                 BS_ReactionAlternative1;                          		// 0x00F0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FBodyStance                                 BS_ReactionAlternative2;                          		// 0x00FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FBodyStance                                 BS_ReactionExploreAlternative;                    		// 0x0108 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void CheckFiring ( );
	void CheckMoving ( );
	void StartCustomAction ( );
};

// Class SFXGame.SFXCustomAction_VarrenImpact
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_VarrenImpact : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCustomAction_ZombieTakeAKnee
// 0x0003 (0x00E0 - 0x00DD)
class USFXCustomAction_ZombieTakeAKnee : public USFXCustomAction_DamageReaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_Abomination
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_Abomination : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_AIHacking
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_AIHacking : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_ArmorPiercingAmmo
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_ArmorPiercingAmmo : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_Carnage
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_Carnage : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_ColossusPulse
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_ColossusPulse : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_CombatDroneAttack
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_CombatDroneAttack : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_ConcussiveAmmo
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_ConcussiveAmmo : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_ConcussiveShot
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_ConcussiveShot : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_Crush
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_Crush : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_DisruptorAmmo
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_DisruptorAmmo : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_Environmental
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_Environmental : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_Explosion
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_Explosion : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_FireDamageOverTime
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_FireDamageOverTime : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_Fissure
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_Fissure : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_Flashbang
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_Flashbang : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_GunshipRocket
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_GunshipRocket : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_HeavyFireDamage
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_HeavyFireDamage : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_HeavyMechRocket
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_HeavyMechRocket : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_HuskMelee
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_HuskMelee : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_HuskTesla
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_HuskTesla : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_IgnoreShields
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_IgnoreShields : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_ImprovedDisruptorAmmo
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_ImprovedDisruptorAmmo : public USFXDamageType_DisruptorAmmo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_Overload
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_Overload : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_ImprovedOverload
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_ImprovedOverload : public USFXDamageType_Overload
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_IncendiaryAmmo
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_IncendiaryAmmo : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_Incinerate
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_Incinerate : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_KillTrigger
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_KillTrigger : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_KroganCharge
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_KroganCharge : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_LightMechShock
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_LightMechShock : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_MechDogBite
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_MechDogBite : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_MechDogTaser
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_MechDogTaser : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_Melee
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_Melee : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_NeuralShock
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_NeuralShock : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_PowerArmor
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_PowerArmor : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_PraetorianAreaDamage
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_PraetorianAreaDamage : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_PraetorianDeathChoir
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_PraetorianDeathChoir : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_Pull
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_Pull : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_RocketDroneAttack
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_RocketDroneAttack : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_Shatter
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_Shatter : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_ShieldJack
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_ShieldJack : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_Singularity
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_Singularity : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_Stasis
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_Stasis : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_SunTlaColossusRocket
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_SunTlaColossusRocket : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_SunTlaExposure
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_SunTlaExposure : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_ThresherMawSpit
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_ThresherMawSpit : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_Throw
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_Throw : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_VarrenBite
// 0x0000 (0x0114 - 0x0114)
class USFXDamageType_VarrenBite : public USFXDamageType_Default
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_Warp
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_Warp : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDamageType_Weapon
// 0x0003 (0x0114 - 0x0111)
class USFXDamageType_Weapon : public USFXDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqEvt_SFXDoorInteraction
// 0x0002 (0x0128 - 0x0126)
class USFXSeqEvt_SFXDoorInteraction : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void TriggerInteraction ( unsigned char CurrentState, class AActor* EventInstigator );
	void TriggerStateChange ( unsigned char NewState, unsigned char PrevState, class AActor* EventInstigator );
};

// Class SFXGame.SFXDroppedPickup
// 0x0010 (0x02B8 - 0x02A8)
class ASFXDroppedPickup : public ADroppedPickup
{
public:
	class USkeletalMeshComponent*                      PickupMesh;                                       		// 0x02A8 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x02B0 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PickedUpBy ( class APawn* P );
	void GiveTo ( class APawn* P );
	void Used ( class AActor* User );
	void Landed ( struct FVector HitNormal, class AActor* FloorActor );
	void SetPickupMesh ( class UPrimitiveComponent* NewPickupMesh );
};

// Class SFXGame.SFXGameChoiceGUIData_HeavyWeapons
// 0x0003 (0x0090 - 0x008D)
class USFXGameChoiceGUIData_HeavyWeapons : public USFXGameChoiceGUIData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameChoiceGUIData_Research
// 0x004B (0x00D8 - 0x008D)
class USFXGameChoiceGUIData_Research : public USFXGameChoiceGUIData
{
public:
	struct TArray<struct FTechData>                    Tech;                                             		// 0x0090 (0x0010) [0x0000000000406000]              ( CPF_Transient | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FTechData>                    Research;                                         		// 0x00A0 (0x0010) [0x0000000000406000]              ( CPF_Transient | CPF_Config | CPF_NeedCtorLink )
	int                                                m_srTechTitle;                                    		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srTechSubTitle;                                 		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srTechAText;                                    		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srTechBText;                                    		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srResearchTitle;                                		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srResearchSubTitle;                             		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srResearchAText;                                		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srResearchBText;                                		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srResearchErrorTooExpensive;                    		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srResearchErrorCanNotLearn;                     		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameChoiceGUIData_Weapons
// 0x0003 (0x0090 - 0x008D)
class USFXGameChoiceGUIData_Weapons : public USFXGameChoiceGUIData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_AIHacking
// 0x000B (0x009C - 0x0091)
class USFXGameEffect_AIHacking : public USFXGameEffect
{
public:
	class UClass*                                      OriginalFaction;                                  		// 0x0094 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_AIConfuse
// 0x0000 (0x009C - 0x009C)
class USFXGameEffect_AIConfuse : public USFXGameEffect_AIHacking
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
};

// Class SFXGame.SFXGameEffect_ArmorPenalty
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_ArmorPenalty : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_Cloak
// 0x0013 (0x00A4 - 0x0091)
class USFXGameEffect_Cloak : public USFXGameEffect
{
public:
	struct FScriptDelegate                             __OnCloakEnded__Delegate;                         		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnCombatEnd ( );
	void DelayedRemoval ( );
	void OnRemoved ( );
	void OnApplied ( );
	void OnCloakEnded ( );
};

// Class SFXGame.SFXGameEffect_CloakDamageBonus
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_CloakDamageBonus : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnCombatEnd ( );
	void RemoveDamageBonuses ( );
	void OnRemoved ( );
	void OnApplied ( );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_CloakTargetable
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_CloakTargetable : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnCombatEnd ( );
	void DelayedRemoval ( );
	void OnRemoved ( );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_CustomFlag
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_CustomFlag : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_DamageBonus
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_DamageBonus : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_DamageOverTime
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_DamageOverTime : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UClass* GetDamageType ( );
	void OnUpdate ( float DeltaSeconds );
};

// Class SFXGame.SFXGameEffect_HealthRegenPenalty
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_HealthRegenPenalty : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_DelayedCustomAction
// 0x000C (0x009D - 0x0091)
class USFXGameEffect_DelayedCustomAction : public USFXGameEffect
{
public:
	int                                                MaxRagdollPhysicsLevel;                           		// 0x0094 (0x0004) [0x0000000000000000]              
	unsigned long                                      bRagdollOnFail : 1;                               		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      CustomAction;                                     		// 0x009C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
};

// Class SFXGame.SFXGameEffect_DisableAI
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_DisableAI : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_FireDamageOverTime
// 0x0000 (0x0094 - 0x0094)
class USFXGameEffect_FireDamageOverTime : public USFXGameEffect_DamageOverTime
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UClass* GetDamageType ( );
};

// Class SFXGame.SFXGameEffect_FireDeath
// 0x0000 (0x00A8 - 0x00A8)
class USFXGameEffect_FireDeath : public USFXGameEffect_DeathEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_FissureDamageOverTime
// 0x0000 (0x0094 - 0x0094)
class USFXGameEffect_FissureDamageOverTime : public USFXGameEffect_DamageOverTime
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UClass* GetDamageType ( );
};

// Class SFXGame.SFXGameEffect_PowerDamageBonus
// 0x0007 (0x0098 - 0x0091)
class USFXGameEffect_PowerDamageBonus : public USFXGameEffect
{
public:
	unsigned long                                      bRemoved : 1;                                     		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_Gear_AmplifierPads
// 0x0000 (0x0098 - 0x0098)
class USFXGameEffect_Gear_AmplifierPads : public USFXGameEffect_PowerDamageBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_PassiveHealthBonus
// 0x0007 (0x0098 - 0x0091)
class USFXGameEffect_PassiveHealthBonus : public USFXGameEffect
{
public:
	float                                              AppliedBonus;                                     		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_Gear_BodyArmor
// 0x0000 (0x0098 - 0x0098)
class USFXGameEffect_Gear_BodyArmor : public USFXGameEffect_PassiveHealthBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_PassiveShieldRegenBonus
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_PassiveShieldRegenBonus : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_Gear_CapacitorChestplate
// 0x0000 (0x0094 - 0x0094)
class USFXGameEffect_Gear_CapacitorChestplate : public USFXGameEffect_PassiveShieldRegenBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_PassiveNegotiationBonus
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_PassiveNegotiationBonus : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_Gear_DeathMask
// 0x0000 (0x0094 - 0x0094)
class USFXGameEffect_Gear_DeathMask : public USFXGameEffect_PassiveNegotiationBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_PassiveHeavyAmmoBonus
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_PassiveHeavyAmmoBonus : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_Gear_EquipmentPacks
// 0x0000 (0x0094 - 0x0094)
class USFXGameEffect_Gear_EquipmentPacks : public USFXGameEffect_PassiveHeavyAmmoBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_PassiveShieldBonus
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_PassiveShieldBonus : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_Gear_HeavyDampingGauntlets
// 0x0000 (0x0094 - 0x0094)
class USFXGameEffect_Gear_HeavyDampingGauntlets : public USFXGameEffect_PassiveShieldBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_Gear_HeavyLeftSideArmor
// 0x0000 (0x0098 - 0x0098)
class USFXGameEffect_Gear_HeavyLeftSideArmor : public USFXGameEffect_PassiveHealthBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_PassiveMaxAmmoBonus
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_PassiveMaxAmmoBonus : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_Gear_LeftArmAmmoPack
// 0x0000 (0x0094 - 0x0094)
class USFXGameEffect_Gear_LeftArmAmmoPack : public USFXGameEffect_PassiveMaxAmmoBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_Gear_LifeSupportWebbing
// 0x0000 (0x0098 - 0x0098)
class USFXGameEffect_Gear_LifeSupportWebbing : public USFXGameEffect_PassiveHealthBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_Gear_N7Arms
// 0x0000 (0x0098 - 0x0098)
class USFXGameEffect_Gear_N7Arms : public USFXGameEffect_PassiveHealthBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_Gear_N7Helmet
// 0x0000 (0x0098 - 0x0098)
class USFXGameEffect_Gear_N7Helmet : public USFXGameEffect_PassiveHealthBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_Gear_N7Legs
// 0x0000 (0x0094 - 0x0094)
class USFXGameEffect_Gear_N7Legs : public USFXGameEffect_PassiveShieldBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_Gear_N7Shoulders
// 0x0000 (0x0098 - 0x0098)
class USFXGameEffect_Gear_N7Shoulders : public USFXGameEffect_PassiveWeaponDamageBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_Gear_N7Torso
// 0x0000 (0x0098 - 0x0098)
class USFXGameEffect_Gear_N7Torso : public USFXGameEffect_PowerDamageBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_Gear_PowerBelt
// 0x0000 (0x0094 - 0x0094)
class USFXGameEffect_Gear_PowerBelt : public USFXGameEffect_PassiveShieldBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_Gear_StabilizationGauntlets
// 0x0000 (0x0098 - 0x0098)
class USFXGameEffect_Gear_StabilizationGauntlets : public USFXGameEffect_PassiveWeaponDamageBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_PassiveStormSpeedBonus
// 0x0007 (0x0098 - 0x0091)
class USFXGameEffect_PassiveStormSpeedBonus : public USFXGameEffect
{
public:
	unsigned long                                      bRemoved : 1;                                     		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_Gear_StimulatorConduits
// 0x0000 (0x0098 - 0x0098)
class USFXGameEffect_Gear_StimulatorConduits : public USFXGameEffect_PassiveStormSpeedBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_Gear_StrengthBoostPads
// 0x0000 (0x0094 - 0x0094)
class USFXGameEffect_Gear_StrengthBoostPads : public USFXGameEffect_MeleeDamageBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_Gear_Visor
// 0x0000 (0x0094 - 0x0094)
class USFXGameEffect_Gear_Visor : public USFXGameEffect_PassiveHeadShotBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_GiveShield
// 0x0017 (0x00A8 - 0x0091)
class USFXGameEffect_GiveShield : public USFXGameEffect
{
public:
	class UClass*                                      ShieldClass;                                      		// 0x0094 (0x0008) [0x0000000000000000]              
	class ASFXShield_Base*                             NewShield;                                        		// 0x009C (0x0008) [0x0000000000000000]              
	unsigned long                                      bForceNewShield : 1;                              		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void CreateShield ( );
	void OnApplied ( );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_HealShieldOverTime
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_HealShieldOverTime : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnUpdate ( float DeltaSeconds );
};

// Class SFXGame.SFXGameEffect_HealthBonus
// 0x0007 (0x0098 - 0x0091)
class USFXGameEffect_HealthBonus : public USFXGameEffect
{
public:
	float                                              PercentHealthBonus;                               		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_HeavyFireDamage
// 0x0000 (0x0094 - 0x0094)
class USFXGameEffect_HeavyFireDamage : public USFXGameEffect_DamageOverTime
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UClass* GetDamageType ( );
};

// Class SFXGame.SFXGameEffect_IgnorePlayerSquad
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_IgnorePlayerSquad : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsStillIgnoring ( class ABioPawn* oPawn );
	void OnRemoved ( );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_MeleeCooldown
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_MeleeCooldown : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_PassiveMovementSpeedBonus
// 0x0007 (0x0098 - 0x0091)
class USFXGameEffect_PassiveMovementSpeedBonus : public USFXGameEffect
{
public:
	unsigned long                                      bRemoved : 1;                                     		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_PowerArmor
// 0x0060 (0x0108 - 0x00A8)
class USFXGameEffect_PowerArmor : public USFXGameEffect_GiveShield
{
public:
	struct TArray<unsigned char>                       AnimatedReactions;                                		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioVFXTemplate*                             ShieldCrust_Male;                                 		// 0x00B8 (0x0008) [0x0000000000000000]              
	class UBioVFXTemplate*                             ShieldCrust_Female;                               		// 0x00C0 (0x0008) [0x0000000000000000]              
	class UBioVFXTemplate*                             ShieldDeathCrust;                                 		// 0x00C8 (0x0008) [0x0000000000000000]              
	class ABioVisualEffect*                            PlayerVFX;                                        		// 0x00D0 (0x0008) [0x0000000000000000]              
	class ABioVisualEffect*                            HenchVFX;                                         		// 0x00D8 (0x0008) [0x0000000000000000]              
	class ABioPawn*                                    OwnerPawn;                                        		// 0x00E0 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             ShieldExplosion;                                  		// 0x00E8 (0x0008) [0x0000000004000000]              ( CPF_EditInline )
	float                                              ExplosionRadius;                                  		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              ExplosionDamage;                                  		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              ExplosionForce;                                   		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              ExplosionVFXParameter;                            		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              ExplosionShieldBoost;                             		// 0x0100 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShieldDestroyed : 1;                             		// 0x0104 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void AreaExplosion ( );
	void OnShieldDestroyed ( unsigned long PlayDeathCrust );
	void TurnVFXOff ( );
	void TurnVFXOn ( );
	void OnUpdate ( float DeltaSeconds );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_PowerCooldownModifier
// 0x0007 (0x0098 - 0x0091)
class USFXGameEffect_PowerCooldownModifier : public USFXGameEffect
{
public:
	unsigned long                                      bRemoved : 1;                                     		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_PowerDurationBonus
// 0x0007 (0x0098 - 0x0091)
class USFXGameEffect_PowerDurationBonus : public USFXGameEffect
{
public:
	unsigned long                                      bRemoved : 1;                                     		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_RecentlyMeleed
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_RecentlyMeleed : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_RecentlyMeleed_Second
// 0x0000 (0x0094 - 0x0094)
class USFXGameEffect_RecentlyMeleed_Second : public USFXGameEffect_RecentlyMeleed
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_ShieldBonus
// 0x0007 (0x0098 - 0x0091)
class USFXGameEffect_ShieldBonus : public USFXGameEffect
{
public:
	float                                              PercentShieldBonus;                               		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_ShieldBoost
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_ShieldBoost : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsShieldBoosted ( class ABioPawn* oPawn );
	void OnRemoved ( );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_ShieldDamageReduction
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_ShieldDamageReduction : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float ComputeTotalEffectValue ( float BaseValue, float StackingValue, float NonStackingValue );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_SingularityImmune
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_SingularityImmune : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_SniperTimeDilation
// 0x003B (0x00CC - 0x0091)
class USFXGameEffect_SniperTimeDilation : public USFXGameEffect
{
public:
	struct FInterpCurveFloat                           SlowDown;                                         		// 0x0094 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ABioPawn*                                    BP;                                               		// 0x00A8 (0x0008) [0x0000000000000000]              
	class ABioPlayerController*                        Controller;                                       		// 0x00B0 (0x0008) [0x0000000000000000]              
	class UBioPlayerInput*                             MyPlayerInput;                                    		// 0x00B8 (0x0008) [0x0000000000000000]              
	float                                              SlowDownTimer;                                    		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              SlowDownDuration;                                 		// 0x00C4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bTimeSlowed : 1;                                  		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SlowTime ( );
	void OnUpdate ( float TimeDelta );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_StopHealthRegen
// 0x000B (0x009C - 0x0091)
class USFXGameEffect_StopHealthRegen : public USFXGameEffect
{
public:
	class USFXModule_DamageParty*                      DamageModule;                                     		// 0x0094 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnUpdate ( float DeltaSeconds );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_StopShieldRegen
// 0x0013 (0x00A4 - 0x0091)
class USFXGameEffect_StopShieldRegen : public USFXGameEffect
{
public:
	class ABioPawn*                                    Pawn;                                             		// 0x0094 (0x0008) [0x0000000000000000]              
	class ASFXShield_Base*                             Shield;                                           		// 0x009C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnUpdate ( float DeltaSeconds );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_StormTimeDilation
// 0x0033 (0x00C4 - 0x0091)
class USFXGameEffect_StormTimeDilation : public USFXGameEffect
{
public:
	struct FInterpCurveFloat                           StormSlowDown;                                    		// 0x0094 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ABioPawn*                                    BP;                                               		// 0x00A8 (0x0008) [0x0000000000000000]              
	class ABioPlayerController*                        Controller;                                       		// 0x00B0 (0x0008) [0x0000000000000000]              
	float                                              CustomTimeDilation;                               		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              PostStormDilationTime;                            		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              TimeSinceStorm;                                   		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
	void SlowTime ( );
	void OnUpdate ( float TimeDelta );
};

// Class SFXGame.SFXGameEffect_WarpDamageOverTime
// 0x0000 (0x0094 - 0x0094)
class USFXGameEffect_WarpDamageOverTime : public USFXGameEffect_DamageOverTime
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UClass* GetDamageType ( );
};

// Class SFXGame.SFXGameEffect_WeaponDamageBonus
// 0x0000 (0x0098 - 0x0098)
class USFXGameEffect_WeaponDamageBonus : public USFXGameEffect_PassiveWeaponDamageBonus
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameEffect_WeaponRateOfFireBonus
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_WeaponRateOfFireBonus : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
};

// Class SFXGame.SFXGameEffect_WeaponRecoilBonus
// 0x0003 (0x0094 - 0x0091)
class USFXGameEffect_WeaponRecoilBonus : public USFXGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnRemoved ( );
	void OnApplied ( );
	void ComputeEffectValue ( float* Value );
};

// Class SFXGame.SFXGameEffect_WeaponVFXChange
// 0x002F (0x00C0 - 0x0091)
class USFXGameEffect_WeaponVFXChange : public USFXGameEffect
{
public:
	class UStaticMesh*                                 Tracer;                                           		// 0x0094 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             oMuzzleVFX;                                       		// 0x009C (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             oMuzzleLoopVFX;                                   		// 0x00A4 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             oImpactVFX;                                       		// 0x00AC (0x0008) [0x0000000000000000]              
	class ASFXWeapon*                                  CastAtWeapon;                                     		// 0x00B4 (0x0008) [0x0000000000000000]              
	unsigned long                                      bModifyTracer : 1;                                		// 0x00BC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bModifyMuzzleFlash : 1;                           		// 0x00BC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bModifyImpactVFX : 1;                             		// 0x00BC (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool UseLoopingMuzzleVFX ( class ASFXWeapon* Weapon );
	void OnRemoved ( );
	void OnApplied ( );
};

// Class SFXGame.SFXPhysicalMaterialImpactEffects
// 0x0070 (0x00D0 - 0x0060)
class USFXPhysicalMaterialImpactEffects : public USFXPhysicalMaterialBase
{
public:
	class UParticleSystem*                             HeavyPistol;                                      		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             AutoPistol;                                       		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             HandCannon;                                       		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SMG;                                              		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             Shotgun;                                          		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             HeavyShotgun;                                     		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             FlakGun;                                          		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             AssaultRifle;                                     		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             Needler;                                          		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             Machinegun;                                       		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SniperRifle;                                      		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             AntiMatRifle;                                     		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             MassCannon;                                       		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ParticleBeam;                                     		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXPhysicalMaterialImpactSounds
// 0x00E0 (0x0140 - 0x0060)
class USFXPhysicalMaterialImpactSounds : public USFXPhysicalMaterialBase
{
public:
	class UWwiseEvent*                                 HeavyPistol;                                      		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HeavyPistol_Player;                               		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 AutoPistol;                                       		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 AutoPistol_Player;                                		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HandCannon;                                       		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HandCannon_Player;                                		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 SMG;                                              		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 SMG_Player;                                       		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 Shotgun;                                          		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 Shotgun_Player;                                   		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HeavyShotgun;                                     		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 HeavyShotgun_Player;                              		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 FlakGun;                                          		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 FlakGun_Player;                                   		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 AssaultRifle;                                     		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 AssaultRifle_Player;                              		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 Needler;                                          		// 0x00E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 Needler_Player;                                   		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 Machinegun;                                       		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 Machinegun_Player;                                		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 SniperRifle;                                      		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 SniperRifle_Player;                               		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 AntiMatRifle;                                     		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 AntiMatRifle_Player;                              		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 MassCannon;                                       		// 0x0120 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 MassCannon_Player;                                		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 ParticleBeam;                                     		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UWwiseEvent*                                 ParticleBeam_Player;                              		// 0x0138 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXPhysicalMaterialDecals
// 0x0118 (0x0178 - 0x0060)
class USFXPhysicalMaterialDecals : public USFXPhysicalMaterialBase
{
public:
	struct TArray<class UDecalComponent*>              HeavyPistol;                                      		// 0x0060 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UDecalComponent*>              AutoPistol;                                       		// 0x0070 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UDecalComponent*>              HandCannon;                                       		// 0x0080 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UDecalComponent*>              SMG;                                              		// 0x0090 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UDecalComponent*>              Shotgun;                                          		// 0x00A0 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UDecalComponent*>              HeavyShotgun;                                     		// 0x00B0 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UDecalComponent*>              FlakGun;                                          		// 0x00C0 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UDecalComponent*>              AssaultRifle;                                     		// 0x00D0 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UDecalComponent*>              Needler;                                          		// 0x00E0 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UDecalComponent*>              Machinegun;                                       		// 0x00F0 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UDecalComponent*>              SniperRifle;                                      		// 0x0100 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UDecalComponent*>              AntiMatRifle;                                     		// 0x0110 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UDecalComponent*>              MassCannon;                                       		// 0x0120 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UDecalComponent*>              ParticleBeam;                                     		// 0x0130 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	float                                              HeavyPistolFadeTime;                              		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoPistolFadeTime;                               		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HandCannonFadeTime;                               		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SMGFadeTime;                                      		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShotgunFadeTime;                                  		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeavyShotgunFadeTime;                             		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlakGunFadeTime;                                  		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AssaultRifleFadeTime;                             		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NeedlerFadeTime;                                  		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MachinegunFadeTime;                               		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SniperRifleFadeTime;                              		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AntiMatRifleFadeTime;                             		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MassCannonFadeTime;                               		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParticleBeamFadeTime;                             		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXTracer
// 0x0015 (0x0345 - 0x0330)
class ASFXTracer : public ASFXProjectile
{
public:
	struct FVector                                     DesiredEndPoint;                                  		// 0x0330 (0x000C) [0x0000000000000000]              
	float                                              ScaleTimeFactor;                                  		// 0x033C (0x0004) [0x0000000000000000]              
	float                                              ScaleTimeCount;                                   		// 0x0340 (0x0004) [0x0000000000000000]              
	unsigned char                                      ScaleMode;                                        		// 0x0344 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float DeltaTime );
	void ShutDown ( );
	void ScaleDownFinishedNotify ( );
	void ScaleDownStart ( );
	void ScaleUpFinishedNotify ( );
	void ScaleUpStart ( );
	void InitTracer ( struct FVector Start, struct FVector End );
};

// Class SFXGame.SFXTracer_Bullet
// 0x0003 (0x0348 - 0x0345)
class ASFXTracer_Bullet : public ASFXTracer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
};

// Class SFXGame.SFXMiningNode
// 0x0024 (0x02B0 - 0x028C)
class ASFXMiningNode : public ASFXPointOfInterest
{
public:
	class UParticleSystemComponent*                    PSC_GroundReticle;                                		// 0x028C (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ImpulseMinStrength;                               		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseMaxStrength;                               		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseMinFrequency;                              		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseMaxFrequency;                              		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Duration;                                         		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAlreadyMined : 1;                                		// 0x02AC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PostBeginPlay ( );
};

// Class SFXGame.SFXSeqEvt_VehicleMiningSuccess
// 0x0002 (0x0128 - 0x0126)
class USFXSeqEvt_VehicleMiningSuccess : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqEvt_VehicleMiningFailure
// 0x0002 (0x0128 - 0x0126)
class USFXSeqEvt_VehicleMiningFailure : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqEvt_ReachedWaypoint
// 0x0002 (0x0128 - 0x0126)
class USFXSeqEvt_ReachedWaypoint : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXNav_ActionStationWP
// 0x0000 (0x0398 - 0x0398)
class ASFXNav_ActionStationWP : public ASFXNav_WayPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool OnPawnReachedWayPoint ( class APawn* oPawn );
};

// Class SFXGame.SFXNav_PlayAnimWP
// 0x0009 (0x03A1 - 0x0398)
class ASFXNav_PlayAnimWP : public ASFXNav_WayPoint
{
public:
	struct FName                                       AnimName;                                         		// 0x0398 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eStance;                                          		// 0x03A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool OnPawnReachedWayPoint ( class APawn* oPawn );
};

// Class SFXGame.SFXProjectile_Repulsor
// 0x0000 (0x0410 - 0x0410)
class ASFXProjectile_Repulsor : public ASFXProjectile_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ShutDown ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
};

// Class SFXGame.SFXSeqAct_3DCeberusStateChange
// 0x0001 (0x00F9 - 0x00F8)
class USFXSeqAct_3DCeberusStateChange : public USequenceAction
{
public:
	unsigned char                                      m_eCerberus3DStateChange;                         		// 0x00F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.SFXSeqAct_AttemptDeviceDetection
// 0x0000 (0x00F8 - 0x00F8)
class USFXSeqAct_AttemptDeviceDetection : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.SFXSeqAct_AwardEndGameAchievements
// 0x0000 (0x00F8 - 0x00F8)
class USFXSeqAct_AwardEndGameAchievements : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqAct_AwardResource
// 0x0009 (0x0101 - 0x00F8)
class USFXSeqAct_AwardResource : public USequenceAction
{
public:
	int                                                ResourcePercent;                                  		// 0x00F8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bAbsoluteAmount : 1;                              		// 0x00FC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsSalvage : 1;                                   		// 0x00FC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      TreasureType;                                     		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.SFXSeqAct_CanAffordTreasure
// 0x0004 (0x00FC - 0x00F8)
class USFXSeqAct_CanAffordTreasure : public USequenceAction
{
public:
	int                                                nState;                                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.SFXSeqAct_CanSpendTallentPoints
// 0x0008 (0x0100 - 0x00F8)
class USFXSeqAct_CanSpendTallentPoints : public USequenceAction
{
public:
	class USFXPowerLevelUpHelper*                      m_Helper;                                         		// 0x00F8 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool CanSpendTallentPoints ( );
	void eventDeactivated ( );
	void eventActivated ( );
};

// Class SFXGame.SFXSeqAct_CheckResourceBudget
// 0x0011 (0x0109 - 0x00F8)
class USFXSeqAct_CheckResourceBudget : public USequenceAction
{
public:
	struct FName                                       nmLevel;                                          		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                nAmount;                                          		// 0x0100 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDiscount : 1;                                    		// 0x0104 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      TreasureType;                                     		// 0x0108 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.SFXSeqAct_ChooseLoadoutBase
// 0x00BC (0x01C8 - 0x010C)
class USFXSeqAct_ChooseLoadoutBase : public USeqAct_Latent
{
public:
	struct FString                                     ShepardImage;                                     		// 0x010C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UClass*>                       LoadoutWeapons;                                   		// 0x011C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FLoadoutWeaponInfo>           SubMenuEnabledWeapons;                            		// 0x012C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FName>                        AvailableHenchmen;                                		// 0x013C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<int>                                 WeaponMenuEnabledWeaponIDs;                       		// 0x014C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UBioSFHandler_ChoiceGUI*                     TopMenu;                                          		// 0x015C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioSFHandler_ChoiceGUI*                     SubMenu;                                          		// 0x0164 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioSFHandler_ChoiceGUI*                     SpecialWeaponToggleMenu;                          		// 0x016C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseEvent*                                 WeaponEquipSound;                                 		// 0x0174 (0x0008) [0x0000000000000000]              
	int                                                SubMenuWeaponIdx;                                 		// 0x017C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ButtonText_Choose;                                		// 0x0180 (0x0004) [0x0000000000000000]              
	int                                                ButtonText_Exit;                                  		// 0x0184 (0x0004) [0x0000000000000000]              
	int                                                ButtonText_SquadWeapons;                          		// 0x0188 (0x0004) [0x0000000000000000]              
	int                                                ButtonText_CustomizeSquadWeapons;                 		// 0x018C (0x0004) [0x0000000000000000]              
	int                                                ButtonText_CustomizeWeapons;                      		// 0x0190 (0x0004) [0x0000000000000000]              
	int                                                ButtonText_Accept;                                		// 0x0194 (0x0004) [0x0000000000000000]              
	int                                                ButtonText_Back;                                  		// 0x0198 (0x0004) [0x0000000000000000]              
	int                                                WeaponMenuSubHeading;                             		// 0x019C (0x0004) [0x0000000000000000]              
	int                                                LeftBracketToken;                                 		// 0x01A0 (0x0004) [0x0000000000000000]              
	int                                                RightBracketToken;                                		// 0x01A4 (0x0004) [0x0000000000000000]              
	int                                                WeaponClassTokenString;                           		// 0x01A8 (0x0004) [0x0000000000000000]              
	int                                                ClassDescriptionTokenString;                      		// 0x01AC (0x0004) [0x0000000000000000]              
	int                                                PawnActiveWeaponsString;                          		// 0x01B0 (0x0004) [0x0000000000000000]              
	int                                                ShepardNameString;                                		// 0x01B4 (0x0004) [0x0000000000000000]              
	int                                                SingleCustomToken;                                		// 0x01B8 (0x0004) [0x0000000000000000]              
	int                                                WeaponDescriptionTokenString;                     		// 0x01BC (0x0004) [0x0000000000000000]              
	int                                                CurrentPawn;                                      		// 0x01C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bFinished : 1;                                  		// 0x01C4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bAllHenchmen : 1;                               		// 0x01C4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	bool eventUpdate ( float DeltaTime );
	void Activated ( );
	void eventDeactivated ( );
	struct FLoadoutInfo GetHenchmanLoadoutData ( struct FName HenchClassName );
	struct FHenchmanInfoStruct GetHenchmanInfo ( struct FName HenchClassName );
	void PrepareHenchmanRecords ( struct FName Tag );
	void BuildPawnWeaponList ( int PawnID, struct FSFXChoiceEntry* Entry );
	void ShowCharacterMenu ( );
	void CharacterMenuHandler ( unsigned long bAPressed, int nContext );
	void PreparePlayerLoadout ( );
	void PrepareHenchmanLoadout ( int HenchIdx );
	class UTexture2D* FindImage ( struct FString Path );
	void ShowWeaponsTopMenu ( );
	void TopMenuHandler ( unsigned long bAPressed, int nContext );
	void ApplyHenchmanLoadout ( int HenchIdx );
	void ApplyPlayerLoadout ( );
	int GetWeaponClassUnlockedCount ( int GroupIdx );
	bool CanPawnUseSpecialWeapon ( int PawnID, class UClass* WeaponClass );
	bool CanPawnUseWeaponClass ( int PawnID, unsigned char WeaponGroupID );
	struct FLoadoutInfo GetPlayerLoadoutData ( );
	void ShowWeaponSubMenu ( int GroupIdx );
	void SubMenuHandler ( unsigned long bAPressed, int nContext );
	void PlayEquipSound ( );
};

// Class SFXGame.SFXSeqAct_CloseGalaxyMap
// 0x0000 (0x00F8 - 0x00F8)
class USFXSeqAct_CloseGalaxyMap : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};

// Class SFXGame.SFXSeqAct_DefendActor
// 0x001C (0x0114 - 0x00F8)
class USFXSeqAct_DefendActor : public USequenceAction
{
public:
	struct TArray<class APawn*>                        Henchmen;                                         		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      ActorToDefend;                                    		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistanceFromActor;                             		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqAct_FollowActor
// 0x0018 (0x0110 - 0x00F8)
class USFXSeqAct_FollowActor : public USequenceAction
{
public:
	struct TArray<class APawn*>                        Pawns;                                            		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      ActorToFollow;                                    		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqAct_ForceCombatOn
// 0x0000 (0x00F8 - 0x00F8)
class USFXSeqAct_ForceCombatOn : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.SFXSeqAct_GameCompleted
// 0x0004 (0x00FC - 0x00F8)
class USFXSeqAct_GameCompleted : public USequenceAction
{
public:
	int                                                m_nEndID;                                         		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.SFXSeqAct_GenerateVocEvent
// 0x0019 (0x0111 - 0x00F8)
class USFXSeqAct_GenerateVocEvent : public USequenceAction
{
public:
	class AActor*                                      oInstigator;                                      		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    oRecipient;                                       		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDelay;                                           		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fChanceToPlayMod;                                 		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      oEventID;                                         		// 0x0110 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	class ABioPawn* GetBioPawn ( class AActor* oTarget );
	void Activated ( );
};

// Class SFXGame.SFXSeqAct_GetCurrentGoal
// 0x000C (0x0104 - 0x00F8)
class USFXSeqAct_GetCurrentGoal : public USequenceAction
{
public:
	class ASFXNav_GoalPoint*                           oGoal;                                            		// 0x00F8 (0x0008) [0x0000000000000000]              
	int                                                nPriority;                                        		// 0x0100 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqAct_GetPropertyGeneric
// 0x0000 (0x0170 - 0x0170)
class USFXSeqAct_GetPropertyGeneric : public UBioSeqAct_GetProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqAct_GetTreasureImage
// 0x000C (0x0104 - 0x00F8)
class USFXSeqAct_GetTreasureImage : public USequenceAction
{
public:
	class UTexture2D*                                  oImage;                                           		// 0x00F8 (0x0008) [0x0000000000000000]              
	int                                                nTreasureId;                                      		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.SFXSeqAct_GivePlotWeapon
// 0x0022 (0x012E - 0x010C)
class USFXSeqAct_GivePlotWeapon : public USeqAct_Latent
{
public:
	class UClass*                                      WeaponClass;                                      		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                srText;                                           		// 0x0114 (0x0004) [0x0000000000000000]              
	int                                                srAButton;                                        		// 0x0118 (0x0004) [0x0000000000000000]              
	int                                                srNoSquadMembers;                                 		// 0x011C (0x0004) [0x0000000000000000]              
	int                                                ShepardName;                                      		// 0x0120 (0x0004) [0x0000000000000000]              
	int                                                srSquadListTokens;                                		// 0x0124 (0x0004) [0x0000000000000000]              
	unsigned long                                      bAutoEquip : 1;                                   		// 0x0128 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShowPopup : 1;                                   		// 0x0128 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bFinished : 1;                                  		// 0x0128 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bWasPaused : 1;                                 		// 0x0128 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned char                                      m_Skin;                                           		// 0x012C (0x0001) [0x0000000000000000]              
	unsigned char                                      m_TextAlign;                                      		// 0x012D (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventPreVersionUpdated ( int OldVersion, int NewVersion );
	int eventGetObjClassVersion ( );
	void MessageInputPressed ( unsigned long bAPressed, int nContext );
	bool eventUpdate ( float DeltaTime );
	struct FString BuildSquadMemberList ( class UClass* WClass );
	void DisplayMessageBox ( );
	void Activated ( );
};

// Class SFXGame.SFXSeqAct_InitMainMenu
// 0x0000 (0x00F8 - 0x00F8)
class USFXSeqAct_InitMainMenu : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqAct_LegacyDataBasicInfo
// 0x0034 (0x012C - 0x00F8)
class USFXSeqAct_LegacyDataBasicInfo : public USequenceAction
{
public:
	struct TArray<int>                                 srClassNames;                                     		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FNotorietyMap>                Notoriety;                                        		// 0x0108 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FOriginMap>                   Origin;                                           		// 0x0118 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                srShepard;                                        		// 0x0128 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};

// Class SFXGame.SFXSeqAct_LinkLighting
// 0x0004 (0x00FC - 0x00F8)
class USFXSeqAct_LinkLighting : public USequenceAction
{
public:
	unsigned long                                      bLinkShadows : 1;                                 		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLinkEnvironment : 1;                             		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.SFXSeqAct_LinkToSaveBool
// 0x0018 (0x0110 - 0x00F8)
class USFXSeqAct_LinkToSaveBool : public USequenceAction
{
public:
	class AActor*                                      oActor;                                           		// 0x00F8 (0x0008) [0x0000000000000000]              
	class USeqVar_Bool*                                oTargetBool;                                      		// 0x0100 (0x0008) [0x0000000000000000]              
	class USeqVar_Bool*                                oCombatTargetBool;                                		// 0x0108 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.SFXSeqAct_MainMenu
// 0x0000 (0x00F8 - 0x00F8)
class USFXSeqAct_MainMenu : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqAct_ModifyPropertyGeneric
// 0x0000 (0x0170 - 0x0170)
class USFXSeqAct_ModifyPropertyGeneric : public UBioSeqAct_ModifyProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqAct_OpenMap
// 0x0010 (0x0108 - 0x00F8)
class USFXSeqAct_OpenMap : public USequenceAction
{
public:
	struct FString                                     AreaName;                                         		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.SFXSeqAct_PreventDamage
// 0x0014 (0x010C - 0x00F8)
class USFXSeqAct_PreventDamage : public USequenceAction
{
public:
	struct TArray<class AActor*>                       Actors;                                           		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      PreventDamage : 1;                                		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqAct_ResearchChoiceGUI
// 0x021C (0x032C - 0x0110)
class USFXSeqAct_ResearchChoiceGUI : public UBioSequenceLatentAction
{
public:
	struct FTechData                                   m_ChosenTechData;                                 		// 0x0110 (0x0130) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FTechData>                    m_TechChoices;                                    		// 0x0240 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FTechData>                    m_ResearchChoices;                                		// 0x0250 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FTechData>                    m_ResearchSubMenuChoices;                         		// 0x0260 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FSFXChoiceEntry>              m_TopLevelChoices;                                		// 0x0270 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FSFXChoiceEntry>              m_TechTopChoices;                                 		// 0x0280 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FSFXChoiceEntry>              m_ResearchTopChoices;                             		// 0x0290 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FResearchMenu>                ResearchSubMenus;                                 		// 0x02A0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UBioSFHandler_ChoiceGUI*                     m_ChoiceGUIHandler;                               		// 0x02B0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXGameChoiceGUIData_Research*              m_ChoiceGUIData;                                  		// 0x02B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioSFHandler_MessageBox*                    m_oMsgBox;                                        		// 0x02C0 (0x0008) [0x0000000000000000]              
	int                                                srText;                                           		// 0x02C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srErrorAButton;                                   		// 0x02CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srErrorCanNotAfford;                              		// 0x02D0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srErrorDoNotQualify;                              		// 0x02D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srErrorKnown;                                     		// 0x02D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srTechNameLabel;                                  		// 0x02DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srResearchConfirmMessage;                         		// 0x02E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srResearchConfirm;                                		// 0x02E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srResearchCancel;                                 		// 0x02E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srEezo;                                           		// 0x02EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srPlatinum;                                       		// 0x02F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srPalladium;                                      		// 0x02F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srIridium;                                        		// 0x02F8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                nLastUnlockedResearch;                            		// 0x02FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                nLastUnlockedTech;                                		// 0x0300 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srResearchDescription;                            		// 0x0304 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srResearchTokenizedDescriptionPlural;             		// 0x0308 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srResearchTokenizedDescriptionSingular;           		// 0x030C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srResearchTokenizedDescriptionResources;          		// 0x0310 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srUpgradeTokenizedDescription;                    		// 0x0314 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srTokenizedResearchCategory;                      		// 0x0318 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srTokenizedResearchCategoryCounter;               		// 0x031C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srTopLevelAButton;                                		// 0x0320 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      m_bFinished : 1;                                  		// 0x0324 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bAborted : 1;                                   		// 0x0324 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bWasPaused : 1;                                 		// 0x0324 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bDidResearch : 1;                                 		// 0x0324 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bMessageBoxActivated : 1;                       		// 0x0324 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned char                                      Mode;                                             		// 0x0328 (0x0001) [0x0000000000000000]              
	unsigned char                                      RMode;                                            		// 0x0329 (0x0001) [0x0000000000000000]              
	unsigned char                                      InitialMode;                                      		// 0x032A (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      InitialResearchMode;                              		// 0x032B (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void TopLevelChosen ( );
	void ExitChosen ( );
	void DoResearch ( );
	void TechChosen ( );
	void TechMenuChosen ( );
	void ResearchMenuChosen ( );
	void MessageInputPressed ( unsigned long bAPressed, int nContext );
	void MessageInputPressedResearch ( unsigned long bAPressed, int nContext );
	void MessageInputPressedError ( unsigned long bAPressed, int nContext );
	void ShowResearchMessageBox ( struct FSTreasure stTreasure, struct FSTech stTech );
	void ShowErrorMessageBox ( int srError );
	void HandleInput_Research ( unsigned long bAPressed, int nContext );
	void HandleInput_Tech ( unsigned long bAPressed, int nContext );
	void HandleInput_TopLevel ( unsigned long bAPressed, int nContext );
	void ExitGui ( );
	void ChoiceGUIInputPressed ( unsigned long bAPressed, int nContext );
	bool UpdateOp ( float fDeltaT );
	void SetupTech ( );
	struct FString GetResearchDescription ( struct FTechData ResearchData );
	struct FString GetResearchCanAffordString ( struct FTechData ResearchData );
	struct FString GetResearchQualifiesForString ( struct FTechData ResearchData );
	struct FString TokenizeResearchString ( int nLevel, int srString );
	void SetupResearch ( struct FResearchMenu Menu );
	void TokenizeTechData ( int nLevel, struct FTechData* Data );
	void SetupTop ( );
	void SetupChoiceGUI ( );
	bool RenderModeResearch ( );
	bool RenderModeTech ( );
	bool RenderModeTopLevel ( );
	void Reset ( );
	void SetupTreasureData ( );
	void eventActivated ( );
	void eventDeactivated ( );
};

// Class SFXGame.SFXSeqAct_SetDoorState
// 0x000C (0x011C - 0x0110)
class USFXSeqAct_SetDoorState : public UBioSequenceLatentAction
{
public:
	class ASFXDoor*                                    m_Door;                                           		// 0x0110 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bInstantTransition : 1;                         		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	bool UpdateOp ( float fDeltaT );
	void SetDoorState ( unsigned char ToState, unsigned long bEnableDoor );
	void eventActivated ( );
};

// Class SFXGame.SFXSeqAct_SetDoorType
// 0x0009 (0x0101 - 0x00F8)
class USFXSeqAct_SetDoorType : public USequenceAction
{
public:
	class ASFXDoor*                                    m_Door;                                           		// 0x00F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_DoorType;                                       		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};

// Class SFXGame.SFXSeqAct_SetGoalPriority
// 0x0018 (0x0110 - 0x00F8)
class USFXSeqAct_SetGoalPriority : public USequenceAction
{
public:
	class UObject*                                     m_oTarget;                                        		// 0x00F8 (0x0008) [0x0000000000000000]              
	class ASFXNav_GoalPoint*                           m_oGoal;                                          		// 0x0100 (0x0008) [0x0000000000000000]              
	int                                                m_nSetPriority;                                   		// 0x0108 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bResetPriorityToDefault : 1;                    		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqAct_SetPawnVocState
// 0x0004 (0x00FC - 0x00F8)
class USFXSeqAct_SetPawnVocState : public USequenceAction
{
public:
	unsigned long                                      bVocState : 1;                                    		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.SFXSeqAct_SetTargetable
// 0x0004 (0x00FC - 0x00F8)
class USFXSeqAct_SetTargetable : public USequenceAction
{
public:
	unsigned long                                      bTargetable : 1;                                  		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTargetableOverride : 1;                          		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCombatTargetable : 1;                            		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCombatTargetableOverride : 1;                    		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
	void ResetToDefault ( class UObject* Instance, unsigned long bCombat );
};

// Class SFXGame.SFXSeqAct_SetTargetTip
// 0x0004 (0x00FC - 0x00F8)
class USFXSeqAct_SetTargetTip : public USequenceAction
{
public:
	int                                                srValue;                                          		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqAct_SetTreasure
// 0x0009 (0x0101 - 0x00F8)
class USFXSeqAct_SetTreasure : public USequenceAction
{
public:
	int                                                ResourcePercent;                                  		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTargetable : 1;                                  		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOverrideResource : 1;                            		// 0x00FC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTreasureTypeOverride : 1;                        		// 0x00FC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      TreasureType;                                     		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.SFXSeqAct_SetWeaponVisibility
// 0x0000 (0x00F8 - 0x00F8)
class USFXSeqAct_SetWeaponVisibility : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqAct_ShowCharacterRecordGUI
// 0x0004 (0x0114 - 0x0110)
class USFXSeqAct_ShowCharacterRecordGUI : public UBioSequenceLatentAction
{
public:
	unsigned long                                      m_bIsFinished : 1;                                		// 0x0110 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDeactivated ( );
	void onScreenClosed ( );
	bool UpdateOp ( float fDeltaT );
	void eventActivated ( );
};

// Class SFXGame.SFXSeqAct_ShowOptionsGUI
// 0x0005 (0x0115 - 0x0110)
class USFXSeqAct_ShowOptionsGUI : public UBioSequenceLatentAction
{
public:
	unsigned long                                      m_bIsFinished : 1;                                		// 0x0110 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      OptionsGUIMode;                                   		// 0x0114 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDeactivated ( );
	void onScreenClosed ( );
	bool UpdateOp ( float fDeltaT );
	void eventActivated ( );
};

// Class SFXGame.SFXSeqAct_ToggleAutoHints
// 0x0000 (0x00F8 - 0x00F8)
class USFXSeqAct_ToggleAutoHints : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqAct_TogglePowerWheelTutorial
// 0x0001 (0x00F9 - 0x00F8)
class USFXSeqAct_TogglePowerWheelTutorial : public USequenceAction
{
public:
	unsigned char                                      ePowerTutorialType;                               		// 0x00F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.SFXSeqAct_ToggleSquadScreenMessages
// 0x0000 (0x00F8 - 0x00F8)
class USFXSeqAct_ToggleSquadScreenMessages : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqAct_ToggleTutorialEvents
// 0x0000 (0x00F8 - 0x00F8)
class USFXSeqAct_ToggleTutorialEvents : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqAct_ToggleWeaponWheelTutorial
// 0x0000 (0x00F8 - 0x00F8)
class USFXSeqAct_ToggleWeaponWheelTutorial : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqAct_UnloadCharacterCreationMovies
// 0x0000 (0x00F8 - 0x00F8)
class USFXSeqAct_UnloadCharacterCreationMovies : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqAct_UpdateN7Achievements
// 0x0000 (0x00F8 - 0x00F8)
class USFXSeqAct_UpdateN7Achievements : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqAct_UpdateTrainingVideoCount
// 0x0004 (0x00FC - 0x00F8)
class USFXSeqAct_UpdateTrainingVideoCount : public USequenceAction
{
public:
	int                                                VideoWatched;                                     		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqCond_CheckEntitlement
// 0x0020 (0x00FC - 0x00DC)
class USFXSeqCond_CheckEntitlement : public USequenceCondition
{
public:
	struct FString                                     sEntitlementName;                                 		// 0x00DC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     sEntitlementGroup;                                		// 0x00EC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqCond_GetDifficulty
// 0x0008 (0x00E4 - 0x00DC)
class USFXSeqCond_GetDifficulty : public USequenceCondition
{
public:
	class AActor*                                      Player;                                           		// 0x00DC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSFHandler_PCAreaMap
// 0x0000 (0x00A8 - 0x00A8)
class USFXSFHandler_PCAreaMap : public USFXSFHandler_AreaMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void OnPanelAdded ( );
};

// Class SFXGame.SFXSFHandler_PCEANetworking
// 0x0000 (0x018C - 0x018C)
class USFXSFHandler_PCEANetworking : public USFXSFHandler_EANetworking
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventOnPanelAdded ( );
};

// Class SFXGame.SFXSFHandler_PCHUD
// 0x0000 (0x0580 - 0x0580)
class USFXSFHandler_PCHUD : public USFXSFHandler_HUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
};

// Class SFXGame.SFXSFHandler_PCLoad
// 0x0003 (0x01B4 - 0x01B1)
class USFXSFHandler_PCLoad : public USFXSFHandler_Load
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnPanelAdded ( );
};

// Class SFXGame.SFXSFHandler_PCPersonalization
// 0x0004 (0x0130 - 0x012C)
class USFXSFHandler_PCPersonalization : public USFXSFHandler_Personalization
{
public:
	unsigned long                                      bRotationEnabled : 1;                             		// 0x012C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void eventUpdate ( float fDeltaT );
};

// Class SFXGame.SFXSFHandler_PCSave
// 0x0003 (0x0160 - 0x015D)
class USFXSFHandler_PCSave : public USFXSFHandler_Save
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnPanelAdded ( );
};

// Class SFXGame.SFXSFHandler_PCSlideshow
// 0x0000 (0x010C - 0x010C)
class USFXSFHandler_PCSlideshow : public USFXSFHandler_Slideshow
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSFHandler_PS3Achievement
// 0x0000 (0x00AC - 0x00AC)
class USFXSFHandler_PS3Achievement : public UBioSFHandler_Achievement
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSFHandler_PS3EANetworking
// 0x0000 (0x018C - 0x018C)
class USFXSFHandler_PS3EANetworking : public USFXSFHandler_EANetworking
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSFHandler_PS3MainMenu
// 0x0000 (0x0150 - 0x0150)
class USFXSFHandler_PS3MainMenu : public UBioSFHandler_MainMenu
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ShowMarketPlace ( unsigned long bCheckForSignIn );
	void OnExecuteOpenMarketPlace ( );
	void OnExecuteCerberusDLCAvailable ( );
	void OnExecuteShowLiveContent ( );
	void OnSignInComplete_ShowMarketPlace ( unsigned long bSignedIn );
	void SetOnlineState ( unsigned char eState );
	void CerberusScreenStateChange ( unsigned char eNewState );
	void HasCerberusDLC ( unsigned long bVal );
	void SetMarqueeRepeatText ( struct FString MessageData );
	void OnDisplayNotification ( unsigned char Type, struct FString MessageData, struct FString Title, struct FString Image );
	void ClearNotifications ( );
	void AddCerberusItem ( struct FString i_sTitle, struct FString i_sInfo, struct FString i_sImage );
	void PrevCerberusItem ( );
	void NextCerberusItem ( );
};

// Class SFXGame.SFXSFHandler_PS3NewCharacter
// 0x0003 (0x0254 - 0x0251)
class USFXSFHandler_PS3NewCharacter : public UBioSFHandler_NewCharacter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSFHandler_PS3Options
// 0x0003 (0x0120 - 0x011D)
class USFXSFHandler_PS3Options : public UBioSFHandler_Options
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSFHandler_PS3Personalization
// 0x0000 (0x012C - 0x012C)
class USFXSFHandler_PS3Personalization : public USFXSFHandler_Personalization
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXShield_ArmoredDoor
// 0x0000 (0x03FC - 0x03FC)
class ASFXShield_ArmoredDoor : public ASFXShield_Armour
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXShield_Armour_Player
// 0x0008 (0x0404 - 0x03FC)
class ASFXShield_Armour_Player : public ASFXShield_Armour
{
public:
	float                                              DamageGateStartTime;                              		// 0x03FC (0x0004) [0x0000000000000000]              
	float                                              DamageGateInterval;                               		// 0x0400 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyDamage ( class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, float* Damage, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum );
};

// Class SFXGame.SFXShield_Biotic_Player
// 0x0008 (0x0404 - 0x03FC)
class ASFXShield_Biotic_Player : public ASFXShield_Biotic
{
public:
	float                                              DamageGateStartTime;                              		// 0x03FC (0x0004) [0x0000000000000000]              
	float                                              DamageGateInterval;                               		// 0x0400 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyDamage ( class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, float* Damage, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum );
};

// Class SFXGame.SFXShield_Energy_Player
// 0x0008 (0x0404 - 0x03FC)
class ASFXShield_Energy_Player : public ASFXShield_Energy
{
public:
	float                                              DamageGateStartTime;                              		// 0x03FC (0x0004) [0x0000000000000000]              
	float                                              DamageGateInterval;                               		// 0x0400 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyDamage ( class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, float* Damage, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum );
};

// Class SFXGame.SFXShield_GethEnergy
// 0x0000 (0x03FC - 0x03FC)
class ASFXShield_GethEnergy : public ASFXShield_Energy
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXShield_GethEnergy_Player
// 0x0000 (0x0404 - 0x0404)
class ASFXShield_GethEnergy_Player : public ASFXShield_Energy_Player
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ScaleShields ( );
};

// Class SFXGame.SFXShield_Heavy
// 0x0003 (0x03FC - 0x03F9)
class ASFXShield_Heavy : public ASFXShield_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXShield_Light
// 0x0003 (0x03FC - 0x03F9)
class ASFXShield_Light : public ASFXShield_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXShield_Medium
// 0x0003 (0x03FC - 0x03F9)
class ASFXShield_Medium : public ASFXShield_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXShield_OrganicArmour
// 0x0000 (0x03FC - 0x03FC)
class ASFXShield_OrganicArmour : public ASFXShield_Armour
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXShield_ReaperArmour
// 0x0000 (0x03FC - 0x03FC)
class ASFXShield_ReaperArmour : public ASFXShield_Armour
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXShield_ScionArmour
// 0x0000 (0x03FC - 0x03FC)
class ASFXShield_ScionArmour : public ASFXShield_Armour
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSignText
// 0x0002 (0x028C - 0x028A)
class ASFXSignText : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PostBeginPlay ( );
};


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif